//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taizhou.PLE.LawCom
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// RIA 应用程序的上下文。
    /// </summary>
    /// <remarks>
    /// 此上下文对库进行了扩展，使得应用程序服务和类型
    /// 可供代码和 xaml 使用。
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 WebContext 类的新实例。
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取向当前应用程序注册为生存期对象的上下文。
        /// </summary>
        /// 如果没有当前的应用程序，没有添加上下文或添加了多个上下文，
        /// 则会引发 <exception cref="InvalidOperationException">。
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace Taizhou.PLE.LawCom.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using Taizhou.PLE.LawCom.Web.Complex;
    
    
    /// <summary>
    /// “ACITIVITYDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACITIVITYDEFINITION : Entity
    {
        
        private EntityCollection<ACTIVITYINSTANCE> _activityinstances;
        
        private EntityCollection<ACTIVITYPERMISSION> _activitypermissions;
        
        private string _addesc;
        
        private decimal _adid;
        
        private string _adname;
        
        private EntityCollection<DOCDEFINITIONRELATION> _docdefinitionrelations;
        
        private Nullable<decimal> _timelimits;
        
        private Nullable<decimal> _wdid;
        
        private EntityRef<WORKFLOWDEFINITION> _workflowdefinition;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADDESCChanging(string value);
        partial void OnADDESCChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnADNAMEChanging(string value);
        partial void OnADNAMEChanged();
        partial void OnTIMELIMITSChanging(Nullable<decimal> value);
        partial void OnTIMELIMITSChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACITIVITYDEFINITION"/> 类的新实例。
        /// </summary>
        public ACITIVITYDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ACITIVITYDEFINITION_ACTIVITYINSTANCE", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYINSTANCE> ACTIVITYINSTANCES
        {
            get
            {
                if ((this._activityinstances == null))
                {
                    this._activityinstances = new EntityCollection<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCES", this.FilterACTIVITYINSTANCES, this.AttachACTIVITYINSTANCES, this.DetachACTIVITYINSTANCES);
                }
                return this._activityinstances;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYPERMISSION"/> 实体实例的集合。
        /// </summary>
        [Association("ACITIVITYDEFINITION_ACTIVITYPERMISSION", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYPERMISSION> ACTIVITYPERMISSIONS
        {
            get
            {
                if ((this._activitypermissions == null))
                {
                    this._activitypermissions = new EntityCollection<ACTIVITYPERMISSION>(this, "ACTIVITYPERMISSIONS", this.FilterACTIVITYPERMISSIONS, this.AttachACTIVITYPERMISSIONS, this.DetachACTIVITYPERMISSIONS);
                }
                return this._activitypermissions;
            }
        }
        
        /// <summary>
        /// 获取或设置“ADDESC”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ADDESC
        {
            get
            {
                return this._addesc;
            }
            set
            {
                if ((this._addesc != value))
                {
                    this.OnADDESCChanging(value);
                    this.RaiseDataMemberChanging("ADDESC");
                    this.ValidateProperty("ADDESC", value);
                    this._addesc = value;
                    this.RaiseDataMemberChanged("ADDESC");
                    this.OnADDESCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADNAME
        {
            get
            {
                return this._adname;
            }
            set
            {
                if ((this._adname != value))
                {
                    this.OnADNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADNAME");
                    this.ValidateProperty("ADNAME", value);
                    this._adname = value;
                    this.RaiseDataMemberChanged("ADNAME");
                    this.OnADNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DOCDEFINITIONRELATION"/> 实体实例的集合。
        /// </summary>
        [Association("ACITIVITYDEFINITION_DOCDEFINITIONRELATION", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<DOCDEFINITIONRELATION> DOCDEFINITIONRELATIONS
        {
            get
            {
                if ((this._docdefinitionrelations == null))
                {
                    this._docdefinitionrelations = new EntityCollection<DOCDEFINITIONRELATION>(this, "DOCDEFINITIONRELATIONS", this.FilterDOCDEFINITIONRELATIONS, this.AttachDOCDEFINITIONRELATIONS, this.DetachDOCDEFINITIONRELATIONS);
                }
                return this._docdefinitionrelations;
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMITS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMITS
        {
            get
            {
                return this._timelimits;
            }
            set
            {
                if ((this._timelimits != value))
                {
                    this.OnTIMELIMITSChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMITS");
                    this.ValidateProperty("TIMELIMITS", value);
                    this._timelimits = value;
                    this.RaiseDataMemberChanged("TIMELIMITS");
                    this.OnTIMELIMITSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWDEFINITION"/> 实体。
        /// </summary>
        [Association("WORKFLOWDEFINITION_ACITIVITYDEFINITION", "WDID", "WDID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWDEFINITION WORKFLOWDEFINITION
        {
            get
            {
                if ((this._workflowdefinition == null))
                {
                    this._workflowdefinition = new EntityRef<WORKFLOWDEFINITION>(this, "WORKFLOWDEFINITION", this.FilterWORKFLOWDEFINITION);
                }
                return this._workflowdefinition.Entity;
            }
            set
            {
                WORKFLOWDEFINITION previous = this.WORKFLOWDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWDEFINITION", value);
                    if ((previous != null))
                    {
                        this._workflowdefinition.Entity = null;
                        previous.ACITIVITYDEFINITIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WDID = value.WDID;
                    }
                    else
                    {
                        this.WDID = default(Nullable<decimal>);
                    }
                    this._workflowdefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ACITIVITYDEFINITIONS.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWDEFINITION");
                }
            }
        }
        
        private void AttachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.ACITIVITYDEFINITION = this;
        }
        
        private void DetachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.ACITIVITYDEFINITION = null;
        }
        
        private bool FilterACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private void AttachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.ACITIVITYDEFINITION = this;
        }
        
        private void DetachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.ACITIVITYDEFINITION = null;
        }
        
        private bool FilterACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private void AttachDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            entity.ACITIVITYDEFINITION = this;
        }
        
        private void DetachDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            entity.ACITIVITYDEFINITION = null;
        }
        
        private bool FilterDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterWORKFLOWDEFINITION(WORKFLOWDEFINITION entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “ACTIVITYDEFINITIONDOCPHAS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACTIVITYDEFINITIONDOCPHAS : Entity
    {
        
        private decimal _adid;
        
        private decimal _dpid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnDPIDChanging(decimal value);
        partial void OnDPIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACTIVITYDEFINITIONDOCPHAS"/> 类的新实例。
        /// </summary>
        public ACTIVITYDEFINITIONDOCPHAS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DPID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal DPID
        {
            get
            {
                return this._dpid;
            }
            set
            {
                if ((this._dpid != value))
                {
                    this.OnDPIDChanging(value);
                    this.ValidateProperty("DPID", value);
                    this._dpid = value;
                    this.RaisePropertyChanged("DPID");
                    this.OnDPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._adid, this._dpid);
        }
    }
    
    /// <summary>
    /// “ACTIVITYINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACTIVITYINSTANCE : Entity
    {
        
        private EntityRef<ACITIVITYDEFINITION> _acitivitydefinition;
        
        private EntityRef<ACTIVITYINSTANCE> _activityinstance1;
        
        private EntityCollection<ACTIVITYINSTANCE> _activityinstances1;
        
        private EntityRef<ACTIVITYSTATUS> _activitystatus;
        
        private Nullable<decimal> _activitystatusid;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<decimal> _assignuserid;
        
        private Nullable<DateTime> _deliverytime;
        
        private EntityCollection<DOCINSTANCE> _docinstances;
        
        private Nullable<DateTime> _expirationtime;
        
        private Nullable<decimal> _fromuserid;
        
        private string _previousaiid;
        
        private Nullable<DateTime> _processtime;
        
        private Nullable<decimal> _processuserid;
        
        private string _wiid;
        
        private EntityRef<WORKFLOWINSTANCE> _workflowinstance;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACTIVITYSTATUSIDChanging(Nullable<decimal> value);
        partial void OnACTIVITYSTATUSIDChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnASSIGNUSERIDChanging(Nullable<decimal> value);
        partial void OnASSIGNUSERIDChanged();
        partial void OnDELIVERYTIMEChanging(Nullable<DateTime> value);
        partial void OnDELIVERYTIMEChanged();
        partial void OnEXPIRATIONTIMEChanging(Nullable<DateTime> value);
        partial void OnEXPIRATIONTIMEChanged();
        partial void OnFROMUSERIDChanging(Nullable<decimal> value);
        partial void OnFROMUSERIDChanged();
        partial void OnPREVIOUSAIIDChanging(string value);
        partial void OnPREVIOUSAIIDChanged();
        partial void OnPROCESSTIMEChanging(Nullable<DateTime> value);
        partial void OnPROCESSTIMEChanged();
        partial void OnPROCESSUSERIDChanging(Nullable<decimal> value);
        partial void OnPROCESSUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACTIVITYINSTANCE"/> 类的新实例。
        /// </summary>
        public ACTIVITYINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACITIVITYDEFINITION"/> 实体。
        /// </summary>
        [Association("ACITIVITYDEFINITION_ACTIVITYINSTANCE", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACITIVITYDEFINITION ACITIVITYDEFINITION
        {
            get
            {
                if ((this._acitivitydefinition == null))
                {
                    this._acitivitydefinition = new EntityRef<ACITIVITYDEFINITION>(this, "ACITIVITYDEFINITION", this.FilterACITIVITYDEFINITION);
                }
                return this._acitivitydefinition.Entity;
            }
            set
            {
                ACITIVITYDEFINITION previous = this.ACITIVITYDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ACITIVITYDEFINITION", value);
                    if ((previous != null))
                    {
                        this._acitivitydefinition.Entity = null;
                        previous.ACTIVITYINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(Nullable<decimal>);
                    }
                    this._acitivitydefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("ACITIVITYDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACTIVITYINSTANCE"/> 实体。
        /// </summary>
        [Association("ACTIVITYINSTANCE_ACTIVITYINSTANCE", "PREVIOUSAIID", "AIID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACTIVITYINSTANCE ACTIVITYINSTANCE1
        {
            get
            {
                if ((this._activityinstance1 == null))
                {
                    this._activityinstance1 = new EntityRef<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCE1", this.FilterACTIVITYINSTANCE1);
                }
                return this._activityinstance1.Entity;
            }
            set
            {
                ACTIVITYINSTANCE previous = this.ACTIVITYINSTANCE1;
                if ((previous != value))
                {
                    this.ValidateProperty("ACTIVITYINSTANCE1", value);
                    if ((previous != null))
                    {
                        this._activityinstance1.Entity = null;
                        previous.ACTIVITYINSTANCES1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PREVIOUSAIID = value.AIID;
                    }
                    else
                    {
                        this.PREVIOUSAIID = default(string);
                    }
                    this._activityinstance1.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYINSTANCES1.Add(this);
                    }
                    this.RaisePropertyChanged("ACTIVITYINSTANCE1");
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ACTIVITYINSTANCE_ACTIVITYINSTANCE", "AIID", "PREVIOUSAIID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYINSTANCE> ACTIVITYINSTANCES1
        {
            get
            {
                if ((this._activityinstances1 == null))
                {
                    this._activityinstances1 = new EntityCollection<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCES1", this.FilterACTIVITYINSTANCES1, this.AttachACTIVITYINSTANCES1, this.DetachACTIVITYINSTANCES1);
                }
                return this._activityinstances1;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACTIVITYSTATUS"/> 实体。
        /// </summary>
        [Association("ACTIVITYSTATUS_ACTIVITYINSTANCE", "ACTIVITYSTATUSID", "ACTIVITYSTATUSID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACTIVITYSTATUS ACTIVITYSTATUS
        {
            get
            {
                if ((this._activitystatus == null))
                {
                    this._activitystatus = new EntityRef<ACTIVITYSTATUS>(this, "ACTIVITYSTATUS", this.FilterACTIVITYSTATUS);
                }
                return this._activitystatus.Entity;
            }
            set
            {
                ACTIVITYSTATUS previous = this.ACTIVITYSTATUS;
                if ((previous != value))
                {
                    this.ValidateProperty("ACTIVITYSTATUS", value);
                    if ((previous != null))
                    {
                        this._activitystatus.Entity = null;
                        previous.ACTIVITYINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ACTIVITYSTATUSID = value.ACTIVITYSTATUSID;
                    }
                    else
                    {
                        this.ACTIVITYSTATUSID = default(Nullable<decimal>);
                    }
                    this._activitystatus.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("ACTIVITYSTATUS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYSTATUSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ACTIVITYSTATUSID
        {
            get
            {
                return this._activitystatusid;
            }
            set
            {
                if ((this._activitystatusid != value))
                {
                    this.OnACTIVITYSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("ACTIVITYSTATUSID");
                    this.ValidateProperty("ACTIVITYSTATUSID", value);
                    this._activitystatusid = value;
                    this.RaiseDataMemberChanged("ACTIVITYSTATUSID");
                    this.OnACTIVITYSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ASSIGNUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ASSIGNUSERID
        {
            get
            {
                return this._assignuserid;
            }
            set
            {
                if ((this._assignuserid != value))
                {
                    this.OnASSIGNUSERIDChanging(value);
                    this.RaiseDataMemberChanging("ASSIGNUSERID");
                    this.ValidateProperty("ASSIGNUSERID", value);
                    this._assignuserid = value;
                    this.RaiseDataMemberChanged("ASSIGNUSERID");
                    this.OnASSIGNUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DELIVERYTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DELIVERYTIME
        {
            get
            {
                return this._deliverytime;
            }
            set
            {
                if ((this._deliverytime != value))
                {
                    this.OnDELIVERYTIMEChanging(value);
                    this.RaiseDataMemberChanging("DELIVERYTIME");
                    this.ValidateProperty("DELIVERYTIME", value);
                    this._deliverytime = value;
                    this.RaiseDataMemberChanged("DELIVERYTIME");
                    this.OnDELIVERYTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DOCINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ACTIVITYINSTANCE_DOCINSTANCE", "AIID", "AIID")]
        [XmlIgnore()]
        public EntityCollection<DOCINSTANCE> DOCINSTANCES
        {
            get
            {
                if ((this._docinstances == null))
                {
                    this._docinstances = new EntityCollection<DOCINSTANCE>(this, "DOCINSTANCES", this.FilterDOCINSTANCES, this.AttachDOCINSTANCES, this.DetachDOCINSTANCES);
                }
                return this._docinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“EXPIRATIONTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EXPIRATIONTIME
        {
            get
            {
                return this._expirationtime;
            }
            set
            {
                if ((this._expirationtime != value))
                {
                    this.OnEXPIRATIONTIMEChanging(value);
                    this.RaiseDataMemberChanging("EXPIRATIONTIME");
                    this.ValidateProperty("EXPIRATIONTIME", value);
                    this._expirationtime = value;
                    this.RaiseDataMemberChanged("EXPIRATIONTIME");
                    this.OnEXPIRATIONTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FROMUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FROMUSERID
        {
            get
            {
                return this._fromuserid;
            }
            set
            {
                if ((this._fromuserid != value))
                {
                    this.OnFROMUSERIDChanging(value);
                    this.RaiseDataMemberChanging("FROMUSERID");
                    this.ValidateProperty("FROMUSERID", value);
                    this._fromuserid = value;
                    this.RaiseDataMemberChanged("FROMUSERID");
                    this.OnFROMUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PREVIOUSAIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string PREVIOUSAIID
        {
            get
            {
                return this._previousaiid;
            }
            set
            {
                if ((this._previousaiid != value))
                {
                    this.OnPREVIOUSAIIDChanging(value);
                    this.RaiseDataMemberChanging("PREVIOUSAIID");
                    this.ValidateProperty("PREVIOUSAIID", value);
                    this._previousaiid = value;
                    this.RaiseDataMemberChanged("PREVIOUSAIID");
                    this.OnPREVIOUSAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROCESSTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PROCESSTIME
        {
            get
            {
                return this._processtime;
            }
            set
            {
                if ((this._processtime != value))
                {
                    this.OnPROCESSTIMEChanging(value);
                    this.RaiseDataMemberChanging("PROCESSTIME");
                    this.ValidateProperty("PROCESSTIME", value);
                    this._processtime = value;
                    this.RaiseDataMemberChanged("PROCESSTIME");
                    this.OnPROCESSTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROCESSUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PROCESSUSERID
        {
            get
            {
                return this._processuserid;
            }
            set
            {
                if ((this._processuserid != value))
                {
                    this.OnPROCESSUSERIDChanging(value);
                    this.RaiseDataMemberChanging("PROCESSUSERID");
                    this.ValidateProperty("PROCESSUSERID", value);
                    this._processuserid = value;
                    this.RaiseDataMemberChanged("PROCESSUSERID");
                    this.OnPROCESSUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("WORKFLOWINSTANCE_ACTIVITYINSTANCE", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWINSTANCE WORKFLOWINSTANCE
        {
            get
            {
                if ((this._workflowinstance == null))
                {
                    this._workflowinstance = new EntityRef<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCE", this.FilterWORKFLOWINSTANCE);
                }
                return this._workflowinstance.Entity;
            }
            set
            {
                WORKFLOWINSTANCE previous = this.WORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._workflowinstance.Entity = null;
                        previous.ACTIVITYINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._workflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWINSTANCE");
                }
            }
        }
        
        private bool FilterACITIVITYDEFINITION(ACITIVITYDEFINITION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterACTIVITYINSTANCE1(ACTIVITYINSTANCE entity)
        {
            return (entity.AIID == this.PREVIOUSAIID);
        }
        
        private void AttachACTIVITYINSTANCES1(ACTIVITYINSTANCE entity)
        {
            entity.ACTIVITYINSTANCE1 = this;
        }
        
        private void DetachACTIVITYINSTANCES1(ACTIVITYINSTANCE entity)
        {
            entity.ACTIVITYINSTANCE1 = null;
        }
        
        private bool FilterACTIVITYINSTANCES1(ACTIVITYINSTANCE entity)
        {
            return (entity.PREVIOUSAIID == this.AIID);
        }
        
        private bool FilterACTIVITYSTATUS(ACTIVITYSTATUS entity)
        {
            return (entity.ACTIVITYSTATUSID == this.ACTIVITYSTATUSID);
        }
        
        private void AttachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.ACTIVITYINSTANCE = this;
        }
        
        private void DetachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.ACTIVITYINSTANCE = null;
        }
        
        private bool FilterDOCINSTANCES(DOCINSTANCE entity)
        {
            return (entity.AIID == this.AIID);
        }
        
        private bool FilterWORKFLOWINSTANCE(WORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “ACTIVITYPERMISSION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACTIVITYPERMISSION : Entity
    {
        
        private EntityRef<ACITIVITYDEFINITION> _acitivitydefinition;
        
        private EntityRef<ACTIVITYPERMISSIONTYPE> _activitypermissiontype;
        
        private Nullable<decimal> _activitypermissiontypeid;
        
        private decimal _adid;
        
        private Nullable<decimal> _positionid;
        
        private decimal _regionid;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACTIVITYPERMISSIONTYPEIDChanging(Nullable<decimal> value);
        partial void OnACTIVITYPERMISSIONTYPEIDChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnPOSITIONIDChanging(Nullable<decimal> value);
        partial void OnPOSITIONIDChanged();
        partial void OnREGIONIDChanging(decimal value);
        partial void OnREGIONIDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACTIVITYPERMISSION"/> 类的新实例。
        /// </summary>
        public ACTIVITYPERMISSION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACITIVITYDEFINITION"/> 实体。
        /// </summary>
        [Association("ACITIVITYDEFINITION_ACTIVITYPERMISSION", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACITIVITYDEFINITION ACITIVITYDEFINITION
        {
            get
            {
                if ((this._acitivitydefinition == null))
                {
                    this._acitivitydefinition = new EntityRef<ACITIVITYDEFINITION>(this, "ACITIVITYDEFINITION", this.FilterACITIVITYDEFINITION);
                }
                return this._acitivitydefinition.Entity;
            }
            set
            {
                ACITIVITYDEFINITION previous = this.ACITIVITYDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ACITIVITYDEFINITION", value);
                    if ((previous != null))
                    {
                        this._acitivitydefinition.Entity = null;
                        previous.ACTIVITYPERMISSIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(decimal);
                    }
                    this._acitivitydefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYPERMISSIONS.Add(this);
                    }
                    this.RaisePropertyChanged("ACITIVITYDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACTIVITYPERMISSIONTYPE"/> 实体。
        /// </summary>
        [Association("ACTIVITYPERMISSIONTYPE_ACTIVITYPERMISSION", "ACTIVITYPERMISSIONTYPEID", "ACTIVITYPERMISSIONTYPEID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACTIVITYPERMISSIONTYPE ACTIVITYPERMISSIONTYPE
        {
            get
            {
                if ((this._activitypermissiontype == null))
                {
                    this._activitypermissiontype = new EntityRef<ACTIVITYPERMISSIONTYPE>(this, "ACTIVITYPERMISSIONTYPE", this.FilterACTIVITYPERMISSIONTYPE);
                }
                return this._activitypermissiontype.Entity;
            }
            set
            {
                ACTIVITYPERMISSIONTYPE previous = this.ACTIVITYPERMISSIONTYPE;
                if ((previous != value))
                {
                    this.ValidateProperty("ACTIVITYPERMISSIONTYPE", value);
                    if ((previous != null))
                    {
                        this._activitypermissiontype.Entity = null;
                        previous.ACTIVITYPERMISSIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ACTIVITYPERMISSIONTYPEID = value.ACTIVITYPERMISSIONTYPEID;
                    }
                    else
                    {
                        this.ACTIVITYPERMISSIONTYPEID = default(Nullable<decimal>);
                    }
                    this._activitypermissiontype.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYPERMISSIONS.Add(this);
                    }
                    this.RaisePropertyChanged("ACTIVITYPERMISSIONTYPE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYPERMISSIONTYPEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ACTIVITYPERMISSIONTYPEID
        {
            get
            {
                return this._activitypermissiontypeid;
            }
            set
            {
                if ((this._activitypermissiontypeid != value))
                {
                    this.OnACTIVITYPERMISSIONTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("ACTIVITYPERMISSIONTYPEID");
                    this.ValidateProperty("ACTIVITYPERMISSIONTYPEID", value);
                    this._activitypermissiontypeid = value;
                    this.RaiseDataMemberChanged("ACTIVITYPERMISSIONTYPEID");
                    this.OnACTIVITYPERMISSIONTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> POSITIONID
        {
            get
            {
                return this._positionid;
            }
            set
            {
                if ((this._positionid != value))
                {
                    this.OnPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("POSITIONID");
                    this.ValidateProperty("POSITIONID", value);
                    this._positionid = value;
                    this.RaiseDataMemberChanged("POSITIONID");
                    this.OnPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REGIONID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal REGIONID
        {
            get
            {
                return this._regionid;
            }
            set
            {
                if ((this._regionid != value))
                {
                    this.OnREGIONIDChanging(value);
                    this.RaiseDataMemberChanging("REGIONID");
                    this.ValidateProperty("REGIONID", value);
                    this._regionid = value;
                    this.RaiseDataMemberChanged("REGIONID");
                    this.OnREGIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_ACTIVITYPERMISSION", "REGIONID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.ACTIVITYPERMISSIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.REGIONID = value.UNITID;
                    }
                    else
                    {
                        this.REGIONID = default(decimal);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.ACTIVITYPERMISSIONS.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterACITIVITYDEFINITION(ACITIVITYDEFINITION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterACTIVITYPERMISSIONTYPE(ACTIVITYPERMISSIONTYPE entity)
        {
            return (entity.ACTIVITYPERMISSIONTYPEID == this.ACTIVITYPERMISSIONTYPEID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.REGIONID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._adid, this._regionid);
        }
    }
    
    /// <summary>
    /// “ACTIVITYPERMISSIONTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACTIVITYPERMISSIONTYPE : Entity
    {
        
        private EntityCollection<ACTIVITYPERMISSION> _activitypermissions;
        
        private decimal _activitypermissiontypeid;
        
        private string _activitypermissiontypename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACTIVITYPERMISSIONTYPEIDChanging(decimal value);
        partial void OnACTIVITYPERMISSIONTYPEIDChanged();
        partial void OnACTIVITYPERMISSIONTYPENAMEChanging(string value);
        partial void OnACTIVITYPERMISSIONTYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACTIVITYPERMISSIONTYPE"/> 类的新实例。
        /// </summary>
        public ACTIVITYPERMISSIONTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYPERMISSION"/> 实体实例的集合。
        /// </summary>
        [Association("ACTIVITYPERMISSIONTYPE_ACTIVITYPERMISSION", "ACTIVITYPERMISSIONTYPEID", "ACTIVITYPERMISSIONTYPEID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYPERMISSION> ACTIVITYPERMISSIONS
        {
            get
            {
                if ((this._activitypermissions == null))
                {
                    this._activitypermissions = new EntityCollection<ACTIVITYPERMISSION>(this, "ACTIVITYPERMISSIONS", this.FilterACTIVITYPERMISSIONS, this.AttachACTIVITYPERMISSIONS, this.DetachACTIVITYPERMISSIONS);
                }
                return this._activitypermissions;
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYPERMISSIONTYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ACTIVITYPERMISSIONTYPEID
        {
            get
            {
                return this._activitypermissiontypeid;
            }
            set
            {
                if ((this._activitypermissiontypeid != value))
                {
                    this.OnACTIVITYPERMISSIONTYPEIDChanging(value);
                    this.ValidateProperty("ACTIVITYPERMISSIONTYPEID", value);
                    this._activitypermissiontypeid = value;
                    this.RaisePropertyChanged("ACTIVITYPERMISSIONTYPEID");
                    this.OnACTIVITYPERMISSIONTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYPERMISSIONTYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ACTIVITYPERMISSIONTYPENAME
        {
            get
            {
                return this._activitypermissiontypename;
            }
            set
            {
                if ((this._activitypermissiontypename != value))
                {
                    this.OnACTIVITYPERMISSIONTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("ACTIVITYPERMISSIONTYPENAME");
                    this.ValidateProperty("ACTIVITYPERMISSIONTYPENAME", value);
                    this._activitypermissiontypename = value;
                    this.RaiseDataMemberChanged("ACTIVITYPERMISSIONTYPENAME");
                    this.OnACTIVITYPERMISSIONTYPENAMEChanged();
                }
            }
        }
        
        private void AttachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.ACTIVITYPERMISSIONTYPE = this;
        }
        
        private void DetachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.ACTIVITYPERMISSIONTYPE = null;
        }
        
        private bool FilterACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            return (entity.ACTIVITYPERMISSIONTYPEID == this.ACTIVITYPERMISSIONTYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._activitypermissiontypeid;
        }
    }
    
    /// <summary>
    /// “ACTIVITYSTATUS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ACTIVITYSTATUS : Entity
    {
        
        private EntityCollection<ACTIVITYINSTANCE> _activityinstances;
        
        private decimal _activitystatusid;
        
        private string _activitystatusname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACTIVITYSTATUSIDChanging(decimal value);
        partial void OnACTIVITYSTATUSIDChanged();
        partial void OnACTIVITYSTATUSNAMEChanging(string value);
        partial void OnACTIVITYSTATUSNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ACTIVITYSTATUS"/> 类的新实例。
        /// </summary>
        public ACTIVITYSTATUS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ACTIVITYSTATUS_ACTIVITYINSTANCE", "ACTIVITYSTATUSID", "ACTIVITYSTATUSID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYINSTANCE> ACTIVITYINSTANCES
        {
            get
            {
                if ((this._activityinstances == null))
                {
                    this._activityinstances = new EntityCollection<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCES", this.FilterACTIVITYINSTANCES, this.AttachACTIVITYINSTANCES, this.DetachACTIVITYINSTANCES);
                }
                return this._activityinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYSTATUSID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ACTIVITYSTATUSID
        {
            get
            {
                return this._activitystatusid;
            }
            set
            {
                if ((this._activitystatusid != value))
                {
                    this.OnACTIVITYSTATUSIDChanging(value);
                    this.ValidateProperty("ACTIVITYSTATUSID", value);
                    this._activitystatusid = value;
                    this.RaisePropertyChanged("ACTIVITYSTATUSID");
                    this.OnACTIVITYSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ACTIVITYSTATUSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ACTIVITYSTATUSNAME
        {
            get
            {
                return this._activitystatusname;
            }
            set
            {
                if ((this._activitystatusname != value))
                {
                    this.OnACTIVITYSTATUSNAMEChanging(value);
                    this.RaiseDataMemberChanging("ACTIVITYSTATUSNAME");
                    this.ValidateProperty("ACTIVITYSTATUSNAME", value);
                    this._activitystatusname = value;
                    this.RaiseDataMemberChanged("ACTIVITYSTATUSNAME");
                    this.OnACTIVITYSTATUSNAMEChanged();
                }
            }
        }
        
        private void AttachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.ACTIVITYSTATUS = this;
        }
        
        private void DetachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.ACTIVITYSTATUS = null;
        }
        
        private bool FilterACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            return (entity.ACTIVITYSTATUSID == this.ACTIVITYSTATUSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._activitystatusid;
        }
    }
    
    /// <summary>
    /// “APPVERSION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class APPVERSION : Entity
    {
        
        private decimal _versioncode;
        
        private string _versionname;
        
        private Nullable<decimal> _versionsize;
        
        private string _versionurl;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnVERSIONCODEChanging(decimal value);
        partial void OnVERSIONCODEChanged();
        partial void OnVERSIONNAMEChanging(string value);
        partial void OnVERSIONNAMEChanged();
        partial void OnVERSIONSIZEChanging(Nullable<decimal> value);
        partial void OnVERSIONSIZEChanged();
        partial void OnVERSIONURLChanging(string value);
        partial void OnVERSIONURLChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="APPVERSION"/> 类的新实例。
        /// </summary>
        public APPVERSION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“VERSIONCODE”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal VERSIONCODE
        {
            get
            {
                return this._versioncode;
            }
            set
            {
                if ((this._versioncode != value))
                {
                    this.OnVERSIONCODEChanging(value);
                    this.ValidateProperty("VERSIONCODE", value);
                    this._versioncode = value;
                    this.RaisePropertyChanged("VERSIONCODE");
                    this.OnVERSIONCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VERSIONNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string VERSIONNAME
        {
            get
            {
                return this._versionname;
            }
            set
            {
                if ((this._versionname != value))
                {
                    this.OnVERSIONNAMEChanging(value);
                    this.RaiseDataMemberChanging("VERSIONNAME");
                    this.ValidateProperty("VERSIONNAME", value);
                    this._versionname = value;
                    this.RaiseDataMemberChanged("VERSIONNAME");
                    this.OnVERSIONNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VERSIONSIZE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> VERSIONSIZE
        {
            get
            {
                return this._versionsize;
            }
            set
            {
                if ((this._versionsize != value))
                {
                    this.OnVERSIONSIZEChanging(value);
                    this.RaiseDataMemberChanging("VERSIONSIZE");
                    this.ValidateProperty("VERSIONSIZE", value);
                    this._versionsize = value;
                    this.RaiseDataMemberChanged("VERSIONSIZE");
                    this.OnVERSIONSIZEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VERSIONURL”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string VERSIONURL
        {
            get
            {
                return this._versionurl;
            }
            set
            {
                if ((this._versionurl != value))
                {
                    this.OnVERSIONURLChanging(value);
                    this.RaiseDataMemberChanging("VERSIONURL");
                    this.ValidateProperty("VERSIONURL", value);
                    this._versionurl = value;
                    this.RaiseDataMemberChanged("VERSIONURL");
                    this.OnVERSIONURLChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._versioncode;
        }
    }
    
    /// <summary>
    /// “ARTICLE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ARTICLE : Entity
    {
        
        private Nullable<decimal> _approvalstatusid;
        
        private Nullable<DateTime> _approvaltime;
        
        private Nullable<decimal> _approvaluserid;
        
        private decimal _articleid;
        
        private string _author;
        
        private Nullable<decimal> _categoryid;
        
        private string _content;
        
        private Nullable<DateTime> _createdtime;
        
        private Nullable<decimal> _createduserid;
        
        private EntityRef<PORTALCATEGORy> _portalcategoRy;
        
        private Nullable<decimal> _statusid;
        
        private string _title;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAPPROVALSTATUSIDChanging(Nullable<decimal> value);
        partial void OnAPPROVALSTATUSIDChanged();
        partial void OnAPPROVALTIMEChanging(Nullable<DateTime> value);
        partial void OnAPPROVALTIMEChanged();
        partial void OnAPPROVALUSERIDChanging(Nullable<decimal> value);
        partial void OnAPPROVALUSERIDChanged();
        partial void OnARTICLEIDChanging(decimal value);
        partial void OnARTICLEIDChanged();
        partial void OnAUTHORChanging(string value);
        partial void OnAUTHORChanged();
        partial void OnCATEGORYIDChanging(Nullable<decimal> value);
        partial void OnCATEGORYIDChanged();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnCREATEDUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEDUSERIDChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTITLEChanging(string value);
        partial void OnTITLEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ARTICLE"/> 类的新实例。
        /// </summary>
        public ARTICLE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“APPROVALSTATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APPROVALSTATUSID
        {
            get
            {
                return this._approvalstatusid;
            }
            set
            {
                if ((this._approvalstatusid != value))
                {
                    this.OnAPPROVALSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("APPROVALSTATUSID");
                    this.ValidateProperty("APPROVALSTATUSID", value);
                    this._approvalstatusid = value;
                    this.RaiseDataMemberChanged("APPROVALSTATUSID");
                    this.OnAPPROVALSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APPROVALTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> APPROVALTIME
        {
            get
            {
                return this._approvaltime;
            }
            set
            {
                if ((this._approvaltime != value))
                {
                    this.OnAPPROVALTIMEChanging(value);
                    this.RaiseDataMemberChanging("APPROVALTIME");
                    this.ValidateProperty("APPROVALTIME", value);
                    this._approvaltime = value;
                    this.RaiseDataMemberChanged("APPROVALTIME");
                    this.OnAPPROVALTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APPROVALUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APPROVALUSERID
        {
            get
            {
                return this._approvaluserid;
            }
            set
            {
                if ((this._approvaluserid != value))
                {
                    this.OnAPPROVALUSERIDChanging(value);
                    this.RaiseDataMemberChanging("APPROVALUSERID");
                    this.ValidateProperty("APPROVALUSERID", value);
                    this._approvaluserid = value;
                    this.RaiseDataMemberChanged("APPROVALUSERID");
                    this.OnAPPROVALUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ARTICLEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ARTICLEID
        {
            get
            {
                return this._articleid;
            }
            set
            {
                if ((this._articleid != value))
                {
                    this.OnARTICLEIDChanging(value);
                    this.ValidateProperty("ARTICLEID", value);
                    this._articleid = value;
                    this.RaisePropertyChanged("ARTICLEID");
                    this.OnARTICLEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AUTHOR”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string AUTHOR
        {
            get
            {
                return this._author;
            }
            set
            {
                if ((this._author != value))
                {
                    this.OnAUTHORChanging(value);
                    this.RaiseDataMemberChanging("AUTHOR");
                    this.ValidateProperty("AUTHOR", value);
                    this._author = value;
                    this.RaiseDataMemberChanged("AUTHOR");
                    this.OnAUTHORChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CATEGORYID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CATEGORYID
        {
            get
            {
                return this._categoryid;
            }
            set
            {
                if ((this._categoryid != value))
                {
                    this.OnCATEGORYIDChanging(value);
                    this.RaiseDataMemberChanging("CATEGORYID");
                    this.ValidateProperty("CATEGORYID", value);
                    this._categoryid = value;
                    this.RaiseDataMemberChanged("CATEGORYID");
                    this.OnCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEDUSERID
        {
            get
            {
                return this._createduserid;
            }
            set
            {
                if ((this._createduserid != value))
                {
                    this.OnCREATEDUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEDUSERID");
                    this.ValidateProperty("CREATEDUSERID", value);
                    this._createduserid = value;
                    this.RaiseDataMemberChanged("CREATEDUSERID");
                    this.OnCREATEDUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="PORTALCATEGORy"/> 实体。
        /// </summary>
        [Association("PORTALCATEGORy_ARTICLE", "CATEGORYID", "CATEGORYID", IsForeignKey=true)]
        [XmlIgnore()]
        public PORTALCATEGORy PORTALCATEGORy
        {
            get
            {
                if ((this._portalcategoRy == null))
                {
                    this._portalcategoRy = new EntityRef<PORTALCATEGORy>(this, "PORTALCATEGORy", this.FilterPORTALCATEGORy);
                }
                return this._portalcategoRy.Entity;
            }
            set
            {
                PORTALCATEGORy previous = this.PORTALCATEGORy;
                if ((previous != value))
                {
                    this.ValidateProperty("PORTALCATEGORy", value);
                    if ((previous != null))
                    {
                        this._portalcategoRy.Entity = null;
                        previous.ARTICLES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CATEGORYID = value.CATEGORYID;
                    }
                    else
                    {
                        this.CATEGORYID = default(Nullable<decimal>);
                    }
                    this._portalcategoRy.Entity = value;
                    if ((value != null))
                    {
                        value.ARTICLES.Add(this);
                    }
                    this.RaisePropertyChanged("PORTALCATEGORy");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string TITLE
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTITLEChanging(value);
                    this.RaiseDataMemberChanging("TITLE");
                    this.ValidateProperty("TITLE", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("TITLE");
                    this.OnTITLEChanged();
                }
            }
        }
        
        private bool FilterPORTALCATEGORy(PORTALCATEGORy entity)
        {
            return (entity.CATEGORYID == this.CATEGORYID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._articleid;
        }
    }
    
    /// <summary>
    /// “CARSYNCPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CARSYNCPOSITION : Entity
    {
        
        private Nullable<decimal> _acc;
        
        private string _carno;
        
        private decimal _carsyncpositionid;
        
        private Nullable<decimal> _direction;
        
        private Nullable<decimal> _ishighqualtity;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private Nullable<DateTime> _positioningtime;
        
        private Nullable<decimal> _speed;
        
        private string _statusdesc;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACCChanging(Nullable<decimal> value);
        partial void OnACCChanged();
        partial void OnCARNOChanging(string value);
        partial void OnCARNOChanged();
        partial void OnCARSYNCPOSITIONIDChanging(decimal value);
        partial void OnCARSYNCPOSITIONIDChanged();
        partial void OnDIRECTIONChanging(Nullable<decimal> value);
        partial void OnDIRECTIONChanged();
        partial void OnISHIGHQUALTITYChanging(Nullable<decimal> value);
        partial void OnISHIGHQUALTITYChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPOSITIONINGTIMEChanging(Nullable<DateTime> value);
        partial void OnPOSITIONINGTIMEChanged();
        partial void OnSPEEDChanging(Nullable<decimal> value);
        partial void OnSPEEDChanged();
        partial void OnSTATUSDESCChanging(string value);
        partial void OnSTATUSDESCChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CARSYNCPOSITION"/> 类的新实例。
        /// </summary>
        public CARSYNCPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ACC”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ACC
        {
            get
            {
                return this._acc;
            }
            set
            {
                if ((this._acc != value))
                {
                    this.OnACCChanging(value);
                    this.RaiseDataMemberChanging("ACC");
                    this.ValidateProperty("ACC", value);
                    this._acc = value;
                    this.RaiseDataMemberChanged("ACC");
                    this.OnACCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CARNO”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CARNO
        {
            get
            {
                return this._carno;
            }
            set
            {
                if ((this._carno != value))
                {
                    this.OnCARNOChanging(value);
                    this.RaiseDataMemberChanging("CARNO");
                    this.ValidateProperty("CARNO", value);
                    this._carno = value;
                    this.RaiseDataMemberChanged("CARNO");
                    this.OnCARNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CARSYNCPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARSYNCPOSITIONID
        {
            get
            {
                return this._carsyncpositionid;
            }
            set
            {
                if ((this._carsyncpositionid != value))
                {
                    this.OnCARSYNCPOSITIONIDChanging(value);
                    this.ValidateProperty("CARSYNCPOSITIONID", value);
                    this._carsyncpositionid = value;
                    this.RaisePropertyChanged("CARSYNCPOSITIONID");
                    this.OnCARSYNCPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DIRECTION”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DIRECTION
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    this.OnDIRECTIONChanging(value);
                    this.RaiseDataMemberChanging("DIRECTION");
                    this.ValidateProperty("DIRECTION", value);
                    this._direction = value;
                    this.RaiseDataMemberChanged("DIRECTION");
                    this.OnDIRECTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISHIGHQUALTITY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISHIGHQUALTITY
        {
            get
            {
                return this._ishighqualtity;
            }
            set
            {
                if ((this._ishighqualtity != value))
                {
                    this.OnISHIGHQUALTITYChanging(value);
                    this.RaiseDataMemberChanging("ISHIGHQUALTITY");
                    this.ValidateProperty("ISHIGHQUALTITY", value);
                    this._ishighqualtity = value;
                    this.RaiseDataMemberChanged("ISHIGHQUALTITY");
                    this.OnISHIGHQUALTITYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONINGTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> POSITIONINGTIME
        {
            get
            {
                return this._positioningtime;
            }
            set
            {
                if ((this._positioningtime != value))
                {
                    this.OnPOSITIONINGTIMEChanging(value);
                    this.RaiseDataMemberChanging("POSITIONINGTIME");
                    this.ValidateProperty("POSITIONINGTIME", value);
                    this._positioningtime = value;
                    this.RaiseDataMemberChanged("POSITIONINGTIME");
                    this.OnPOSITIONINGTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SPEED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SPEED
        {
            get
            {
                return this._speed;
            }
            set
            {
                if ((this._speed != value))
                {
                    this.OnSPEEDChanging(value);
                    this.RaiseDataMemberChanging("SPEED");
                    this.ValidateProperty("SPEED", value);
                    this._speed = value;
                    this.RaiseDataMemberChanged("SPEED");
                    this.OnSPEEDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSDESC”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string STATUSDESC
        {
            get
            {
                return this._statusdesc;
            }
            set
            {
                if ((this._statusdesc != value))
                {
                    this.OnSTATUSDESCChanging(value);
                    this.RaiseDataMemberChanging("STATUSDESC");
                    this.ValidateProperty("STATUSDESC", value);
                    this._statusdesc = value;
                    this.RaiseDataMemberChanged("STATUSDESC");
                    this.OnSTATUSDESCChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._carsyncpositionid;
        }
    }
    
    /// <summary>
    /// “CARTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CARTYPE : Entity
    {
        
        private decimal _cartypeid;
        
        private string _cartypename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARTYPEIDChanging(decimal value);
        partial void OnCARTYPEIDChanged();
        partial void OnCARTYPENAMEChanging(string value);
        partial void OnCARTYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CARTYPE"/> 类的新实例。
        /// </summary>
        public CARTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARTYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARTYPEID
        {
            get
            {
                return this._cartypeid;
            }
            set
            {
                if ((this._cartypeid != value))
                {
                    this.OnCARTYPEIDChanging(value);
                    this.ValidateProperty("CARTYPEID", value);
                    this._cartypeid = value;
                    this.RaisePropertyChanged("CARTYPEID");
                    this.OnCARTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CARTYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CARTYPENAME
        {
            get
            {
                return this._cartypename;
            }
            set
            {
                if ((this._cartypename != value))
                {
                    this.OnCARTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("CARTYPENAME");
                    this.ValidateProperty("CARTYPENAME", value);
                    this._cartypename = value;
                    this.RaiseDataMemberChanged("CARTYPENAME");
                    this.OnCARTYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._cartypeid;
        }
    }
    
    /// <summary>
    /// “CASEPHONESMS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CASEPHONESMS : Entity
    {
        
        private string _aiid;
        
        private string _content;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _despatcherid;
        
        private string _id;
        
        private Nullable<decimal> _sendeeid;
        
        private Nullable<decimal> _typeid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnDESPATCHERIDChanging(Nullable<decimal> value);
        partial void OnDESPATCHERIDChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnSENDEEIDChanging(Nullable<decimal> value);
        partial void OnSENDEEIDChanged();
        partial void OnTYPEIDChanging(Nullable<decimal> value);
        partial void OnTYPEIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CASEPHONESMS"/> 类的新实例。
        /// </summary>
        public CASEPHONESMS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.RaiseDataMemberChanging("AIID");
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaiseDataMemberChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DESPATCHERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DESPATCHERID
        {
            get
            {
                return this._despatcherid;
            }
            set
            {
                if ((this._despatcherid != value))
                {
                    this.OnDESPATCHERIDChanging(value);
                    this.RaiseDataMemberChanging("DESPATCHERID");
                    this.ValidateProperty("DESPATCHERID", value);
                    this._despatcherid = value;
                    this.RaiseDataMemberChanged("DESPATCHERID");
                    this.OnDESPATCHERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SENDEEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SENDEEID
        {
            get
            {
                return this._sendeeid;
            }
            set
            {
                if ((this._sendeeid != value))
                {
                    this.OnSENDEEIDChanging(value);
                    this.RaiseDataMemberChanging("SENDEEID");
                    this.ValidateProperty("SENDEEID", value);
                    this._sendeeid = value;
                    this.RaiseDataMemberChanged("SENDEEID");
                    this.OnSENDEEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("TYPEID");
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaiseDataMemberChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “CASESOURCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CASESOURCE : Entity
    {
        
        private decimal _casesourceid;
        
        private string _casesourcename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCASESOURCEIDChanging(decimal value);
        partial void OnCASESOURCEIDChanged();
        partial void OnCASESOURCENAMEChanging(string value);
        partial void OnCASESOURCENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CASESOURCE"/> 类的新实例。
        /// </summary>
        public CASESOURCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CASESOURCEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CASESOURCEID
        {
            get
            {
                return this._casesourceid;
            }
            set
            {
                if ((this._casesourceid != value))
                {
                    this.OnCASESOURCEIDChanging(value);
                    this.ValidateProperty("CASESOURCEID", value);
                    this._casesourceid = value;
                    this.RaisePropertyChanged("CASESOURCEID");
                    this.OnCASESOURCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASESOURCENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string CASESOURCENAME
        {
            get
            {
                return this._casesourcename;
            }
            set
            {
                if ((this._casesourcename != value))
                {
                    this.OnCASESOURCENAMEChanging(value);
                    this.RaiseDataMemberChanging("CASESOURCENAME");
                    this.ValidateProperty("CASESOURCENAME", value);
                    this._casesourcename = value;
                    this.RaiseDataMemberChanged("CASESOURCENAME");
                    this.OnCASESOURCENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._casesourceid;
        }
    }
    
    /// <summary>
    /// “CONSTRSITE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CONSTRSITE : Entity
    {
        
        private string _constrcompany;
        
        private string _constrcontact;
        
        private string _constrphone;
        
        private decimal _constrsiteid;
        
        private string _constrsitename;
        
        private string _geometry;
        
        private Nullable<decimal> _isdeleted;
        
        private Nullable<decimal> _issync;
        
        private Nullable<decimal> _nijiang;
        
        private string _ownercompany;
        
        private string _ownercontact;
        
        private string _ownerphone;
        
        private string _projectaddress;
        
        private string _projectlicense;
        
        private string _projectname;
        
        private string _projectscale;
        
        private EntityCollection<TRANSLICENS> _translicenses;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _zhatu;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONSTRCOMPANYChanging(string value);
        partial void OnCONSTRCOMPANYChanged();
        partial void OnCONSTRCONTACTChanging(string value);
        partial void OnCONSTRCONTACTChanged();
        partial void OnCONSTRPHONEChanging(string value);
        partial void OnCONSTRPHONEChanged();
        partial void OnCONSTRSITEIDChanging(decimal value);
        partial void OnCONSTRSITEIDChanged();
        partial void OnCONSTRSITENAMEChanging(string value);
        partial void OnCONSTRSITENAMEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnISDELETEDChanging(Nullable<decimal> value);
        partial void OnISDELETEDChanged();
        partial void OnISSYNCChanging(Nullable<decimal> value);
        partial void OnISSYNCChanged();
        partial void OnNIJIANGChanging(Nullable<decimal> value);
        partial void OnNIJIANGChanged();
        partial void OnOWNERCOMPANYChanging(string value);
        partial void OnOWNERCOMPANYChanged();
        partial void OnOWNERCONTACTChanging(string value);
        partial void OnOWNERCONTACTChanged();
        partial void OnOWNERPHONEChanging(string value);
        partial void OnOWNERPHONEChanged();
        partial void OnPROJECTADDRESSChanging(string value);
        partial void OnPROJECTADDRESSChanged();
        partial void OnPROJECTLICENSEChanging(string value);
        partial void OnPROJECTLICENSEChanged();
        partial void OnPROJECTNAMEChanging(string value);
        partial void OnPROJECTNAMEChanged();
        partial void OnPROJECTSCALEChanging(string value);
        partial void OnPROJECTSCALEChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnZHATUChanging(Nullable<decimal> value);
        partial void OnZHATUChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CONSTRSITE"/> 类的新实例。
        /// </summary>
        public CONSTRSITE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONSTRCOMPANY”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CONSTRCOMPANY
        {
            get
            {
                return this._constrcompany;
            }
            set
            {
                if ((this._constrcompany != value))
                {
                    this.OnCONSTRCOMPANYChanging(value);
                    this.RaiseDataMemberChanging("CONSTRCOMPANY");
                    this.ValidateProperty("CONSTRCOMPANY", value);
                    this._constrcompany = value;
                    this.RaiseDataMemberChanged("CONSTRCOMPANY");
                    this.OnCONSTRCOMPANYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRCONTACT”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CONSTRCONTACT
        {
            get
            {
                return this._constrcontact;
            }
            set
            {
                if ((this._constrcontact != value))
                {
                    this.OnCONSTRCONTACTChanging(value);
                    this.RaiseDataMemberChanging("CONSTRCONTACT");
                    this.ValidateProperty("CONSTRCONTACT", value);
                    this._constrcontact = value;
                    this.RaiseDataMemberChanged("CONSTRCONTACT");
                    this.OnCONSTRCONTACTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRPHONE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CONSTRPHONE
        {
            get
            {
                return this._constrphone;
            }
            set
            {
                if ((this._constrphone != value))
                {
                    this.OnCONSTRPHONEChanging(value);
                    this.RaiseDataMemberChanging("CONSTRPHONE");
                    this.ValidateProperty("CONSTRPHONE", value);
                    this._constrphone = value;
                    this.RaiseDataMemberChanged("CONSTRPHONE");
                    this.OnCONSTRPHONEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRSITEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CONSTRSITEID
        {
            get
            {
                return this._constrsiteid;
            }
            set
            {
                if ((this._constrsiteid != value))
                {
                    this.OnCONSTRSITEIDChanging(value);
                    this.ValidateProperty("CONSTRSITEID", value);
                    this._constrsiteid = value;
                    this.RaisePropertyChanged("CONSTRSITEID");
                    this.OnCONSTRSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRSITENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CONSTRSITENAME
        {
            get
            {
                return this._constrsitename;
            }
            set
            {
                if ((this._constrsitename != value))
                {
                    this.OnCONSTRSITENAMEChanging(value);
                    this.RaiseDataMemberChanging("CONSTRSITENAME");
                    this.ValidateProperty("CONSTRSITENAME", value);
                    this._constrsitename = value;
                    this.RaiseDataMemberChanged("CONSTRSITENAME");
                    this.OnCONSTRSITENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISDELETED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISDELETED
        {
            get
            {
                return this._isdeleted;
            }
            set
            {
                if ((this._isdeleted != value))
                {
                    this.OnISDELETEDChanging(value);
                    this.RaiseDataMemberChanging("ISDELETED");
                    this.ValidateProperty("ISDELETED", value);
                    this._isdeleted = value;
                    this.RaiseDataMemberChanged("ISDELETED");
                    this.OnISDELETEDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISSYNC”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISSYNC
        {
            get
            {
                return this._issync;
            }
            set
            {
                if ((this._issync != value))
                {
                    this.OnISSYNCChanging(value);
                    this.RaiseDataMemberChanging("ISSYNC");
                    this.ValidateProperty("ISSYNC", value);
                    this._issync = value;
                    this.RaiseDataMemberChanged("ISSYNC");
                    this.OnISSYNCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NIJIANG”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NIJIANG
        {
            get
            {
                return this._nijiang;
            }
            set
            {
                if ((this._nijiang != value))
                {
                    this.OnNIJIANGChanging(value);
                    this.RaiseDataMemberChanging("NIJIANG");
                    this.ValidateProperty("NIJIANG", value);
                    this._nijiang = value;
                    this.RaiseDataMemberChanged("NIJIANG");
                    this.OnNIJIANGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OWNERCOMPANY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string OWNERCOMPANY
        {
            get
            {
                return this._ownercompany;
            }
            set
            {
                if ((this._ownercompany != value))
                {
                    this.OnOWNERCOMPANYChanging(value);
                    this.RaiseDataMemberChanging("OWNERCOMPANY");
                    this.ValidateProperty("OWNERCOMPANY", value);
                    this._ownercompany = value;
                    this.RaiseDataMemberChanged("OWNERCOMPANY");
                    this.OnOWNERCOMPANYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OWNERCONTACT”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string OWNERCONTACT
        {
            get
            {
                return this._ownercontact;
            }
            set
            {
                if ((this._ownercontact != value))
                {
                    this.OnOWNERCONTACTChanging(value);
                    this.RaiseDataMemberChanging("OWNERCONTACT");
                    this.ValidateProperty("OWNERCONTACT", value);
                    this._ownercontact = value;
                    this.RaiseDataMemberChanged("OWNERCONTACT");
                    this.OnOWNERCONTACTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OWNERPHONE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string OWNERPHONE
        {
            get
            {
                return this._ownerphone;
            }
            set
            {
                if ((this._ownerphone != value))
                {
                    this.OnOWNERPHONEChanging(value);
                    this.RaiseDataMemberChanging("OWNERPHONE");
                    this.ValidateProperty("OWNERPHONE", value);
                    this._ownerphone = value;
                    this.RaiseDataMemberChanged("OWNERPHONE");
                    this.OnOWNERPHONEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string PROJECTADDRESS
        {
            get
            {
                return this._projectaddress;
            }
            set
            {
                if ((this._projectaddress != value))
                {
                    this.OnPROJECTADDRESSChanging(value);
                    this.RaiseDataMemberChanging("PROJECTADDRESS");
                    this.ValidateProperty("PROJECTADDRESS", value);
                    this._projectaddress = value;
                    this.RaiseDataMemberChanged("PROJECTADDRESS");
                    this.OnPROJECTADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTLICENSE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string PROJECTLICENSE
        {
            get
            {
                return this._projectlicense;
            }
            set
            {
                if ((this._projectlicense != value))
                {
                    this.OnPROJECTLICENSEChanging(value);
                    this.RaiseDataMemberChanging("PROJECTLICENSE");
                    this.ValidateProperty("PROJECTLICENSE", value);
                    this._projectlicense = value;
                    this.RaiseDataMemberChanged("PROJECTLICENSE");
                    this.OnPROJECTLICENSEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string PROJECTNAME
        {
            get
            {
                return this._projectname;
            }
            set
            {
                if ((this._projectname != value))
                {
                    this.OnPROJECTNAMEChanging(value);
                    this.RaiseDataMemberChanging("PROJECTNAME");
                    this.ValidateProperty("PROJECTNAME", value);
                    this._projectname = value;
                    this.RaiseDataMemberChanged("PROJECTNAME");
                    this.OnPROJECTNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTSCALE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string PROJECTSCALE
        {
            get
            {
                return this._projectscale;
            }
            set
            {
                if ((this._projectscale != value))
                {
                    this.OnPROJECTSCALEChanging(value);
                    this.RaiseDataMemberChanging("PROJECTSCALE");
                    this.ValidateProperty("PROJECTSCALE", value);
                    this._projectscale = value;
                    this.RaiseDataMemberChanged("PROJECTSCALE");
                    this.OnPROJECTSCALEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENS"/> 实体实例的集合。
        /// </summary>
        [Association("CONSTRSITE_TRANSLICENS", "CONSTRSITEID", "CONSTRSITEID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENS> TRANSLICENSES
        {
            get
            {
                if ((this._translicenses == null))
                {
                    this._translicenses = new EntityCollection<TRANSLICENS>(this, "TRANSLICENSES", this.FilterTRANSLICENSES, this.AttachTRANSLICENSES, this.DetachTRANSLICENSES);
                }
                return this._translicenses;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_CONSTRSITE", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.CONSTRSITES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.CONSTRSITES.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZHATU”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ZHATU
        {
            get
            {
                return this._zhatu;
            }
            set
            {
                if ((this._zhatu != value))
                {
                    this.OnZHATUChanging(value);
                    this.RaiseDataMemberChanging("ZHATU");
                    this.ValidateProperty("ZHATU", value);
                    this._zhatu = value;
                    this.RaiseDataMemberChanged("ZHATU");
                    this.OnZHATUChanged();
                }
            }
        }
        
        private void AttachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.CONSTRSITE = this;
        }
        
        private void DetachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.CONSTRSITE = null;
        }
        
        private bool FilterTRANSLICENSES(TRANSLICENS entity)
        {
            return (entity.CONSTRSITEID == this.CONSTRSITEID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._constrsiteid;
        }
    }
    
    /// <summary>
    /// “CONTACT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CONTACT : Entity
    {
        
        private string _address;
        
        private Nullable<decimal> _contactgroupid;
        
        private decimal _contactid;
        
        private string _contactname;
        
        private EntityRef<CONTACTSGROUP> _contactsgroup;
        
        private string _gdnumbers;
        
        private string _phonenumber;
        
        private string _remark;
        
        private string _workdw;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnCONTACTGROUPIDChanging(Nullable<decimal> value);
        partial void OnCONTACTGROUPIDChanged();
        partial void OnCONTACTIDChanging(decimal value);
        partial void OnCONTACTIDChanged();
        partial void OnCONTACTNAMEChanging(string value);
        partial void OnCONTACTNAMEChanged();
        partial void OnGDNUMBERSChanging(string value);
        partial void OnGDNUMBERSChanged();
        partial void OnPHONENUMBERChanging(string value);
        partial void OnPHONENUMBERChanged();
        partial void OnREMARKChanging(string value);
        partial void OnREMARKChanged();
        partial void OnWORKDWChanging(string value);
        partial void OnWORKDWChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CONTACT"/> 类的新实例。
        /// </summary>
        public CONTACT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ADDRESS
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnADDRESSChanging(value);
                    this.RaiseDataMemberChanging("ADDRESS");
                    this.ValidateProperty("ADDRESS", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACTGROUPID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CONTACTGROUPID
        {
            get
            {
                return this._contactgroupid;
            }
            set
            {
                if ((this._contactgroupid != value))
                {
                    this.OnCONTACTGROUPIDChanging(value);
                    this.RaiseDataMemberChanging("CONTACTGROUPID");
                    this.ValidateProperty("CONTACTGROUPID", value);
                    this._contactgroupid = value;
                    this.RaiseDataMemberChanged("CONTACTGROUPID");
                    this.OnCONTACTGROUPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACTID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CONTACTID
        {
            get
            {
                return this._contactid;
            }
            set
            {
                if ((this._contactid != value))
                {
                    this.OnCONTACTIDChanging(value);
                    this.ValidateProperty("CONTACTID", value);
                    this._contactid = value;
                    this.RaisePropertyChanged("CONTACTID");
                    this.OnCONTACTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACTNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string CONTACTNAME
        {
            get
            {
                return this._contactname;
            }
            set
            {
                if ((this._contactname != value))
                {
                    this.OnCONTACTNAMEChanging(value);
                    this.RaiseDataMemberChanging("CONTACTNAME");
                    this.ValidateProperty("CONTACTNAME", value);
                    this._contactname = value;
                    this.RaiseDataMemberChanged("CONTACTNAME");
                    this.OnCONTACTNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="CONTACTSGROUP"/> 实体。
        /// </summary>
        [Association("CONTACTSGROUP_CONTACT", "CONTACTGROUPID", "CONTACTSGROUPID", IsForeignKey=true)]
        [XmlIgnore()]
        public CONTACTSGROUP CONTACTSGROUP
        {
            get
            {
                if ((this._contactsgroup == null))
                {
                    this._contactsgroup = new EntityRef<CONTACTSGROUP>(this, "CONTACTSGROUP", this.FilterCONTACTSGROUP);
                }
                return this._contactsgroup.Entity;
            }
            set
            {
                CONTACTSGROUP previous = this.CONTACTSGROUP;
                if ((previous != value))
                {
                    this.ValidateProperty("CONTACTSGROUP", value);
                    if ((previous != null))
                    {
                        this._contactsgroup.Entity = null;
                        previous.CONTACTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CONTACTGROUPID = value.CONTACTSGROUPID;
                    }
                    else
                    {
                        this.CONTACTGROUPID = default(Nullable<decimal>);
                    }
                    this._contactsgroup.Entity = value;
                    if ((value != null))
                    {
                        value.CONTACTS.Add(this);
                    }
                    this.RaisePropertyChanged("CONTACTSGROUP");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GDNUMBERS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string GDNUMBERS
        {
            get
            {
                return this._gdnumbers;
            }
            set
            {
                if ((this._gdnumbers != value))
                {
                    this.OnGDNUMBERSChanging(value);
                    this.RaiseDataMemberChanging("GDNUMBERS");
                    this.ValidateProperty("GDNUMBERS", value);
                    this._gdnumbers = value;
                    this.RaiseDataMemberChanged("GDNUMBERS");
                    this.OnGDNUMBERSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONENUMBER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PHONENUMBER
        {
            get
            {
                return this._phonenumber;
            }
            set
            {
                if ((this._phonenumber != value))
                {
                    this.OnPHONENUMBERChanging(value);
                    this.RaiseDataMemberChanging("PHONENUMBER");
                    this.ValidateProperty("PHONENUMBER", value);
                    this._phonenumber = value;
                    this.RaiseDataMemberChanged("PHONENUMBER");
                    this.OnPHONENUMBERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REMARK”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string REMARK
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnREMARKChanging(value);
                    this.RaiseDataMemberChanging("REMARK");
                    this.ValidateProperty("REMARK", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("REMARK");
                    this.OnREMARKChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WORKDW”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string WORKDW
        {
            get
            {
                return this._workdw;
            }
            set
            {
                if ((this._workdw != value))
                {
                    this.OnWORKDWChanging(value);
                    this.RaiseDataMemberChanging("WORKDW");
                    this.ValidateProperty("WORKDW", value);
                    this._workdw = value;
                    this.RaiseDataMemberChanged("WORKDW");
                    this.OnWORKDWChanged();
                }
            }
        }
        
        private bool FilterCONTACTSGROUP(CONTACTSGROUP entity)
        {
            return (entity.CONTACTSGROUPID == this.CONTACTGROUPID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._contactid;
        }
    }
    
    /// <summary>
    /// “CONTACTSGROUP”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class CONTACTSGROUP : Entity
    {
        
        private EntityCollection<CONTACT> _contacts;
        
        private decimal _contactsgroupid;
        
        private string _contactsgroupname;
        
        private Nullable<decimal> _createduserid;
        
        private Nullable<decimal> _seqno;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTACTSGROUPIDChanging(decimal value);
        partial void OnCONTACTSGROUPIDChanged();
        partial void OnCONTACTSGROUPNAMEChanging(string value);
        partial void OnCONTACTSGROUPNAMEChanged();
        partial void OnCREATEDUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEDUSERIDChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="CONTACTSGROUP"/> 类的新实例。
        /// </summary>
        public CONTACTSGROUP()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="CONTACT"/> 实体实例的集合。
        /// </summary>
        [Association("CONTACTSGROUP_CONTACT", "CONTACTSGROUPID", "CONTACTGROUPID")]
        [XmlIgnore()]
        public EntityCollection<CONTACT> CONTACTS
        {
            get
            {
                if ((this._contacts == null))
                {
                    this._contacts = new EntityCollection<CONTACT>(this, "CONTACTS", this.FilterCONTACTS, this.AttachCONTACTS, this.DetachCONTACTS);
                }
                return this._contacts;
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACTSGROUPID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CONTACTSGROUPID
        {
            get
            {
                return this._contactsgroupid;
            }
            set
            {
                if ((this._contactsgroupid != value))
                {
                    this.OnCONTACTSGROUPIDChanging(value);
                    this.ValidateProperty("CONTACTSGROUPID", value);
                    this._contactsgroupid = value;
                    this.RaisePropertyChanged("CONTACTSGROUPID");
                    this.OnCONTACTSGROUPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACTSGROUPNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string CONTACTSGROUPNAME
        {
            get
            {
                return this._contactsgroupname;
            }
            set
            {
                if ((this._contactsgroupname != value))
                {
                    this.OnCONTACTSGROUPNAMEChanging(value);
                    this.RaiseDataMemberChanging("CONTACTSGROUPNAME");
                    this.ValidateProperty("CONTACTSGROUPNAME", value);
                    this._contactsgroupname = value;
                    this.RaiseDataMemberChanged("CONTACTSGROUPNAME");
                    this.OnCONTACTSGROUPNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEDUSERID
        {
            get
            {
                return this._createduserid;
            }
            set
            {
                if ((this._createduserid != value))
                {
                    this.OnCREATEDUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEDUSERID");
                    this.ValidateProperty("CREATEDUSERID", value);
                    this._createduserid = value;
                    this.RaiseDataMemberChanged("CREATEDUSERID");
                    this.OnCREATEDUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        private void AttachCONTACTS(CONTACT entity)
        {
            entity.CONTACTSGROUP = this;
        }
        
        private void DetachCONTACTS(CONTACT entity)
        {
            entity.CONTACTSGROUP = null;
        }
        
        private bool FilterCONTACTS(CONTACT entity)
        {
            return (entity.CONTACTGROUPID == this.CONTACTSGROUPID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._contactsgroupid;
        }
    }
    
    /// <summary>
    /// “DOCDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class DOCDEFINITION : Entity
    {
        
        private decimal _ddid;
        
        private string _ddname;
        
        private EntityCollection<DOCDEFINITIONRELATION> _docdefinitionrelations;
        
        private EntityCollection<DOCINSTANCE> _docinstances;
        
        private Nullable<decimal> _isautobuild;
        
        private Nullable<decimal> _isrequired;
        
        private Nullable<decimal> _isunique;
        
        private Nullable<decimal> _relevant;
        
        private Nullable<decimal> _seqno;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDDIDChanging(decimal value);
        partial void OnDDIDChanged();
        partial void OnDDNAMEChanging(string value);
        partial void OnDDNAMEChanged();
        partial void OnISAUTOBUILDChanging(Nullable<decimal> value);
        partial void OnISAUTOBUILDChanged();
        partial void OnISREQUIREDChanging(Nullable<decimal> value);
        partial void OnISREQUIREDChanged();
        partial void OnISUNIQUEChanging(Nullable<decimal> value);
        partial void OnISUNIQUEChanged();
        partial void OnRELEVANTChanging(Nullable<decimal> value);
        partial void OnRELEVANTChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DOCDEFINITION"/> 类的新实例。
        /// </summary>
        public DOCDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal DDID
        {
            get
            {
                return this._ddid;
            }
            set
            {
                if ((this._ddid != value))
                {
                    this.OnDDIDChanging(value);
                    this.ValidateProperty("DDID", value);
                    this._ddid = value;
                    this.RaisePropertyChanged("DDID");
                    this.OnDDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string DDNAME
        {
            get
            {
                return this._ddname;
            }
            set
            {
                if ((this._ddname != value))
                {
                    this.OnDDNAMEChanging(value);
                    this.RaiseDataMemberChanging("DDNAME");
                    this.ValidateProperty("DDNAME", value);
                    this._ddname = value;
                    this.RaiseDataMemberChanged("DDNAME");
                    this.OnDDNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DOCDEFINITIONRELATION"/> 实体实例的集合。
        /// </summary>
        [Association("DOCDEFINITION_DOCDEFINITIONRELATION", "DDID", "DDID")]
        [XmlIgnore()]
        public EntityCollection<DOCDEFINITIONRELATION> DOCDEFINITIONRELATIONS
        {
            get
            {
                if ((this._docdefinitionrelations == null))
                {
                    this._docdefinitionrelations = new EntityCollection<DOCDEFINITIONRELATION>(this, "DOCDEFINITIONRELATIONS", this.FilterDOCDEFINITIONRELATIONS, this.AttachDOCDEFINITIONRELATIONS, this.DetachDOCDEFINITIONRELATIONS);
                }
                return this._docdefinitionrelations;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DOCINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("DOCDEFINITION_DOCINSTANCE", "DDID", "DDID")]
        [XmlIgnore()]
        public EntityCollection<DOCINSTANCE> DOCINSTANCES
        {
            get
            {
                if ((this._docinstances == null))
                {
                    this._docinstances = new EntityCollection<DOCINSTANCE>(this, "DOCINSTANCES", this.FilterDOCINSTANCES, this.AttachDOCINSTANCES, this.DetachDOCINSTANCES);
                }
                return this._docinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“ISAUTOBUILD”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISAUTOBUILD
        {
            get
            {
                return this._isautobuild;
            }
            set
            {
                if ((this._isautobuild != value))
                {
                    this.OnISAUTOBUILDChanging(value);
                    this.RaiseDataMemberChanging("ISAUTOBUILD");
                    this.ValidateProperty("ISAUTOBUILD", value);
                    this._isautobuild = value;
                    this.RaiseDataMemberChanged("ISAUTOBUILD");
                    this.OnISAUTOBUILDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISREQUIRED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISREQUIRED
        {
            get
            {
                return this._isrequired;
            }
            set
            {
                if ((this._isrequired != value))
                {
                    this.OnISREQUIREDChanging(value);
                    this.RaiseDataMemberChanging("ISREQUIRED");
                    this.ValidateProperty("ISREQUIRED", value);
                    this._isrequired = value;
                    this.RaiseDataMemberChanged("ISREQUIRED");
                    this.OnISREQUIREDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISUNIQUE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISUNIQUE
        {
            get
            {
                return this._isunique;
            }
            set
            {
                if ((this._isunique != value))
                {
                    this.OnISUNIQUEChanging(value);
                    this.RaiseDataMemberChanging("ISUNIQUE");
                    this.ValidateProperty("ISUNIQUE", value);
                    this._isunique = value;
                    this.RaiseDataMemberChanged("ISUNIQUE");
                    this.OnISUNIQUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RELEVANT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> RELEVANT
        {
            get
            {
                return this._relevant;
            }
            set
            {
                if ((this._relevant != value))
                {
                    this.OnRELEVANTChanging(value);
                    this.RaiseDataMemberChanging("RELEVANT");
                    this.ValidateProperty("RELEVANT", value);
                    this._relevant = value;
                    this.RaiseDataMemberChanged("RELEVANT");
                    this.OnRELEVANTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        private void AttachDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            entity.DOCDEFINITION = this;
        }
        
        private void DetachDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            entity.DOCDEFINITION = null;
        }
        
        private bool FilterDOCDEFINITIONRELATIONS(DOCDEFINITIONRELATION entity)
        {
            return (entity.DDID == this.DDID);
        }
        
        private void AttachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.DOCDEFINITION = this;
        }
        
        private void DetachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.DOCDEFINITION = null;
        }
        
        private bool FilterDOCINSTANCES(DOCINSTANCE entity)
        {
            return (entity.DDID == this.DDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._ddid;
        }
    }
    
    /// <summary>
    /// “DOCDEFINITIONRELATION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class DOCDEFINITIONRELATION : Entity
    {
        
        private EntityRef<ACITIVITYDEFINITION> _acitivitydefinition;
        
        private decimal _adid;
        
        private decimal _ddid;
        
        private EntityRef<DOCDEFINITION> _docdefinition;
        
        private Nullable<decimal> _isrequired;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnDDIDChanging(decimal value);
        partial void OnDDIDChanged();
        partial void OnISREQUIREDChanging(Nullable<decimal> value);
        partial void OnISREQUIREDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DOCDEFINITIONRELATION"/> 类的新实例。
        /// </summary>
        public DOCDEFINITIONRELATION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACITIVITYDEFINITION"/> 实体。
        /// </summary>
        [Association("ACITIVITYDEFINITION_DOCDEFINITIONRELATION", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACITIVITYDEFINITION ACITIVITYDEFINITION
        {
            get
            {
                if ((this._acitivitydefinition == null))
                {
                    this._acitivitydefinition = new EntityRef<ACITIVITYDEFINITION>(this, "ACITIVITYDEFINITION", this.FilterACITIVITYDEFINITION);
                }
                return this._acitivitydefinition.Entity;
            }
            set
            {
                ACITIVITYDEFINITION previous = this.ACITIVITYDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ACITIVITYDEFINITION", value);
                    if ((previous != null))
                    {
                        this._acitivitydefinition.Entity = null;
                        previous.DOCDEFINITIONRELATIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(decimal);
                    }
                    this._acitivitydefinition.Entity = value;
                    if ((value != null))
                    {
                        value.DOCDEFINITIONRELATIONS.Add(this);
                    }
                    this.RaisePropertyChanged("ACITIVITYDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DDID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal DDID
        {
            get
            {
                return this._ddid;
            }
            set
            {
                if ((this._ddid != value))
                {
                    this.OnDDIDChanging(value);
                    this.RaiseDataMemberChanging("DDID");
                    this.ValidateProperty("DDID", value);
                    this._ddid = value;
                    this.RaiseDataMemberChanged("DDID");
                    this.OnDDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="DOCDEFINITION"/> 实体。
        /// </summary>
        [Association("DOCDEFINITION_DOCDEFINITIONRELATION", "DDID", "DDID", IsForeignKey=true)]
        [XmlIgnore()]
        public DOCDEFINITION DOCDEFINITION
        {
            get
            {
                if ((this._docdefinition == null))
                {
                    this._docdefinition = new EntityRef<DOCDEFINITION>(this, "DOCDEFINITION", this.FilterDOCDEFINITION);
                }
                return this._docdefinition.Entity;
            }
            set
            {
                DOCDEFINITION previous = this.DOCDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("DOCDEFINITION", value);
                    if ((previous != null))
                    {
                        this._docdefinition.Entity = null;
                        previous.DOCDEFINITIONRELATIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DDID = value.DDID;
                    }
                    else
                    {
                        this.DDID = default(decimal);
                    }
                    this._docdefinition.Entity = value;
                    if ((value != null))
                    {
                        value.DOCDEFINITIONRELATIONS.Add(this);
                    }
                    this.RaisePropertyChanged("DOCDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISREQUIRED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISREQUIRED
        {
            get
            {
                return this._isrequired;
            }
            set
            {
                if ((this._isrequired != value))
                {
                    this.OnISREQUIREDChanging(value);
                    this.RaiseDataMemberChanging("ISREQUIRED");
                    this.ValidateProperty("ISREQUIRED", value);
                    this._isrequired = value;
                    this.RaiseDataMemberChanged("ISREQUIRED");
                    this.OnISREQUIREDChanged();
                }
            }
        }
        
        private bool FilterACITIVITYDEFINITION(ACITIVITYDEFINITION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterDOCDEFINITION(DOCDEFINITION entity)
        {
            return (entity.DDID == this.DDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._adid, this._ddid);
        }
    }
    
    /// <summary>
    /// “DOCINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class DOCINSTANCE : Entity
    {
        
        private EntityRef<ACTIVITYINSTANCE> _activityinstance;
        
        private string _aiid;
        
        private string _assemblyname;
        
        private Nullable<DateTime> _createdtime;
        
        private Nullable<decimal> _ddid;
        
        private string _docbh;
        
        private EntityRef<DOCDEFINITION> _docdefinition;
        
        private string _docinstanceid;
        
        private string _docname;
        
        private string _docpath;
        
        private Nullable<decimal> _doctypeid;
        
        private Nullable<decimal> _dpid;
        
        private string _typename;
        
        private string _value;
        
        private string _wiid;
        
        private EntityRef<WORKFLOWINSTANCE> _workflowinstance;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnASSEMBLYNAMEChanging(string value);
        partial void OnASSEMBLYNAMEChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnDDIDChanging(Nullable<decimal> value);
        partial void OnDDIDChanged();
        partial void OnDOCBHChanging(string value);
        partial void OnDOCBHChanged();
        partial void OnDOCINSTANCEIDChanging(string value);
        partial void OnDOCINSTANCEIDChanged();
        partial void OnDOCNAMEChanging(string value);
        partial void OnDOCNAMEChanged();
        partial void OnDOCPATHChanging(string value);
        partial void OnDOCPATHChanged();
        partial void OnDOCTYPEIDChanging(Nullable<decimal> value);
        partial void OnDOCTYPEIDChanged();
        partial void OnDPIDChanging(Nullable<decimal> value);
        partial void OnDPIDChanged();
        partial void OnTYPENAMEChanging(string value);
        partial void OnTYPENAMEChanged();
        partial void OnVALUEChanging(string value);
        partial void OnVALUEChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DOCINSTANCE"/> 类的新实例。
        /// </summary>
        public DOCINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ACTIVITYINSTANCE"/> 实体。
        /// </summary>
        [Association("ACTIVITYINSTANCE_DOCINSTANCE", "AIID", "AIID", IsForeignKey=true)]
        [XmlIgnore()]
        public ACTIVITYINSTANCE ACTIVITYINSTANCE
        {
            get
            {
                if ((this._activityinstance == null))
                {
                    this._activityinstance = new EntityRef<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCE", this.FilterACTIVITYINSTANCE);
                }
                return this._activityinstance.Entity;
            }
            set
            {
                ACTIVITYINSTANCE previous = this.ACTIVITYINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("ACTIVITYINSTANCE", value);
                    if ((previous != null))
                    {
                        this._activityinstance.Entity = null;
                        previous.DOCINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AIID = value.AIID;
                    }
                    else
                    {
                        this.AIID = default(string);
                    }
                    this._activityinstance.Entity = value;
                    if ((value != null))
                    {
                        value.DOCINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("ACTIVITYINSTANCE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.RaiseDataMemberChanging("AIID");
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaiseDataMemberChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ASSEMBLYNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ASSEMBLYNAME
        {
            get
            {
                return this._assemblyname;
            }
            set
            {
                if ((this._assemblyname != value))
                {
                    this.OnASSEMBLYNAMEChanging(value);
                    this.RaiseDataMemberChanging("ASSEMBLYNAME");
                    this.ValidateProperty("ASSEMBLYNAME", value);
                    this._assemblyname = value;
                    this.RaiseDataMemberChanged("ASSEMBLYNAME");
                    this.OnASSEMBLYNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> DDID
        {
            get
            {
                return this._ddid;
            }
            set
            {
                if ((this._ddid != value))
                {
                    this.OnDDIDChanging(value);
                    this.RaiseDataMemberChanging("DDID");
                    this.ValidateProperty("DDID", value);
                    this._ddid = value;
                    this.RaiseDataMemberChanged("DDID");
                    this.OnDDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DOCBH
        {
            get
            {
                return this._docbh;
            }
            set
            {
                if ((this._docbh != value))
                {
                    this.OnDOCBHChanging(value);
                    this.RaiseDataMemberChanging("DOCBH");
                    this.ValidateProperty("DOCBH", value);
                    this._docbh = value;
                    this.RaiseDataMemberChanged("DOCBH");
                    this.OnDOCBHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="DOCDEFINITION"/> 实体。
        /// </summary>
        [Association("DOCDEFINITION_DOCINSTANCE", "DDID", "DDID", IsForeignKey=true)]
        [XmlIgnore()]
        public DOCDEFINITION DOCDEFINITION
        {
            get
            {
                if ((this._docdefinition == null))
                {
                    this._docdefinition = new EntityRef<DOCDEFINITION>(this, "DOCDEFINITION", this.FilterDOCDEFINITION);
                }
                return this._docdefinition.Entity;
            }
            set
            {
                DOCDEFINITION previous = this.DOCDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("DOCDEFINITION", value);
                    if ((previous != null))
                    {
                        this._docdefinition.Entity = null;
                        previous.DOCINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DDID = value.DDID;
                    }
                    else
                    {
                        this.DDID = default(Nullable<decimal>);
                    }
                    this._docdefinition.Entity = value;
                    if ((value != null))
                    {
                        value.DOCINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("DOCDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCINSTANCEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string DOCINSTANCEID
        {
            get
            {
                return this._docinstanceid;
            }
            set
            {
                if ((this._docinstanceid != value))
                {
                    this.OnDOCINSTANCEIDChanging(value);
                    this.ValidateProperty("DOCINSTANCEID", value);
                    this._docinstanceid = value;
                    this.RaisePropertyChanged("DOCINSTANCEID");
                    this.OnDOCINSTANCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DOCNAME
        {
            get
            {
                return this._docname;
            }
            set
            {
                if ((this._docname != value))
                {
                    this.OnDOCNAMEChanging(value);
                    this.RaiseDataMemberChanging("DOCNAME");
                    this.ValidateProperty("DOCNAME", value);
                    this._docname = value;
                    this.RaiseDataMemberChanged("DOCNAME");
                    this.OnDOCNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCPATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DOCPATH
        {
            get
            {
                return this._docpath;
            }
            set
            {
                if ((this._docpath != value))
                {
                    this.OnDOCPATHChanging(value);
                    this.RaiseDataMemberChanging("DOCPATH");
                    this.ValidateProperty("DOCPATH", value);
                    this._docpath = value;
                    this.RaiseDataMemberChanged("DOCPATH");
                    this.OnDOCPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCTYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DOCTYPEID
        {
            get
            {
                return this._doctypeid;
            }
            set
            {
                if ((this._doctypeid != value))
                {
                    this.OnDOCTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("DOCTYPEID");
                    this.ValidateProperty("DOCTYPEID", value);
                    this._doctypeid = value;
                    this.RaiseDataMemberChanged("DOCTYPEID");
                    this.OnDOCTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DPID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DPID
        {
            get
            {
                return this._dpid;
            }
            set
            {
                if ((this._dpid != value))
                {
                    this.OnDPIDChanging(value);
                    this.RaiseDataMemberChanging("DPID");
                    this.ValidateProperty("DPID", value);
                    this._dpid = value;
                    this.RaiseDataMemberChanged("DPID");
                    this.OnDPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string TYPENAME
        {
            get
            {
                return this._typename;
            }
            set
            {
                if ((this._typename != value))
                {
                    this.OnTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("TYPENAME");
                    this.ValidateProperty("TYPENAME", value);
                    this._typename = value;
                    this.RaiseDataMemberChanged("TYPENAME");
                    this.OnTYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VALUE”值。
        /// </summary>
        [DataMember()]
        public string VALUE
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnVALUEChanging(value);
                    this.RaiseDataMemberChanging("VALUE");
                    this.ValidateProperty("VALUE", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("VALUE");
                    this.OnVALUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("WORKFLOWINSTANCE_DOCINSTANCE", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWINSTANCE WORKFLOWINSTANCE
        {
            get
            {
                if ((this._workflowinstance == null))
                {
                    this._workflowinstance = new EntityRef<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCE", this.FilterWORKFLOWINSTANCE);
                }
                return this._workflowinstance.Entity;
            }
            set
            {
                WORKFLOWINSTANCE previous = this.WORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._workflowinstance.Entity = null;
                        previous.DOCINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._workflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.DOCINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWINSTANCE");
                }
            }
        }
        
        private bool FilterACTIVITYINSTANCE(ACTIVITYINSTANCE entity)
        {
            return (entity.AIID == this.AIID);
        }
        
        private bool FilterDOCDEFINITION(DOCDEFINITION entity)
        {
            return (entity.DDID == this.DDID);
        }
        
        private bool FilterWORKFLOWINSTANCE(WORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._docinstanceid;
        }
    }
    
    /// <summary>
    /// “DOCPHAS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class DOCPHAS : Entity
    {
        
        private decimal _docphaseid;
        
        private string _docphasename;
        
        private Nullable<decimal> _seqno;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDOCPHASEIDChanging(decimal value);
        partial void OnDOCPHASEIDChanged();
        partial void OnDOCPHASENAMEChanging(string value);
        partial void OnDOCPHASENAMEChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DOCPHAS"/> 类的新实例。
        /// </summary>
        public DOCPHAS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DOCPHASEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal DOCPHASEID
        {
            get
            {
                return this._docphaseid;
            }
            set
            {
                if ((this._docphaseid != value))
                {
                    this.OnDOCPHASEIDChanging(value);
                    this.ValidateProperty("DOCPHASEID", value);
                    this._docphaseid = value;
                    this.RaisePropertyChanged("DOCPHASEID");
                    this.OnDOCPHASEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCPHASENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string DOCPHASENAME
        {
            get
            {
                return this._docphasename;
            }
            set
            {
                if ((this._docphasename != value))
                {
                    this.OnDOCPHASENAMEChanging(value);
                    this.RaiseDataMemberChanging("DOCPHASENAME");
                    this.ValidateProperty("DOCPHASENAME", value);
                    this._docphasename = value;
                    this.RaiseDataMemberChanged("DOCPHASENAME");
                    this.OnDOCPHASENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._docphaseid;
        }
    }
    
    /// <summary>
    /// “DUMPINGSITE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class DUMPINGSITE : Entity
    {
        
        private string _address;
        
        private Nullable<DateTime> _applieddate;
        
        private string _contact;
        
        private decimal _dumpingsiteid;
        
        private string _dumpingsitename;
        
        private string _geometry;
        
        private Nullable<decimal> _isdeleted;
        
        private Nullable<decimal> _issync;
        
        private string _owner;
        
        private string _phone;
        
        private EntityCollection<TRANSLICENS> _translicenses;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnAPPLIEDDATEChanging(Nullable<DateTime> value);
        partial void OnAPPLIEDDATEChanged();
        partial void OnCONTACTChanging(string value);
        partial void OnCONTACTChanged();
        partial void OnDUMPINGSITEIDChanging(decimal value);
        partial void OnDUMPINGSITEIDChanged();
        partial void OnDUMPINGSITENAMEChanging(string value);
        partial void OnDUMPINGSITENAMEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnISDELETEDChanging(Nullable<decimal> value);
        partial void OnISDELETEDChanged();
        partial void OnISSYNCChanging(Nullable<decimal> value);
        partial void OnISSYNCChanged();
        partial void OnOWNERChanging(string value);
        partial void OnOWNERChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DUMPINGSITE"/> 类的新实例。
        /// </summary>
        public DUMPINGSITE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string ADDRESS
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnADDRESSChanging(value);
                    this.RaiseDataMemberChanging("ADDRESS");
                    this.ValidateProperty("ADDRESS", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APPLIEDDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> APPLIEDDATE
        {
            get
            {
                return this._applieddate;
            }
            set
            {
                if ((this._applieddate != value))
                {
                    this.OnAPPLIEDDATEChanging(value);
                    this.RaiseDataMemberChanging("APPLIEDDATE");
                    this.ValidateProperty("APPLIEDDATE", value);
                    this._applieddate = value;
                    this.RaiseDataMemberChanged("APPLIEDDATE");
                    this.OnAPPLIEDDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTACT”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CONTACT
        {
            get
            {
                return this._contact;
            }
            set
            {
                if ((this._contact != value))
                {
                    this.OnCONTACTChanging(value);
                    this.RaiseDataMemberChanging("CONTACT");
                    this.ValidateProperty("CONTACT", value);
                    this._contact = value;
                    this.RaiseDataMemberChanged("CONTACT");
                    this.OnCONTACTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DUMPINGSITEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal DUMPINGSITEID
        {
            get
            {
                return this._dumpingsiteid;
            }
            set
            {
                if ((this._dumpingsiteid != value))
                {
                    this.OnDUMPINGSITEIDChanging(value);
                    this.ValidateProperty("DUMPINGSITEID", value);
                    this._dumpingsiteid = value;
                    this.RaisePropertyChanged("DUMPINGSITEID");
                    this.OnDUMPINGSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DUMPINGSITENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DUMPINGSITENAME
        {
            get
            {
                return this._dumpingsitename;
            }
            set
            {
                if ((this._dumpingsitename != value))
                {
                    this.OnDUMPINGSITENAMEChanging(value);
                    this.RaiseDataMemberChanging("DUMPINGSITENAME");
                    this.ValidateProperty("DUMPINGSITENAME", value);
                    this._dumpingsitename = value;
                    this.RaiseDataMemberChanged("DUMPINGSITENAME");
                    this.OnDUMPINGSITENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISDELETED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISDELETED
        {
            get
            {
                return this._isdeleted;
            }
            set
            {
                if ((this._isdeleted != value))
                {
                    this.OnISDELETEDChanging(value);
                    this.RaiseDataMemberChanging("ISDELETED");
                    this.ValidateProperty("ISDELETED", value);
                    this._isdeleted = value;
                    this.RaiseDataMemberChanged("ISDELETED");
                    this.OnISDELETEDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISSYNC”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISSYNC
        {
            get
            {
                return this._issync;
            }
            set
            {
                if ((this._issync != value))
                {
                    this.OnISSYNCChanging(value);
                    this.RaiseDataMemberChanging("ISSYNC");
                    this.ValidateProperty("ISSYNC", value);
                    this._issync = value;
                    this.RaiseDataMemberChanged("ISSYNC");
                    this.OnISSYNCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OWNER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string OWNER
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOWNERChanging(value);
                    this.RaiseDataMemberChanging("OWNER");
                    this.ValidateProperty("OWNER", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("OWNER");
                    this.OnOWNERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PHONE
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPHONEChanging(value);
                    this.RaiseDataMemberChanging("PHONE");
                    this.ValidateProperty("PHONE", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENS"/> 实体实例的集合。
        /// </summary>
        [Association("DUMPINGSITE_TRANSLICENS", "DUMPINGSITEID", "DUMPINGSITEID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENS> TRANSLICENSES
        {
            get
            {
                if ((this._translicenses == null))
                {
                    this._translicenses = new EntityCollection<TRANSLICENS>(this, "TRANSLICENSES", this.FilterTRANSLICENSES, this.AttachTRANSLICENSES, this.DetachTRANSLICENSES);
                }
                return this._translicenses;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_DUMPINGSITE", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.DUMPINGSITES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.DUMPINGSITES.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        private void AttachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.DUMPINGSITE = this;
        }
        
        private void DetachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.DUMPINGSITE = null;
        }
        
        private bool FilterTRANSLICENSES(TRANSLICENS entity)
        {
            return (entity.DUMPINGSITEID == this.DUMPINGSITEID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._dumpingsiteid;
        }
    }
    
    /// <summary>
    /// “FUNCTION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class FUNCTION : Entity
    {
        
        private string _code;
        
        private EntityRef<FUNCTION> _function1;
        
        private decimal _functionid;
        
        private EntityCollection<FUNCTION> _functions1;
        
        private string _iconpath;
        
        private string _name;
        
        private Nullable<decimal> _parentid;
        
        private string _path;
        
        private EntityCollection<ROLEFUNCTION> _rolefunctions;
        
        private Nullable<decimal> _seqno;
        
        private Nullable<decimal> _statusid;
        
        private string _url;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCODEChanging(string value);
        partial void OnCODEChanged();
        partial void OnFUNCTIONIDChanging(decimal value);
        partial void OnFUNCTIONIDChanged();
        partial void OnICONPATHChanging(string value);
        partial void OnICONPATHChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnURLChanging(string value);
        partial void OnURLChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="FUNCTION"/> 类的新实例。
        /// </summary>
        public FUNCTION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string CODE
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCODEChanging(value);
                    this.RaiseDataMemberChanging("CODE");
                    this.ValidateProperty("CODE", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("CODE");
                    this.OnCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="FUNCTION"/> 实体。
        /// </summary>
        [Association("FUNCTION_FUNCTION", "PARENTID", "FUNCTIONID", IsForeignKey=true)]
        [XmlIgnore()]
        public FUNCTION FUNCTION1
        {
            get
            {
                if ((this._function1 == null))
                {
                    this._function1 = new EntityRef<FUNCTION>(this, "FUNCTION1", this.FilterFUNCTION1);
                }
                return this._function1.Entity;
            }
            set
            {
                FUNCTION previous = this.FUNCTION1;
                if ((previous != value))
                {
                    this.ValidateProperty("FUNCTION1", value);
                    if ((previous != null))
                    {
                        this._function1.Entity = null;
                        previous.FUNCTIONS1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PARENTID = value.FUNCTIONID;
                    }
                    else
                    {
                        this.PARENTID = default(Nullable<decimal>);
                    }
                    this._function1.Entity = value;
                    if ((value != null))
                    {
                        value.FUNCTIONS1.Add(this);
                    }
                    this.RaisePropertyChanged("FUNCTION1");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FUNCTIONID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal FUNCTIONID
        {
            get
            {
                return this._functionid;
            }
            set
            {
                if ((this._functionid != value))
                {
                    this.OnFUNCTIONIDChanging(value);
                    this.ValidateProperty("FUNCTIONID", value);
                    this._functionid = value;
                    this.RaisePropertyChanged("FUNCTIONID");
                    this.OnFUNCTIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="FUNCTION"/> 实体实例的集合。
        /// </summary>
        [Association("FUNCTION_FUNCTION", "FUNCTIONID", "PARENTID")]
        [XmlIgnore()]
        public EntityCollection<FUNCTION> FUNCTIONS1
        {
            get
            {
                if ((this._functions1 == null))
                {
                    this._functions1 = new EntityCollection<FUNCTION>(this, "FUNCTIONS1", this.FilterFUNCTIONS1, this.AttachFUNCTIONS1, this.DetachFUNCTIONS1);
                }
                return this._functions1;
            }
        }
        
        /// <summary>
        /// 获取或设置“ICONPATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ICONPATH
        {
            get
            {
                return this._iconpath;
            }
            set
            {
                if ((this._iconpath != value))
                {
                    this.OnICONPATHChanging(value);
                    this.RaiseDataMemberChanging("ICONPATH");
                    this.ValidateProperty("ICONPATH", value);
                    this._iconpath = value;
                    this.RaiseDataMemberChanged("ICONPATH");
                    this.OnICONPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PATH
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPATHChanging(value);
                    this.RaiseDataMemberChanging("PATH");
                    this.ValidateProperty("PATH", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ROLEFUNCTION"/> 实体实例的集合。
        /// </summary>
        [Association("FUNCTION_ROLEFUNCTION", "FUNCTIONID", "FUNCTIONID")]
        [XmlIgnore()]
        public EntityCollection<ROLEFUNCTION> ROLEFUNCTIONS
        {
            get
            {
                if ((this._rolefunctions == null))
                {
                    this._rolefunctions = new EntityCollection<ROLEFUNCTION>(this, "ROLEFUNCTIONS", this.FilterROLEFUNCTIONS, this.AttachROLEFUNCTIONS, this.DetachROLEFUNCTIONS);
                }
                return this._rolefunctions;
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“URL”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string URL
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnURLChanging(value);
                    this.RaiseDataMemberChanging("URL");
                    this.ValidateProperty("URL", value);
                    this._url = value;
                    this.RaiseDataMemberChanged("URL");
                    this.OnURLChanged();
                }
            }
        }
        
        private bool FilterFUNCTION1(FUNCTION entity)
        {
            return (entity.FUNCTIONID == this.PARENTID);
        }
        
        private void AttachFUNCTIONS1(FUNCTION entity)
        {
            entity.FUNCTION1 = this;
        }
        
        private void DetachFUNCTIONS1(FUNCTION entity)
        {
            entity.FUNCTION1 = null;
        }
        
        private bool FilterFUNCTIONS1(FUNCTION entity)
        {
            return (entity.PARENTID == this.FUNCTIONID);
        }
        
        private void AttachROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            entity.FUNCTION = this;
        }
        
        private void DetachROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            entity.FUNCTION = null;
        }
        
        private bool FilterROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            return (entity.FUNCTIONID == this.FUNCTIONID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._functionid;
        }
    }
    
    /// <summary>
    /// “GGFWCASENAME”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWCASENAME : Entity
    {
        
        private decimal _cid;
        
        private string _cname;
        
        private EntityCollection<GGFWMONTHLYREPORT> _ggfwmonthlyreports;
        
        private string _remark;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCIDChanging(decimal value);
        partial void OnCIDChanged();
        partial void OnCNAMEChanging(string value);
        partial void OnCNAMEChanged();
        partial void OnREMARKChanging(string value);
        partial void OnREMARKChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWCASENAME"/> 类的新实例。
        /// </summary>
        public GGFWCASENAME()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CID
        {
            get
            {
                return this._cid;
            }
            set
            {
                if ((this._cid != value))
                {
                    this.OnCIDChanging(value);
                    this.ValidateProperty("CID", value);
                    this._cid = value;
                    this.RaisePropertyChanged("CID");
                    this.OnCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string CNAME
        {
            get
            {
                return this._cname;
            }
            set
            {
                if ((this._cname != value))
                {
                    this.OnCNAMEChanging(value);
                    this.RaiseDataMemberChanging("CNAME");
                    this.ValidateProperty("CNAME", value);
                    this._cname = value;
                    this.RaiseDataMemberChanged("CNAME");
                    this.OnCNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="GGFWMONTHLYREPORT"/> 实体实例的集合。
        /// </summary>
        [Association("GGFWCASENAME_GGFWMONTHLYREPORT", "CID", "CID")]
        [XmlIgnore()]
        public EntityCollection<GGFWMONTHLYREPORT> GGFWMONTHLYREPORTS
        {
            get
            {
                if ((this._ggfwmonthlyreports == null))
                {
                    this._ggfwmonthlyreports = new EntityCollection<GGFWMONTHLYREPORT>(this, "GGFWMONTHLYREPORTS", this.FilterGGFWMONTHLYREPORTS, this.AttachGGFWMONTHLYREPORTS, this.DetachGGFWMONTHLYREPORTS);
                }
                return this._ggfwmonthlyreports;
            }
        }
        
        /// <summary>
        /// 获取或设置“REMARK”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string REMARK
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnREMARKChanging(value);
                    this.RaiseDataMemberChanging("REMARK");
                    this.ValidateProperty("REMARK", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("REMARK");
                    this.OnREMARKChanged();
                }
            }
        }
        
        private void AttachGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            entity.GGFWCASENAME = this;
        }
        
        private void DetachGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            entity.GGFWCASENAME = null;
        }
        
        private bool FilterGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            return (entity.CID == this.CID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._cid;
        }
    }
    
    /// <summary>
    /// “GGFWEVENT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWEVENT : Entity
    {
        
        private string _audiofile;
        
        private Nullable<decimal> _classbid;
        
        private Nullable<decimal> _classsid;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<DateTime> _dbajclsj;
        
        private string _dbajclyj;
        
        private Nullable<decimal> _dbajzpr;
        
        private string _dbajzpyj;
        
        private Nullable<decimal> _dealinguserid;
        
        private string _eventaddress;
        
        private string _eventcontent;
        
        private decimal _eventid;
        
        private string _eventsource;
        
        private string _eventtitle;
        
        private Nullable<DateTime> _fxsj;
        
        private string _geometry;
        
        private EntityCollection<GGFWTOZFZD> _ggfwtozfzds;
        
        private string _guidonly;
        
        private Nullable<decimal> _isdbaj;
        
        private Nullable<decimal> _jrzb;
        
        private Nullable<DateTime> _overtime;
        
        private string _phone;
        
        private string _pictures;
        
        private string _reportperson;
        
        private Nullable<decimal> _statue;
        
        private Nullable<decimal> _userid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAUDIOFILEChanging(string value);
        partial void OnAUDIOFILEChanged();
        partial void OnCLASSBIDChanging(Nullable<decimal> value);
        partial void OnCLASSBIDChanged();
        partial void OnCLASSSIDChanging(Nullable<decimal> value);
        partial void OnCLASSSIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnDBAJCLSJChanging(Nullable<DateTime> value);
        partial void OnDBAJCLSJChanged();
        partial void OnDBAJCLYJChanging(string value);
        partial void OnDBAJCLYJChanged();
        partial void OnDBAJZPRChanging(Nullable<decimal> value);
        partial void OnDBAJZPRChanged();
        partial void OnDBAJZPYJChanging(string value);
        partial void OnDBAJZPYJChanged();
        partial void OnDEALINGUSERIDChanging(Nullable<decimal> value);
        partial void OnDEALINGUSERIDChanged();
        partial void OnEVENTADDRESSChanging(string value);
        partial void OnEVENTADDRESSChanged();
        partial void OnEVENTCONTENTChanging(string value);
        partial void OnEVENTCONTENTChanged();
        partial void OnEVENTIDChanging(decimal value);
        partial void OnEVENTIDChanged();
        partial void OnEVENTSOURCEChanging(string value);
        partial void OnEVENTSOURCEChanged();
        partial void OnEVENTTITLEChanging(string value);
        partial void OnEVENTTITLEChanged();
        partial void OnFXSJChanging(Nullable<DateTime> value);
        partial void OnFXSJChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnGUIDONLYChanging(string value);
        partial void OnGUIDONLYChanged();
        partial void OnISDBAJChanging(Nullable<decimal> value);
        partial void OnISDBAJChanged();
        partial void OnJRZBChanging(Nullable<decimal> value);
        partial void OnJRZBChanged();
        partial void OnOVERTIMEChanging(Nullable<DateTime> value);
        partial void OnOVERTIMEChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnPICTURESChanging(string value);
        partial void OnPICTURESChanged();
        partial void OnREPORTPERSONChanging(string value);
        partial void OnREPORTPERSONChanged();
        partial void OnSTATUEChanging(Nullable<decimal> value);
        partial void OnSTATUEChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWEVENT"/> 类的新实例。
        /// </summary>
        public GGFWEVENT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AUDIOFILE”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string AUDIOFILE
        {
            get
            {
                return this._audiofile;
            }
            set
            {
                if ((this._audiofile != value))
                {
                    this.OnAUDIOFILEChanging(value);
                    this.RaiseDataMemberChanging("AUDIOFILE");
                    this.ValidateProperty("AUDIOFILE", value);
                    this._audiofile = value;
                    this.RaiseDataMemberChanged("AUDIOFILE");
                    this.OnAUDIOFILEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSBID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSBID
        {
            get
            {
                return this._classbid;
            }
            set
            {
                if ((this._classbid != value))
                {
                    this.OnCLASSBIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSBID");
                    this.ValidateProperty("CLASSBID", value);
                    this._classbid = value;
                    this.RaiseDataMemberChanged("CLASSBID");
                    this.OnCLASSBIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSSID
        {
            get
            {
                return this._classsid;
            }
            set
            {
                if ((this._classsid != value))
                {
                    this.OnCLASSSIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSSID");
                    this.ValidateProperty("CLASSSID", value);
                    this._classsid = value;
                    this.RaiseDataMemberChanged("CLASSSID");
                    this.OnCLASSSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DBAJCLSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DBAJCLSJ
        {
            get
            {
                return this._dbajclsj;
            }
            set
            {
                if ((this._dbajclsj != value))
                {
                    this.OnDBAJCLSJChanging(value);
                    this.RaiseDataMemberChanging("DBAJCLSJ");
                    this.ValidateProperty("DBAJCLSJ", value);
                    this._dbajclsj = value;
                    this.RaiseDataMemberChanged("DBAJCLSJ");
                    this.OnDBAJCLSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DBAJCLYJ”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DBAJCLYJ
        {
            get
            {
                return this._dbajclyj;
            }
            set
            {
                if ((this._dbajclyj != value))
                {
                    this.OnDBAJCLYJChanging(value);
                    this.RaiseDataMemberChanging("DBAJCLYJ");
                    this.ValidateProperty("DBAJCLYJ", value);
                    this._dbajclyj = value;
                    this.RaiseDataMemberChanged("DBAJCLYJ");
                    this.OnDBAJCLYJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DBAJZPR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DBAJZPR
        {
            get
            {
                return this._dbajzpr;
            }
            set
            {
                if ((this._dbajzpr != value))
                {
                    this.OnDBAJZPRChanging(value);
                    this.RaiseDataMemberChanging("DBAJZPR");
                    this.ValidateProperty("DBAJZPR", value);
                    this._dbajzpr = value;
                    this.RaiseDataMemberChanged("DBAJZPR");
                    this.OnDBAJZPRChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DBAJZPYJ”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DBAJZPYJ
        {
            get
            {
                return this._dbajzpyj;
            }
            set
            {
                if ((this._dbajzpyj != value))
                {
                    this.OnDBAJZPYJChanging(value);
                    this.RaiseDataMemberChanging("DBAJZPYJ");
                    this.ValidateProperty("DBAJZPYJ", value);
                    this._dbajzpyj = value;
                    this.RaiseDataMemberChanged("DBAJZPYJ");
                    this.OnDBAJZPYJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DEALINGUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DEALINGUSERID
        {
            get
            {
                return this._dealinguserid;
            }
            set
            {
                if ((this._dealinguserid != value))
                {
                    this.OnDEALINGUSERIDChanging(value);
                    this.RaiseDataMemberChanging("DEALINGUSERID");
                    this.ValidateProperty("DEALINGUSERID", value);
                    this._dealinguserid = value;
                    this.RaiseDataMemberChanged("DEALINGUSERID");
                    this.OnDEALINGUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string EVENTADDRESS
        {
            get
            {
                return this._eventaddress;
            }
            set
            {
                if ((this._eventaddress != value))
                {
                    this.OnEVENTADDRESSChanging(value);
                    this.RaiseDataMemberChanging("EVENTADDRESS");
                    this.ValidateProperty("EVENTADDRESS", value);
                    this._eventaddress = value;
                    this.RaiseDataMemberChanged("EVENTADDRESS");
                    this.OnEVENTADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTCONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string EVENTCONTENT
        {
            get
            {
                return this._eventcontent;
            }
            set
            {
                if ((this._eventcontent != value))
                {
                    this.OnEVENTCONTENTChanging(value);
                    this.RaiseDataMemberChanging("EVENTCONTENT");
                    this.ValidateProperty("EVENTCONTENT", value);
                    this._eventcontent = value;
                    this.RaiseDataMemberChanged("EVENTCONTENT");
                    this.OnEVENTCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal EVENTID
        {
            get
            {
                return this._eventid;
            }
            set
            {
                if ((this._eventid != value))
                {
                    this.OnEVENTIDChanging(value);
                    this.ValidateProperty("EVENTID", value);
                    this._eventid = value;
                    this.RaisePropertyChanged("EVENTID");
                    this.OnEVENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EVENTSOURCE
        {
            get
            {
                return this._eventsource;
            }
            set
            {
                if ((this._eventsource != value))
                {
                    this.OnEVENTSOURCEChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCE");
                    this.ValidateProperty("EVENTSOURCE", value);
                    this._eventsource = value;
                    this.RaiseDataMemberChanged("EVENTSOURCE");
                    this.OnEVENTSOURCEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string EVENTTITLE
        {
            get
            {
                return this._eventtitle;
            }
            set
            {
                if ((this._eventtitle != value))
                {
                    this.OnEVENTTITLEChanging(value);
                    this.RaiseDataMemberChanging("EVENTTITLE");
                    this.ValidateProperty("EVENTTITLE", value);
                    this._eventtitle = value;
                    this.RaiseDataMemberChanged("EVENTTITLE");
                    this.OnEVENTTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FXSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> FXSJ
        {
            get
            {
                return this._fxsj;
            }
            set
            {
                if ((this._fxsj != value))
                {
                    this.OnFXSJChanging(value);
                    this.RaiseDataMemberChanging("FXSJ");
                    this.ValidateProperty("FXSJ", value);
                    this._fxsj = value;
                    this.RaiseDataMemberChanged("FXSJ");
                    this.OnFXSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="GGFWTOZFZD"/> 实体实例的集合。
        /// </summary>
        [Association("GGFWEVENT_GGFWTOZFZD", "EVENTID", "EVENTID")]
        [XmlIgnore()]
        public EntityCollection<GGFWTOZFZD> GGFWTOZFZDS
        {
            get
            {
                if ((this._ggfwtozfzds == null))
                {
                    this._ggfwtozfzds = new EntityCollection<GGFWTOZFZD>(this, "GGFWTOZFZDS", this.FilterGGFWTOZFZDS, this.AttachGGFWTOZFZDS, this.DetachGGFWTOZFZDS);
                }
                return this._ggfwtozfzds;
            }
        }
        
        /// <summary>
        /// 获取或设置“GUIDONLY”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string GUIDONLY
        {
            get
            {
                return this._guidonly;
            }
            set
            {
                if ((this._guidonly != value))
                {
                    this.OnGUIDONLYChanging(value);
                    this.RaiseDataMemberChanging("GUIDONLY");
                    this.ValidateProperty("GUIDONLY", value);
                    this._guidonly = value;
                    this.RaiseDataMemberChanged("GUIDONLY");
                    this.OnGUIDONLYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISDBAJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISDBAJ
        {
            get
            {
                return this._isdbaj;
            }
            set
            {
                if ((this._isdbaj != value))
                {
                    this.OnISDBAJChanging(value);
                    this.RaiseDataMemberChanging("ISDBAJ");
                    this.ValidateProperty("ISDBAJ", value);
                    this._isdbaj = value;
                    this.RaiseDataMemberChanged("ISDBAJ");
                    this.OnISDBAJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JRZB”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> JRZB
        {
            get
            {
                return this._jrzb;
            }
            set
            {
                if ((this._jrzb != value))
                {
                    this.OnJRZBChanging(value);
                    this.RaiseDataMemberChanging("JRZB");
                    this.ValidateProperty("JRZB", value);
                    this._jrzb = value;
                    this.RaiseDataMemberChanged("JRZB");
                    this.OnJRZBChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OVERTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OVERTIME
        {
            get
            {
                return this._overtime;
            }
            set
            {
                if ((this._overtime != value))
                {
                    this.OnOVERTIMEChanging(value);
                    this.RaiseDataMemberChanging("OVERTIME");
                    this.ValidateProperty("OVERTIME", value);
                    this._overtime = value;
                    this.RaiseDataMemberChanged("OVERTIME");
                    this.OnOVERTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string PHONE
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPHONEChanging(value);
                    this.RaiseDataMemberChanging("PHONE");
                    this.ValidateProperty("PHONE", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICTURES”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string PICTURES
        {
            get
            {
                return this._pictures;
            }
            set
            {
                if ((this._pictures != value))
                {
                    this.OnPICTURESChanging(value);
                    this.RaiseDataMemberChanging("PICTURES");
                    this.ValidateProperty("PICTURES", value);
                    this._pictures = value;
                    this.RaiseDataMemberChanged("PICTURES");
                    this.OnPICTURESChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REPORTPERSON”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string REPORTPERSON
        {
            get
            {
                return this._reportperson;
            }
            set
            {
                if ((this._reportperson != value))
                {
                    this.OnREPORTPERSONChanging(value);
                    this.RaiseDataMemberChanging("REPORTPERSON");
                    this.ValidateProperty("REPORTPERSON", value);
                    this._reportperson = value;
                    this.RaiseDataMemberChanged("REPORTPERSON");
                    this.OnREPORTPERSONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUE
        {
            get
            {
                return this._statue;
            }
            set
            {
                if ((this._statue != value))
                {
                    this.OnSTATUEChanging(value);
                    this.RaiseDataMemberChanging("STATUE");
                    this.ValidateProperty("STATUE", value);
                    this._statue = value;
                    this.RaiseDataMemberChanged("STATUE");
                    this.OnSTATUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        private void AttachGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            entity.GGFWEVENT = this;
        }
        
        private void DetachGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            entity.GGFWEVENT = null;
        }
        
        private bool FilterGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            return (entity.EVENTID == this.EVENTID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._eventid;
        }
    }
    
    /// <summary>
    /// “GGFWMONTHLYREPORT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWMONTHLYREPORT : Entity
    {
        
        private Nullable<decimal> _cid;
        
        private Nullable<DateTime> _createtime;
        
        private string _fraction;
        
        private EntityRef<GGFWCASENAME> _ggfwcasename;
        
        private Nullable<decimal> _ggfwsid;
        
        private EntityRef<GGFWSOURCE> _ggfwsource;
        
        private decimal _mreportid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCIDChanging(Nullable<decimal> value);
        partial void OnCIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnFRACTIONChanging(string value);
        partial void OnFRACTIONChanged();
        partial void OnGGFWSIDChanging(Nullable<decimal> value);
        partial void OnGGFWSIDChanged();
        partial void OnMREPORTIDChanging(decimal value);
        partial void OnMREPORTIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWMONTHLYREPORT"/> 类的新实例。
        /// </summary>
        public GGFWMONTHLYREPORT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CID
        {
            get
            {
                return this._cid;
            }
            set
            {
                if ((this._cid != value))
                {
                    this.OnCIDChanging(value);
                    this.RaiseDataMemberChanging("CID");
                    this.ValidateProperty("CID", value);
                    this._cid = value;
                    this.RaiseDataMemberChanged("CID");
                    this.OnCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FRACTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FRACTION
        {
            get
            {
                return this._fraction;
            }
            set
            {
                if ((this._fraction != value))
                {
                    this.OnFRACTIONChanging(value);
                    this.RaiseDataMemberChanging("FRACTION");
                    this.ValidateProperty("FRACTION", value);
                    this._fraction = value;
                    this.RaiseDataMemberChanged("FRACTION");
                    this.OnFRACTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="GGFWCASENAME"/> 实体。
        /// </summary>
        [Association("GGFWCASENAME_GGFWMONTHLYREPORT", "CID", "CID", IsForeignKey=true)]
        [XmlIgnore()]
        public GGFWCASENAME GGFWCASENAME
        {
            get
            {
                if ((this._ggfwcasename == null))
                {
                    this._ggfwcasename = new EntityRef<GGFWCASENAME>(this, "GGFWCASENAME", this.FilterGGFWCASENAME);
                }
                return this._ggfwcasename.Entity;
            }
            set
            {
                GGFWCASENAME previous = this.GGFWCASENAME;
                if ((previous != value))
                {
                    this.ValidateProperty("GGFWCASENAME", value);
                    if ((previous != null))
                    {
                        this._ggfwcasename.Entity = null;
                        previous.GGFWMONTHLYREPORTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CID = value.CID;
                    }
                    else
                    {
                        this.CID = default(Nullable<decimal>);
                    }
                    this._ggfwcasename.Entity = value;
                    if ((value != null))
                    {
                        value.GGFWMONTHLYREPORTS.Add(this);
                    }
                    this.RaisePropertyChanged("GGFWCASENAME");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GGFWSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> GGFWSID
        {
            get
            {
                return this._ggfwsid;
            }
            set
            {
                if ((this._ggfwsid != value))
                {
                    this.OnGGFWSIDChanging(value);
                    this.RaiseDataMemberChanging("GGFWSID");
                    this.ValidateProperty("GGFWSID", value);
                    this._ggfwsid = value;
                    this.RaiseDataMemberChanged("GGFWSID");
                    this.OnGGFWSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="GGFWSOURCE"/> 实体。
        /// </summary>
        [Association("GGFWSOURCE_GGFWMONTHLYREPORT", "GGFWSID", "SOURCEID", IsForeignKey=true)]
        [XmlIgnore()]
        public GGFWSOURCE GGFWSOURCE
        {
            get
            {
                if ((this._ggfwsource == null))
                {
                    this._ggfwsource = new EntityRef<GGFWSOURCE>(this, "GGFWSOURCE", this.FilterGGFWSOURCE);
                }
                return this._ggfwsource.Entity;
            }
            set
            {
                GGFWSOURCE previous = this.GGFWSOURCE;
                if ((previous != value))
                {
                    this.ValidateProperty("GGFWSOURCE", value);
                    if ((previous != null))
                    {
                        this._ggfwsource.Entity = null;
                        previous.GGFWMONTHLYREPORTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GGFWSID = value.SOURCEID;
                    }
                    else
                    {
                        this.GGFWSID = default(Nullable<decimal>);
                    }
                    this._ggfwsource.Entity = value;
                    if ((value != null))
                    {
                        value.GGFWMONTHLYREPORTS.Add(this);
                    }
                    this.RaisePropertyChanged("GGFWSOURCE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MREPORTID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal MREPORTID
        {
            get
            {
                return this._mreportid;
            }
            set
            {
                if ((this._mreportid != value))
                {
                    this.OnMREPORTIDChanging(value);
                    this.ValidateProperty("MREPORTID", value);
                    this._mreportid = value;
                    this.RaisePropertyChanged("MREPORTID");
                    this.OnMREPORTIDChanged();
                }
            }
        }
        
        private bool FilterGGFWCASENAME(GGFWCASENAME entity)
        {
            return (entity.CID == this.CID);
        }
        
        private bool FilterGGFWSOURCE(GGFWSOURCE entity)
        {
            return (entity.SOURCEID == this.GGFWSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._mreportid;
        }
    }
    
    /// <summary>
    /// “GGFWSOURCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWSOURCE : Entity
    {
        
        private string _description;
        
        private EntityCollection<GGFWMONTHLYREPORT> _ggfwmonthlyreports;
        
        private Nullable<decimal> _seqno;
        
        private decimal _sourceid;
        
        private string _sourcename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSOURCEIDChanging(decimal value);
        partial void OnSOURCEIDChanged();
        partial void OnSOURCENAMEChanging(string value);
        partial void OnSOURCENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWSOURCE"/> 类的新实例。
        /// </summary>
        public GGFWSOURCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="GGFWMONTHLYREPORT"/> 实体实例的集合。
        /// </summary>
        [Association("GGFWSOURCE_GGFWMONTHLYREPORT", "SOURCEID", "GGFWSID")]
        [XmlIgnore()]
        public EntityCollection<GGFWMONTHLYREPORT> GGFWMONTHLYREPORTS
        {
            get
            {
                if ((this._ggfwmonthlyreports == null))
                {
                    this._ggfwmonthlyreports = new EntityCollection<GGFWMONTHLYREPORT>(this, "GGFWMONTHLYREPORTS", this.FilterGGFWMONTHLYREPORTS, this.AttachGGFWMONTHLYREPORTS, this.DetachGGFWMONTHLYREPORTS);
                }
                return this._ggfwmonthlyreports;
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SOURCEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SOURCEID
        {
            get
            {
                return this._sourceid;
            }
            set
            {
                if ((this._sourceid != value))
                {
                    this.OnSOURCEIDChanging(value);
                    this.ValidateProperty("SOURCEID", value);
                    this._sourceid = value;
                    this.RaisePropertyChanged("SOURCEID");
                    this.OnSOURCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SOURCENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string SOURCENAME
        {
            get
            {
                return this._sourcename;
            }
            set
            {
                if ((this._sourcename != value))
                {
                    this.OnSOURCENAMEChanging(value);
                    this.RaiseDataMemberChanging("SOURCENAME");
                    this.ValidateProperty("SOURCENAME", value);
                    this._sourcename = value;
                    this.RaiseDataMemberChanged("SOURCENAME");
                    this.OnSOURCENAMEChanged();
                }
            }
        }
        
        private void AttachGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            entity.GGFWSOURCE = this;
        }
        
        private void DetachGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            entity.GGFWSOURCE = null;
        }
        
        private bool FilterGGFWMONTHLYREPORTS(GGFWMONTHLYREPORT entity)
        {
            return (entity.GGFWSID == this.SOURCEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._sourceid;
        }
    }
    
    /// <summary>
    /// “GGFWSTATUE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWSTATUE : Entity
    {
        
        private decimal _statueid;
        
        private string _statuename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnSTATUEIDChanging(decimal value);
        partial void OnSTATUEIDChanged();
        partial void OnSTATUENAMEChanging(string value);
        partial void OnSTATUENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWSTATUE"/> 类的新实例。
        /// </summary>
        public GGFWSTATUE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“STATUEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal STATUEID
        {
            get
            {
                return this._statueid;
            }
            set
            {
                if ((this._statueid != value))
                {
                    this.OnSTATUEIDChanging(value);
                    this.ValidateProperty("STATUEID", value);
                    this._statueid = value;
                    this.RaisePropertyChanged("STATUEID");
                    this.OnSTATUEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string STATUENAME
        {
            get
            {
                return this._statuename;
            }
            set
            {
                if ((this._statuename != value))
                {
                    this.OnSTATUENAMEChanging(value);
                    this.RaiseDataMemberChanging("STATUENAME");
                    this.ValidateProperty("STATUENAME", value);
                    this._statuename = value;
                    this.RaiseDataMemberChanged("STATUENAME");
                    this.OnSTATUENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._statueid;
        }
    }
    
    /// <summary>
    /// “GGFWTOZFZD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWTOZFZD : Entity
    {
        
        private string _archiving;
        
        private Nullable<DateTime> _archivingtime;
        
        private Nullable<decimal> _archivinguser;
        
        private string _comments;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _eventid;
        
        private EntityRef<GGFWEVENT> _ggfwevent;
        
        private Nullable<decimal> _iscurrent;
        
        private string _refusecontent;
        
        private decimal _tozfzdid;
        
        private Nullable<decimal> _userid;
        
        private string _wiid;
        
        private Nullable<decimal> _zduserid;
        
        private EntityRef<ZFSJWORKFLOWINSTANCE> _zfsjworkflowinstance;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnARCHIVINGChanging(string value);
        partial void OnARCHIVINGChanged();
        partial void OnARCHIVINGTIMEChanging(Nullable<DateTime> value);
        partial void OnARCHIVINGTIMEChanged();
        partial void OnARCHIVINGUSERChanging(Nullable<decimal> value);
        partial void OnARCHIVINGUSERChanged();
        partial void OnCOMMENTSChanging(string value);
        partial void OnCOMMENTSChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnEVENTIDChanging(Nullable<decimal> value);
        partial void OnEVENTIDChanged();
        partial void OnISCURRENTChanging(Nullable<decimal> value);
        partial void OnISCURRENTChanged();
        partial void OnREFUSECONTENTChanging(string value);
        partial void OnREFUSECONTENTChanged();
        partial void OnTOZFZDIDChanging(decimal value);
        partial void OnTOZFZDIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnZDUSERIDChanging(Nullable<decimal> value);
        partial void OnZDUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWTOZFZD"/> 类的新实例。
        /// </summary>
        public GGFWTOZFZD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVING”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ARCHIVING
        {
            get
            {
                return this._archiving;
            }
            set
            {
                if ((this._archiving != value))
                {
                    this.OnARCHIVINGChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVING");
                    this.ValidateProperty("ARCHIVING", value);
                    this._archiving = value;
                    this.RaiseDataMemberChanged("ARCHIVING");
                    this.OnARCHIVINGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVINGTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ARCHIVINGTIME
        {
            get
            {
                return this._archivingtime;
            }
            set
            {
                if ((this._archivingtime != value))
                {
                    this.OnARCHIVINGTIMEChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVINGTIME");
                    this.ValidateProperty("ARCHIVINGTIME", value);
                    this._archivingtime = value;
                    this.RaiseDataMemberChanged("ARCHIVINGTIME");
                    this.OnARCHIVINGTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVINGUSER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ARCHIVINGUSER
        {
            get
            {
                return this._archivinguser;
            }
            set
            {
                if ((this._archivinguser != value))
                {
                    this.OnARCHIVINGUSERChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVINGUSER");
                    this.ValidateProperty("ARCHIVINGUSER", value);
                    this._archivinguser = value;
                    this.RaiseDataMemberChanged("ARCHIVINGUSER");
                    this.OnARCHIVINGUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“COMMENTS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string COMMENTS
        {
            get
            {
                return this._comments;
            }
            set
            {
                if ((this._comments != value))
                {
                    this.OnCOMMENTSChanging(value);
                    this.RaiseDataMemberChanging("COMMENTS");
                    this.ValidateProperty("COMMENTS", value);
                    this._comments = value;
                    this.RaiseDataMemberChanged("COMMENTS");
                    this.OnCOMMENTSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> EVENTID
        {
            get
            {
                return this._eventid;
            }
            set
            {
                if ((this._eventid != value))
                {
                    this.OnEVENTIDChanging(value);
                    this.RaiseDataMemberChanging("EVENTID");
                    this.ValidateProperty("EVENTID", value);
                    this._eventid = value;
                    this.RaiseDataMemberChanged("EVENTID");
                    this.OnEVENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="GGFWEVENT"/> 实体。
        /// </summary>
        [Association("GGFWEVENT_GGFWTOZFZD", "EVENTID", "EVENTID", IsForeignKey=true)]
        [XmlIgnore()]
        public GGFWEVENT GGFWEVENT
        {
            get
            {
                if ((this._ggfwevent == null))
                {
                    this._ggfwevent = new EntityRef<GGFWEVENT>(this, "GGFWEVENT", this.FilterGGFWEVENT);
                }
                return this._ggfwevent.Entity;
            }
            set
            {
                GGFWEVENT previous = this.GGFWEVENT;
                if ((previous != value))
                {
                    this.ValidateProperty("GGFWEVENT", value);
                    if ((previous != null))
                    {
                        this._ggfwevent.Entity = null;
                        previous.GGFWTOZFZDS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EVENTID = value.EVENTID;
                    }
                    else
                    {
                        this.EVENTID = default(Nullable<decimal>);
                    }
                    this._ggfwevent.Entity = value;
                    if ((value != null))
                    {
                        value.GGFWTOZFZDS.Add(this);
                    }
                    this.RaisePropertyChanged("GGFWEVENT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISCURRENT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISCURRENT
        {
            get
            {
                return this._iscurrent;
            }
            set
            {
                if ((this._iscurrent != value))
                {
                    this.OnISCURRENTChanging(value);
                    this.RaiseDataMemberChanging("ISCURRENT");
                    this.ValidateProperty("ISCURRENT", value);
                    this._iscurrent = value;
                    this.RaiseDataMemberChanged("ISCURRENT");
                    this.OnISCURRENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REFUSECONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string REFUSECONTENT
        {
            get
            {
                return this._refusecontent;
            }
            set
            {
                if ((this._refusecontent != value))
                {
                    this.OnREFUSECONTENTChanging(value);
                    this.RaiseDataMemberChanging("REFUSECONTENT");
                    this.ValidateProperty("REFUSECONTENT", value);
                    this._refusecontent = value;
                    this.RaiseDataMemberChanged("REFUSECONTENT");
                    this.OnREFUSECONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOZFZDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TOZFZDID
        {
            get
            {
                return this._tozfzdid;
            }
            set
            {
                if ((this._tozfzdid != value))
                {
                    this.OnTOZFZDIDChanging(value);
                    this.ValidateProperty("TOZFZDID", value);
                    this._tozfzdid = value;
                    this.RaisePropertyChanged("TOZFZDID");
                    this.OnTOZFZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZDUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ZDUSERID
        {
            get
            {
                return this._zduserid;
            }
            set
            {
                if ((this._zduserid != value))
                {
                    this.OnZDUSERIDChanging(value);
                    this.RaiseDataMemberChanging("ZDUSERID");
                    this.ValidateProperty("ZDUSERID", value);
                    this._zduserid = value;
                    this.RaiseDataMemberChanged("ZDUSERID");
                    this.OnZDUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFSJWORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("ZFSJWORKFLOWINSTANCE_GGFWTOZFZD", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFSJWORKFLOWINSTANCE ZFSJWORKFLOWINSTANCE
        {
            get
            {
                if ((this._zfsjworkflowinstance == null))
                {
                    this._zfsjworkflowinstance = new EntityRef<ZFSJWORKFLOWINSTANCE>(this, "ZFSJWORKFLOWINSTANCE", this.FilterZFSJWORKFLOWINSTANCE);
                }
                return this._zfsjworkflowinstance.Entity;
            }
            set
            {
                ZFSJWORKFLOWINSTANCE previous = this.ZFSJWORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFSJWORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._zfsjworkflowinstance.Entity = null;
                        previous.GGFWTOZFZDS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._zfsjworkflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.GGFWTOZFZDS.Add(this);
                    }
                    this.RaisePropertyChanged("ZFSJWORKFLOWINSTANCE");
                }
            }
        }
        
        private bool FilterGGFWEVENT(GGFWEVENT entity)
        {
            return (entity.EVENTID == this.EVENTID);
        }
        
        private bool FilterZFSJWORKFLOWINSTANCE(ZFSJWORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._tozfzdid;
        }
    }
    
    /// <summary>
    /// “GGFWXFDOC”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GGFWXFDOC : Entity
    {
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private string _doccode;
        
        private string _docid;
        
        private string _docname;
        
        private string _docurl;
        
        private Nullable<decimal> _evetid;
        
        private Nullable<decimal> _typeid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnDOCCODEChanging(string value);
        partial void OnDOCCODEChanged();
        partial void OnDOCIDChanging(string value);
        partial void OnDOCIDChanged();
        partial void OnDOCNAMEChanging(string value);
        partial void OnDOCNAMEChanged();
        partial void OnDOCURLChanging(string value);
        partial void OnDOCURLChanged();
        partial void OnEVETIDChanging(Nullable<decimal> value);
        partial void OnEVETIDChanged();
        partial void OnTYPEIDChanging(Nullable<decimal> value);
        partial void OnTYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GGFWXFDOC"/> 类的新实例。
        /// </summary>
        public GGFWXFDOC()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DOCCODE
        {
            get
            {
                return this._doccode;
            }
            set
            {
                if ((this._doccode != value))
                {
                    this.OnDOCCODEChanging(value);
                    this.RaiseDataMemberChanging("DOCCODE");
                    this.ValidateProperty("DOCCODE", value);
                    this._doccode = value;
                    this.RaiseDataMemberChanged("DOCCODE");
                    this.OnDOCCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(200)]
        public string DOCID
        {
            get
            {
                return this._docid;
            }
            set
            {
                if ((this._docid != value))
                {
                    this.OnDOCIDChanging(value);
                    this.ValidateProperty("DOCID", value);
                    this._docid = value;
                    this.RaisePropertyChanged("DOCID");
                    this.OnDOCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DOCNAME
        {
            get
            {
                return this._docname;
            }
            set
            {
                if ((this._docname != value))
                {
                    this.OnDOCNAMEChanging(value);
                    this.RaiseDataMemberChanging("DOCNAME");
                    this.ValidateProperty("DOCNAME", value);
                    this._docname = value;
                    this.RaiseDataMemberChanged("DOCNAME");
                    this.OnDOCNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DOCURL”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DOCURL
        {
            get
            {
                return this._docurl;
            }
            set
            {
                if ((this._docurl != value))
                {
                    this.OnDOCURLChanging(value);
                    this.RaiseDataMemberChanging("DOCURL");
                    this.ValidateProperty("DOCURL", value);
                    this._docurl = value;
                    this.RaiseDataMemberChanged("DOCURL");
                    this.OnDOCURLChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVETID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> EVETID
        {
            get
            {
                return this._evetid;
            }
            set
            {
                if ((this._evetid != value))
                {
                    this.OnEVETIDChanging(value);
                    this.RaiseDataMemberChanging("EVETID");
                    this.ValidateProperty("EVETID", value);
                    this._evetid = value;
                    this.RaiseDataMemberChanged("EVETID");
                    this.OnEVETIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("TYPEID");
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaiseDataMemberChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._docid;
        }
    }
    
    /// <summary>
    /// “GROUP”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class GROUP : Entity
    {
        
        private Nullable<DateTime> _createdate;
        
        private Nullable<decimal> _createuserid;
        
        private decimal _groupid;
        
        private string _groupname;
        
        private Nullable<decimal> _parentid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATEDATEChanging(Nullable<DateTime> value);
        partial void OnCREATEDATEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnGROUPIDChanging(decimal value);
        partial void OnGROUPIDChanged();
        partial void OnGROUPNAMEChanging(string value);
        partial void OnGROUPNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="GROUP"/> 类的新实例。
        /// </summary>
        public GROUP()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATEDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDATE
        {
            get
            {
                return this._createdate;
            }
            set
            {
                if ((this._createdate != value))
                {
                    this.OnCREATEDATEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDATE");
                    this.ValidateProperty("CREATEDATE", value);
                    this._createdate = value;
                    this.RaiseDataMemberChanged("CREATEDATE");
                    this.OnCREATEDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GROUPID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal GROUPID
        {
            get
            {
                return this._groupid;
            }
            set
            {
                if ((this._groupid != value))
                {
                    this.OnGROUPIDChanging(value);
                    this.ValidateProperty("GROUPID", value);
                    this._groupid = value;
                    this.RaisePropertyChanged("GROUPID");
                    this.OnGROUPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GROUPNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string GROUPNAME
        {
            get
            {
                return this._groupname;
            }
            set
            {
                if ((this._groupname != value))
                {
                    this.OnGROUPNAMEChanging(value);
                    this.RaiseDataMemberChanging("GROUPNAME");
                    this.ValidateProperty("GROUPNAME", value);
                    this._groupname = value;
                    this.RaiseDataMemberChanged("GROUPNAME");
                    this.OnGROUPNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._groupid;
        }
    }
    
    /// <summary>
    /// “ILLEGALCLASS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ILLEGALCLASS : Entity
    {
        
        private decimal _illegalclassid;
        
        private string _illegalclassname;
        
        private Nullable<decimal> _illegalclasstypeid;
        
        private Nullable<decimal> _illegalcode;
        
        private EntityCollection<ILLEGALITEM> _illegalitems;
        
        private Nullable<decimal> _parentid;
        
        private string _path;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnILLEGALCLASSIDChanging(decimal value);
        partial void OnILLEGALCLASSIDChanged();
        partial void OnILLEGALCLASSNAMEChanging(string value);
        partial void OnILLEGALCLASSNAMEChanged();
        partial void OnILLEGALCLASSTYPEIDChanging(Nullable<decimal> value);
        partial void OnILLEGALCLASSTYPEIDChanged();
        partial void OnILLEGALCODEChanging(Nullable<decimal> value);
        partial void OnILLEGALCODEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ILLEGALCLASS"/> 类的新实例。
        /// </summary>
        public ILLEGALCLASS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCLASSID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ILLEGALCLASSID
        {
            get
            {
                return this._illegalclassid;
            }
            set
            {
                if ((this._illegalclassid != value))
                {
                    this.OnILLEGALCLASSIDChanging(value);
                    this.ValidateProperty("ILLEGALCLASSID", value);
                    this._illegalclassid = value;
                    this.RaisePropertyChanged("ILLEGALCLASSID");
                    this.OnILLEGALCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCLASSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ILLEGALCLASSNAME
        {
            get
            {
                return this._illegalclassname;
            }
            set
            {
                if ((this._illegalclassname != value))
                {
                    this.OnILLEGALCLASSNAMEChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALCLASSNAME");
                    this.ValidateProperty("ILLEGALCLASSNAME", value);
                    this._illegalclassname = value;
                    this.RaiseDataMemberChanged("ILLEGALCLASSNAME");
                    this.OnILLEGALCLASSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCLASSTYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ILLEGALCLASSTYPEID
        {
            get
            {
                return this._illegalclasstypeid;
            }
            set
            {
                if ((this._illegalclasstypeid != value))
                {
                    this.OnILLEGALCLASSTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALCLASSTYPEID");
                    this.ValidateProperty("ILLEGALCLASSTYPEID", value);
                    this._illegalclasstypeid = value;
                    this.RaiseDataMemberChanged("ILLEGALCLASSTYPEID");
                    this.OnILLEGALCLASSTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCODE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ILLEGALCODE
        {
            get
            {
                return this._illegalcode;
            }
            set
            {
                if ((this._illegalcode != value))
                {
                    this.OnILLEGALCODEChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALCODE");
                    this.ValidateProperty("ILLEGALCODE", value);
                    this._illegalcode = value;
                    this.RaiseDataMemberChanged("ILLEGALCODE");
                    this.OnILLEGALCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ILLEGALITEM"/> 实体实例的集合。
        /// </summary>
        [Association("ILLEGALCLASS_ILLEGALITEM", "ILLEGALCLASSID", "ILLEGALCLASSID")]
        [XmlIgnore()]
        public EntityCollection<ILLEGALITEM> ILLEGALITEMS
        {
            get
            {
                if ((this._illegalitems == null))
                {
                    this._illegalitems = new EntityCollection<ILLEGALITEM>(this, "ILLEGALITEMS", this.FilterILLEGALITEMS, this.AttachILLEGALITEMS, this.DetachILLEGALITEMS);
                }
                return this._illegalitems;
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PATH
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPATHChanging(value);
                    this.RaiseDataMemberChanging("PATH");
                    this.ValidateProperty("PATH", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
        
        private void AttachILLEGALITEMS(ILLEGALITEM entity)
        {
            entity.ILLEGALCLASS = this;
        }
        
        private void DetachILLEGALITEMS(ILLEGALITEM entity)
        {
            entity.ILLEGALCLASS = null;
        }
        
        private bool FilterILLEGALITEMS(ILLEGALITEM entity)
        {
            return (entity.ILLEGALCLASSID == this.ILLEGALCLASSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._illegalclassid;
        }
    }
    
    /// <summary>
    /// “ILLEGALITEM”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ILLEGALITEM : Entity
    {
        
        private string _fzze;
        
        private EntityRef<ILLEGALCLASS> _illegalclass;
        
        private Nullable<decimal> _illegalclassid;
        
        private string _illegalcode;
        
        private decimal _illegalitemid;
        
        private string _illegalitemname;
        
        private string _penaltycontent;
        
        private string _weize;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnFZZEChanging(string value);
        partial void OnFZZEChanged();
        partial void OnILLEGALCLASSIDChanging(Nullable<decimal> value);
        partial void OnILLEGALCLASSIDChanged();
        partial void OnILLEGALCODEChanging(string value);
        partial void OnILLEGALCODEChanged();
        partial void OnILLEGALITEMIDChanging(decimal value);
        partial void OnILLEGALITEMIDChanged();
        partial void OnILLEGALITEMNAMEChanging(string value);
        partial void OnILLEGALITEMNAMEChanged();
        partial void OnPENALTYCONTENTChanging(string value);
        partial void OnPENALTYCONTENTChanged();
        partial void OnWEIZEChanging(string value);
        partial void OnWEIZEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ILLEGALITEM"/> 类的新实例。
        /// </summary>
        public ILLEGALITEM()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“FZZE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string FZZE
        {
            get
            {
                return this._fzze;
            }
            set
            {
                if ((this._fzze != value))
                {
                    this.OnFZZEChanging(value);
                    this.RaiseDataMemberChanging("FZZE");
                    this.ValidateProperty("FZZE", value);
                    this._fzze = value;
                    this.RaiseDataMemberChanged("FZZE");
                    this.OnFZZEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ILLEGALCLASS"/> 实体。
        /// </summary>
        [Association("ILLEGALCLASS_ILLEGALITEM", "ILLEGALCLASSID", "ILLEGALCLASSID", IsForeignKey=true)]
        [XmlIgnore()]
        public ILLEGALCLASS ILLEGALCLASS
        {
            get
            {
                if ((this._illegalclass == null))
                {
                    this._illegalclass = new EntityRef<ILLEGALCLASS>(this, "ILLEGALCLASS", this.FilterILLEGALCLASS);
                }
                return this._illegalclass.Entity;
            }
            set
            {
                ILLEGALCLASS previous = this.ILLEGALCLASS;
                if ((previous != value))
                {
                    this.ValidateProperty("ILLEGALCLASS", value);
                    if ((previous != null))
                    {
                        this._illegalclass.Entity = null;
                        previous.ILLEGALITEMS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ILLEGALCLASSID = value.ILLEGALCLASSID;
                    }
                    else
                    {
                        this.ILLEGALCLASSID = default(Nullable<decimal>);
                    }
                    this._illegalclass.Entity = value;
                    if ((value != null))
                    {
                        value.ILLEGALITEMS.Add(this);
                    }
                    this.RaisePropertyChanged("ILLEGALCLASS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCLASSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ILLEGALCLASSID
        {
            get
            {
                return this._illegalclassid;
            }
            set
            {
                if ((this._illegalclassid != value))
                {
                    this.OnILLEGALCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALCLASSID");
                    this.ValidateProperty("ILLEGALCLASSID", value);
                    this._illegalclassid = value;
                    this.RaiseDataMemberChanged("ILLEGALCLASSID");
                    this.OnILLEGALCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ILLEGALCODE
        {
            get
            {
                return this._illegalcode;
            }
            set
            {
                if ((this._illegalcode != value))
                {
                    this.OnILLEGALCODEChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALCODE");
                    this.ValidateProperty("ILLEGALCODE", value);
                    this._illegalcode = value;
                    this.RaiseDataMemberChanged("ILLEGALCODE");
                    this.OnILLEGALCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALITEMID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ILLEGALITEMID
        {
            get
            {
                return this._illegalitemid;
            }
            set
            {
                if ((this._illegalitemid != value))
                {
                    this.OnILLEGALITEMIDChanging(value);
                    this.ValidateProperty("ILLEGALITEMID", value);
                    this._illegalitemid = value;
                    this.RaisePropertyChanged("ILLEGALITEMID");
                    this.OnILLEGALITEMIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALITEMNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ILLEGALITEMNAME
        {
            get
            {
                return this._illegalitemname;
            }
            set
            {
                if ((this._illegalitemname != value))
                {
                    this.OnILLEGALITEMNAMEChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALITEMNAME");
                    this.ValidateProperty("ILLEGALITEMNAME", value);
                    this._illegalitemname = value;
                    this.RaiseDataMemberChanged("ILLEGALITEMNAME");
                    this.OnILLEGALITEMNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PENALTYCONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PENALTYCONTENT
        {
            get
            {
                return this._penaltycontent;
            }
            set
            {
                if ((this._penaltycontent != value))
                {
                    this.OnPENALTYCONTENTChanging(value);
                    this.RaiseDataMemberChanging("PENALTYCONTENT");
                    this.ValidateProperty("PENALTYCONTENT", value);
                    this._penaltycontent = value;
                    this.RaiseDataMemberChanged("PENALTYCONTENT");
                    this.OnPENALTYCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WEIZE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string WEIZE
        {
            get
            {
                return this._weize;
            }
            set
            {
                if ((this._weize != value))
                {
                    this.OnWEIZEChanging(value);
                    this.RaiseDataMemberChanging("WEIZE");
                    this.ValidateProperty("WEIZE", value);
                    this._weize = value;
                    this.RaiseDataMemberChanged("WEIZE");
                    this.OnWEIZEChanged();
                }
            }
        }
        
        private bool FilterILLEGALCLASS(ILLEGALCLASS entity)
        {
            return (entity.ILLEGALCLASSID == this.ILLEGALCLASSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._illegalitemid;
        }
    }
    
    /// <summary>
    /// “LAYERTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class LAYERTYPE : Entity
    {
        
        private decimal _id;
        
        private string _name;
        
        private string _typevalue;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnTYPEVALUEChanging(string value);
        partial void OnTYPEVALUEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="LAYERTYPE"/> 类的新实例。
        /// </summary>
        public LAYERTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEVALUE”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string TYPEVALUE
        {
            get
            {
                return this._typevalue;
            }
            set
            {
                if ((this._typevalue != value))
                {
                    this.OnTYPEVALUEChanging(value);
                    this.RaiseDataMemberChanging("TYPEVALUE");
                    this.ValidateProperty("TYPEVALUE", value);
                    this._typevalue = value;
                    this.RaiseDataMemberChanged("TYPEVALUE");
                    this.OnTYPEVALUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “LEADERWEEKWORKPLAN”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class LEADERWEEKWORKPLAN : Entity
    {
        
        private Nullable<DateTime> _enddate;
        
        private Nullable<DateTime> _modifytime;
        
        private Nullable<decimal> _modifyuserid;
        
        private string _ondutydept;
        
        private string _ondutyleader;
        
        private decimal _planid;
        
        private Nullable<DateTime> _plantime;
        
        private Nullable<decimal> _planuserid;
        
        private Nullable<DateTime> _startdate;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnENDDATEChanging(Nullable<DateTime> value);
        partial void OnENDDATEChanged();
        partial void OnMODIFYTIMEChanging(Nullable<DateTime> value);
        partial void OnMODIFYTIMEChanged();
        partial void OnMODIFYUSERIDChanging(Nullable<decimal> value);
        partial void OnMODIFYUSERIDChanged();
        partial void OnONDUTYDEPTChanging(string value);
        partial void OnONDUTYDEPTChanged();
        partial void OnONDUTYLEADERChanging(string value);
        partial void OnONDUTYLEADERChanged();
        partial void OnPLANIDChanging(decimal value);
        partial void OnPLANIDChanged();
        partial void OnPLANTIMEChanging(Nullable<DateTime> value);
        partial void OnPLANTIMEChanged();
        partial void OnPLANUSERIDChanging(Nullable<decimal> value);
        partial void OnPLANUSERIDChanged();
        partial void OnSTARTDATEChanging(Nullable<DateTime> value);
        partial void OnSTARTDATEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="LEADERWEEKWORKPLAN"/> 类的新实例。
        /// </summary>
        public LEADERWEEKWORKPLAN()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ENDDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ENDDATE
        {
            get
            {
                return this._enddate;
            }
            set
            {
                if ((this._enddate != value))
                {
                    this.OnENDDATEChanging(value);
                    this.RaiseDataMemberChanging("ENDDATE");
                    this.ValidateProperty("ENDDATE", value);
                    this._enddate = value;
                    this.RaiseDataMemberChanged("ENDDATE");
                    this.OnENDDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MODIFYTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> MODIFYTIME
        {
            get
            {
                return this._modifytime;
            }
            set
            {
                if ((this._modifytime != value))
                {
                    this.OnMODIFYTIMEChanging(value);
                    this.RaiseDataMemberChanging("MODIFYTIME");
                    this.ValidateProperty("MODIFYTIME", value);
                    this._modifytime = value;
                    this.RaiseDataMemberChanged("MODIFYTIME");
                    this.OnMODIFYTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MODIFYUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> MODIFYUSERID
        {
            get
            {
                return this._modifyuserid;
            }
            set
            {
                if ((this._modifyuserid != value))
                {
                    this.OnMODIFYUSERIDChanging(value);
                    this.RaiseDataMemberChanging("MODIFYUSERID");
                    this.ValidateProperty("MODIFYUSERID", value);
                    this._modifyuserid = value;
                    this.RaiseDataMemberChanged("MODIFYUSERID");
                    this.OnMODIFYUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONDUTYDEPT”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string ONDUTYDEPT
        {
            get
            {
                return this._ondutydept;
            }
            set
            {
                if ((this._ondutydept != value))
                {
                    this.OnONDUTYDEPTChanging(value);
                    this.RaiseDataMemberChanging("ONDUTYDEPT");
                    this.ValidateProperty("ONDUTYDEPT", value);
                    this._ondutydept = value;
                    this.RaiseDataMemberChanged("ONDUTYDEPT");
                    this.OnONDUTYDEPTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONDUTYLEADER”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string ONDUTYLEADER
        {
            get
            {
                return this._ondutyleader;
            }
            set
            {
                if ((this._ondutyleader != value))
                {
                    this.OnONDUTYLEADERChanging(value);
                    this.RaiseDataMemberChanging("ONDUTYLEADER");
                    this.ValidateProperty("ONDUTYLEADER", value);
                    this._ondutyleader = value;
                    this.RaiseDataMemberChanged("ONDUTYLEADER");
                    this.OnONDUTYLEADERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PLANID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal PLANID
        {
            get
            {
                return this._planid;
            }
            set
            {
                if ((this._planid != value))
                {
                    this.OnPLANIDChanging(value);
                    this.ValidateProperty("PLANID", value);
                    this._planid = value;
                    this.RaisePropertyChanged("PLANID");
                    this.OnPLANIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PLANTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PLANTIME
        {
            get
            {
                return this._plantime;
            }
            set
            {
                if ((this._plantime != value))
                {
                    this.OnPLANTIMEChanging(value);
                    this.RaiseDataMemberChanging("PLANTIME");
                    this.ValidateProperty("PLANTIME", value);
                    this._plantime = value;
                    this.RaiseDataMemberChanged("PLANTIME");
                    this.OnPLANTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PLANUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PLANUSERID
        {
            get
            {
                return this._planuserid;
            }
            set
            {
                if ((this._planuserid != value))
                {
                    this.OnPLANUSERIDChanging(value);
                    this.RaiseDataMemberChanging("PLANUSERID");
                    this.ValidateProperty("PLANUSERID", value);
                    this._planuserid = value;
                    this.RaiseDataMemberChanged("PLANUSERID");
                    this.OnPLANUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> STARTDATE
        {
            get
            {
                return this._startdate;
            }
            set
            {
                if ((this._startdate != value))
                {
                    this.OnSTARTDATEChanging(value);
                    this.RaiseDataMemberChanging("STARTDATE");
                    this.ValidateProperty("STARTDATE", value);
                    this._startdate = value;
                    this.RaiseDataMemberChanged("STARTDATE");
                    this.OnSTARTDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._planid;
        }
    }
    
    /// <summary>
    /// “MAPINFO”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class MAPINFO : Entity
    {
        
        private string _contain;
        
        private Nullable<DateTime> _createtime;
        
        private string _elementaddress;
        
        private string _elementid;
        
        private decimal _id;
        
        private Nullable<decimal> _layerid;
        
        private string _longlat;
        
        private Nullable<decimal> _maptype;
        
        private Nullable<decimal> _state;
        
        private Nullable<decimal> _userid;
        
        private string _valuedate;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTAINChanging(string value);
        partial void OnCONTAINChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnELEMENTADDRESSChanging(string value);
        partial void OnELEMENTADDRESSChanged();
        partial void OnELEMENTIDChanging(string value);
        partial void OnELEMENTIDChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnLAYERIDChanging(Nullable<decimal> value);
        partial void OnLAYERIDChanged();
        partial void OnLONGLATChanging(string value);
        partial void OnLONGLATChanged();
        partial void OnMAPTYPEChanging(Nullable<decimal> value);
        partial void OnMAPTYPEChanged();
        partial void OnSTATEChanging(Nullable<decimal> value);
        partial void OnSTATEChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnVALUEDATEChanging(string value);
        partial void OnVALUEDATEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="MAPINFO"/> 类的新实例。
        /// </summary>
        public MAPINFO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONTAIN”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string CONTAIN
        {
            get
            {
                return this._contain;
            }
            set
            {
                if ((this._contain != value))
                {
                    this.OnCONTAINChanging(value);
                    this.RaiseDataMemberChanging("CONTAIN");
                    this.ValidateProperty("CONTAIN", value);
                    this._contain = value;
                    this.RaiseDataMemberChanged("CONTAIN");
                    this.OnCONTAINChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ELEMENTADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ELEMENTADDRESS
        {
            get
            {
                return this._elementaddress;
            }
            set
            {
                if ((this._elementaddress != value))
                {
                    this.OnELEMENTADDRESSChanging(value);
                    this.RaiseDataMemberChanging("ELEMENTADDRESS");
                    this.ValidateProperty("ELEMENTADDRESS", value);
                    this._elementaddress = value;
                    this.RaiseDataMemberChanged("ELEMENTADDRESS");
                    this.OnELEMENTADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ELEMENTID”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ELEMENTID
        {
            get
            {
                return this._elementid;
            }
            set
            {
                if ((this._elementid != value))
                {
                    this.OnELEMENTIDChanging(value);
                    this.RaiseDataMemberChanging("ELEMENTID");
                    this.ValidateProperty("ELEMENTID", value);
                    this._elementid = value;
                    this.RaiseDataMemberChanged("ELEMENTID");
                    this.OnELEMENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAYERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAYERID
        {
            get
            {
                return this._layerid;
            }
            set
            {
                if ((this._layerid != value))
                {
                    this.OnLAYERIDChanging(value);
                    this.RaiseDataMemberChanging("LAYERID");
                    this.ValidateProperty("LAYERID", value);
                    this._layerid = value;
                    this.RaiseDataMemberChanged("LAYERID");
                    this.OnLAYERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LONGLAT”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string LONGLAT
        {
            get
            {
                return this._longlat;
            }
            set
            {
                if ((this._longlat != value))
                {
                    this.OnLONGLATChanging(value);
                    this.RaiseDataMemberChanging("LONGLAT");
                    this.ValidateProperty("LONGLAT", value);
                    this._longlat = value;
                    this.RaiseDataMemberChanged("LONGLAT");
                    this.OnLONGLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MAPTYPE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> MAPTYPE
        {
            get
            {
                return this._maptype;
            }
            set
            {
                if ((this._maptype != value))
                {
                    this.OnMAPTYPEChanging(value);
                    this.RaiseDataMemberChanging("MAPTYPE");
                    this.ValidateProperty("MAPTYPE", value);
                    this._maptype = value;
                    this.RaiseDataMemberChanged("MAPTYPE");
                    this.OnMAPTYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATE
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnSTATEChanging(value);
                    this.RaiseDataMemberChanging("STATE");
                    this.ValidateProperty("STATE", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("STATE");
                    this.OnSTATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VALUEDATE”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string VALUEDATE
        {
            get
            {
                return this._valuedate;
            }
            set
            {
                if ((this._valuedate != value))
                {
                    this.OnVALUEDATEChanging(value);
                    this.RaiseDataMemberChanging("VALUEDATE");
                    this.ValidateProperty("VALUEDATE", value);
                    this._valuedate = value;
                    this.RaiseDataMemberChanged("VALUEDATE");
                    this.OnVALUEDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “MENU”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class MENU : Entity
    {
        
        private Nullable<decimal> _appid;
        
        private string _icon;
        
        private string _menucode;
        
        private decimal _menuid;
        
        private string _name;
        
        private Nullable<decimal> _parentid;
        
        private Nullable<decimal> _seqno;
        
        private string _url;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAPPIDChanging(Nullable<decimal> value);
        partial void OnAPPIDChanged();
        partial void OnICONChanging(string value);
        partial void OnICONChanged();
        partial void OnMENUCODEChanging(string value);
        partial void OnMENUCODEChanged();
        partial void OnMENUIDChanging(decimal value);
        partial void OnMENUIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnURLChanging(string value);
        partial void OnURLChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="MENU"/> 类的新实例。
        /// </summary>
        public MENU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“APPID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> APPID
        {
            get
            {
                return this._appid;
            }
            set
            {
                if ((this._appid != value))
                {
                    this.OnAPPIDChanging(value);
                    this.RaiseDataMemberChanging("APPID");
                    this.ValidateProperty("APPID", value);
                    this._appid = value;
                    this.RaiseDataMemberChanged("APPID");
                    this.OnAPPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ICON”值。
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string ICON
        {
            get
            {
                return this._icon;
            }
            set
            {
                if ((this._icon != value))
                {
                    this.OnICONChanging(value);
                    this.RaiseDataMemberChanging("ICON");
                    this.ValidateProperty("ICON", value);
                    this._icon = value;
                    this.RaiseDataMemberChanged("ICON");
                    this.OnICONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MENUCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string MENUCODE
        {
            get
            {
                return this._menucode;
            }
            set
            {
                if ((this._menucode != value))
                {
                    this.OnMENUCODEChanging(value);
                    this.RaiseDataMemberChanging("MENUCODE");
                    this.ValidateProperty("MENUCODE", value);
                    this._menucode = value;
                    this.RaiseDataMemberChanged("MENUCODE");
                    this.OnMENUCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MENUID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal MENUID
        {
            get
            {
                return this._menuid;
            }
            set
            {
                if ((this._menuid != value))
                {
                    this.OnMENUIDChanging(value);
                    this.ValidateProperty("MENUID", value);
                    this._menuid = value;
                    this.RaisePropertyChanged("MENUID");
                    this.OnMENUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“URL”值。
        /// </summary>
        [DataMember()]
        [StringLength(120)]
        public string URL
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnURLChanging(value);
                    this.RaiseDataMemberChanging("URL");
                    this.ValidateProperty("URL", value);
                    this._url = value;
                    this.RaiseDataMemberChanged("URL");
                    this.OnURLChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._menuid;
        }
    }
    
    /// <summary>
    /// “MESSAGE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class MESSAGE : Entity
    {
        
        private string _content;
        
        private Nullable<DateTime> _createdtime;
        
        private Nullable<decimal> _fromuserid;
        
        private decimal _isdeleted;
        
        private decimal _messageid;
        
        private Nullable<DateTime> _readtime;
        
        private string _sendchannels;
        
        private string _smsnumber;
        
        private string _title;
        
        private Nullable<decimal> _touserid;
        
        private Nullable<decimal> _typeid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnFROMUSERIDChanging(Nullable<decimal> value);
        partial void OnFROMUSERIDChanged();
        partial void OnISDELETEDChanging(decimal value);
        partial void OnISDELETEDChanged();
        partial void OnMESSAGEIDChanging(decimal value);
        partial void OnMESSAGEIDChanged();
        partial void OnREADTIMEChanging(Nullable<DateTime> value);
        partial void OnREADTIMEChanged();
        partial void OnSENDCHANNELSChanging(string value);
        partial void OnSENDCHANNELSChanged();
        partial void OnSMSNUMBERChanging(string value);
        partial void OnSMSNUMBERChanged();
        partial void OnTITLEChanging(string value);
        partial void OnTITLEChanged();
        partial void OnTOUSERIDChanging(Nullable<decimal> value);
        partial void OnTOUSERIDChanged();
        partial void OnTYPEIDChanging(Nullable<decimal> value);
        partial void OnTYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="MESSAGE"/> 类的新实例。
        /// </summary>
        public MESSAGE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FROMUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FROMUSERID
        {
            get
            {
                return this._fromuserid;
            }
            set
            {
                if ((this._fromuserid != value))
                {
                    this.OnFROMUSERIDChanging(value);
                    this.RaiseDataMemberChanging("FROMUSERID");
                    this.ValidateProperty("FROMUSERID", value);
                    this._fromuserid = value;
                    this.RaiseDataMemberChanged("FROMUSERID");
                    this.OnFROMUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISDELETED”值。
        /// </summary>
        [DataMember()]
        public decimal ISDELETED
        {
            get
            {
                return this._isdeleted;
            }
            set
            {
                if ((this._isdeleted != value))
                {
                    this.OnISDELETEDChanging(value);
                    this.RaiseDataMemberChanging("ISDELETED");
                    this.ValidateProperty("ISDELETED", value);
                    this._isdeleted = value;
                    this.RaiseDataMemberChanged("ISDELETED");
                    this.OnISDELETEDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MESSAGEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal MESSAGEID
        {
            get
            {
                return this._messageid;
            }
            set
            {
                if ((this._messageid != value))
                {
                    this.OnMESSAGEIDChanging(value);
                    this.ValidateProperty("MESSAGEID", value);
                    this._messageid = value;
                    this.RaisePropertyChanged("MESSAGEID");
                    this.OnMESSAGEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“READTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> READTIME
        {
            get
            {
                return this._readtime;
            }
            set
            {
                if ((this._readtime != value))
                {
                    this.OnREADTIMEChanging(value);
                    this.RaiseDataMemberChanging("READTIME");
                    this.ValidateProperty("READTIME", value);
                    this._readtime = value;
                    this.RaiseDataMemberChanged("READTIME");
                    this.OnREADTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SENDCHANNELS”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string SENDCHANNELS
        {
            get
            {
                return this._sendchannels;
            }
            set
            {
                if ((this._sendchannels != value))
                {
                    this.OnSENDCHANNELSChanging(value);
                    this.RaiseDataMemberChanging("SENDCHANNELS");
                    this.ValidateProperty("SENDCHANNELS", value);
                    this._sendchannels = value;
                    this.RaiseDataMemberChanged("SENDCHANNELS");
                    this.OnSENDCHANNELSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SMSNUMBER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SMSNUMBER
        {
            get
            {
                return this._smsnumber;
            }
            set
            {
                if ((this._smsnumber != value))
                {
                    this.OnSMSNUMBERChanging(value);
                    this.RaiseDataMemberChanging("SMSNUMBER");
                    this.ValidateProperty("SMSNUMBER", value);
                    this._smsnumber = value;
                    this.RaiseDataMemberChanged("SMSNUMBER");
                    this.OnSMSNUMBERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string TITLE
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTITLEChanging(value);
                    this.RaiseDataMemberChanging("TITLE");
                    this.ValidateProperty("TITLE", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("TITLE");
                    this.OnTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TOUSERID
        {
            get
            {
                return this._touserid;
            }
            set
            {
                if ((this._touserid != value))
                {
                    this.OnTOUSERIDChanging(value);
                    this.RaiseDataMemberChanging("TOUSERID");
                    this.ValidateProperty("TOUSERID", value);
                    this._touserid = value;
                    this.RaiseDataMemberChanged("TOUSERID");
                    this.OnTOUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("TYPEID");
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaiseDataMemberChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._messageid;
        }
    }
    
    /// <summary>
    /// “MESSAGETOUSER”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class MESSAGETOUSER : Entity
    {
        
        private decimal _messageid;
        
        private decimal _userid;
        
        private decimal _usertypeid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnMESSAGEIDChanging(decimal value);
        partial void OnMESSAGEIDChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();
        partial void OnUSERTYPEIDChanging(decimal value);
        partial void OnUSERTYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="MESSAGETOUSER"/> 类的新实例。
        /// </summary>
        public MESSAGETOUSER()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“MESSAGEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal MESSAGEID
        {
            get
            {
                return this._messageid;
            }
            set
            {
                if ((this._messageid != value))
                {
                    this.OnMESSAGEIDChanging(value);
                    this.ValidateProperty("MESSAGEID", value);
                    this._messageid = value;
                    this.RaisePropertyChanged("MESSAGEID");
                    this.OnMESSAGEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaisePropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERTYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERTYPEID
        {
            get
            {
                return this._usertypeid;
            }
            set
            {
                if ((this._usertypeid != value))
                {
                    this.OnUSERTYPEIDChanging(value);
                    this.ValidateProperty("USERTYPEID", value);
                    this._usertypeid = value;
                    this.RaisePropertyChanged("USERTYPEID");
                    this.OnUSERTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._messageid, this._userid, this._usertypeid);
        }
    }
    
    /// <summary>
    /// 与“NEWPLEDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class NEWPLEDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="NEWPLEDomainContext"/> 类的新实例。
        /// </summary>
        public NEWPLEDomainContext() : 
                this(new WebDomainClient<INEWPLEDomainServiceContract>(new Uri("Taizhou-PLE-LawCom-Web-NEWPLEDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="NEWPLEDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">NEWPLEDomainService 服务 URI。</param>
        public NEWPLEDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<INEWPLEDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="NEWPLEDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public NEWPLEDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACITIVITYDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACITIVITYDEFINITION> ACITIVITYDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACITIVITYDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACTIVITYDEFINITIONDOCPHAS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACTIVITYDEFINITIONDOCPHAS> ACTIVITYDEFINITIONDOCPHAS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACTIVITYDEFINITIONDOCPHAS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACTIVITYINSTANCE> ACTIVITYINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACTIVITYINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACTIVITYPERMISSION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACTIVITYPERMISSION> ACTIVITYPERMISSIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACTIVITYPERMISSION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACTIVITYPERMISSIONTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACTIVITYPERMISSIONTYPE> ACTIVITYPERMISSIONTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACTIVITYPERMISSIONTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ACTIVITYSTATUS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ACTIVITYSTATUS> ACTIVITYSTATUS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ACTIVITYSTATUS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="Car"/> 实体实例的集合。
        /// </summary>
        public EntitySet<Car> Cars
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Car>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="EventLaw"/> 实体实例的集合。
        /// </summary>
        public EntitySet<EventLaw> EventLaws
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EventLaw>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="Person"/> 实体实例的集合。
        /// </summary>
        public EntitySet<Person> Persons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Person>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="Unit"/> 实体实例的集合。
        /// </summary>
        public EntitySet<Unit> Units
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Unit>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPWFIST"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPWFIST> XZSPWFISTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPWFIST>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="WORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<WORKFLOWINSTANCE> WORKFLOWINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WORKFLOWINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="APPVERSION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<APPVERSION> APPVERSIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<APPVERSION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ARTICLE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ARTICLE> ARTICLEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ARTICLE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFGKCARHISTORYPOSITION> ZFGKCARHISTORYPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFGKCARHISTORYPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CARSYNCPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CARSYNCPOSITION> CARSYNCPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CARSYNCPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CARTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CARTYPE> CARTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CARTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CASEPHONESMS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CASEPHONESMS> CASEPHONESMS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CASEPHONESMS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CASESOURCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CASESOURCE> CASESOURCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CASESOURCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CONSTRSITE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CONSTRSITE> CONSTRSITEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CONSTRSITE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CONTACT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CONTACT> CONTACTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CONTACT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="CONTACTSGROUP"/> 实体实例的集合。
        /// </summary>
        public EntitySet<CONTACTSGROUP> CONTACTSGROUPs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CONTACTSGROUP>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="DOCDEFINITIONRELATION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<DOCDEFINITIONRELATION> DOCDEFINITIONRELATIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DOCDEFINITIONRELATION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="DOCDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<DOCDEFINITION> DOCDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DOCDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="DOCINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<DOCINSTANCE> DOCINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DOCINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="DOCPHAS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<DOCPHAS> DOCPHAS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DOCPHAS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="DUMPINGSITE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<DUMPINGSITE> DUMPINGSITEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DUMPINGSITE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="FUNCTION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<FUNCTION> FUNCTIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FUNCTION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWCASENAME"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWCASENAME> GGFWCASENAMEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWCASENAME>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWEVENT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWEVENT> GGFWEVENTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWEVENT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWMONTHLYREPORT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWMONTHLYREPORT> GGFWMONTHLYREPORTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWMONTHLYREPORT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWSOURCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWSOURCE> GGFWSOURCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWSOURCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWSTATUE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWSTATUE> GGFWSTATUEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWSTATUE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWTOZFZD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWTOZFZD> GGFWTOZFZDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWTOZFZD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GGFWXFDOC"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GGFWXFDOC> GGFWXFDOCs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GGFWXFDOC>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="GROUP"/> 实体实例的集合。
        /// </summary>
        public EntitySet<GROUP> GROUPs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GROUP>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ILLEGALCLASS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ILLEGALCLASS> ILLEGALCLASSes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ILLEGALCLASS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ILLEGALITEM"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ILLEGALITEM> ILLEGALITEMs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ILLEGALITEM>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="LAYERTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<LAYERTYPE> LAYERTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LAYERTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="LEADERWEEKWORKPLAN"/> 实体实例的集合。
        /// </summary>
        public EntitySet<LEADERWEEKWORKPLAN> LEADERWEEKWORKPLANs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LEADERWEEKWORKPLAN>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="MAPINFO"/> 实体实例的集合。
        /// </summary>
        public EntitySet<MAPINFO> MAPINFOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MAPINFO>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="MENU"/> 实体实例的集合。
        /// </summary>
        public EntitySet<MENU> MENUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MENU>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="MESSAGE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<MESSAGE> MESSAGEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MESSAGE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="MESSAGETOUSER"/> 实体实例的集合。
        /// </summary>
        public EntitySet<MESSAGETOUSER> MESSAGETOUSERs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MESSAGETOUSER>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ONDUTy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ONDUTy> ONDUTies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ONDUTy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XCJGAREA"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XCJGAREA> XCJGAREAs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XCJGAREA>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XCJGROUTE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XCJGROUTE> XCJGROUTEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XCJGROUTE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFGKUSERHISTORYPOSITION> ZFGKUSERHISTORYPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFGKUSERHISTORYPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="PHONEERROR"/> 实体实例的集合。
        /// </summary>
        public EntitySet<PHONEERROR> PHONEERRORs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PHONEERROR>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="PORTALCATEGORy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<PORTALCATEGORy> PORTALCATEGORies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PORTALCATEGORy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="QUESTIONID"/> 实体实例的集合。
        /// </summary>
        public EntitySet<QUESTIONID> QUESTIONIDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<QUESTIONID>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="QUESTIONLIST"/> 实体实例的集合。
        /// </summary>
        public EntitySet<QUESTIONLIST> QUESTIONLISTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<QUESTIONLIST>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="RCDCEVENT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<RCDCEVENT> RCDCEVENTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RCDCEVENT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="RCDCTOZFZD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<RCDCTOZFZD> RCDCTOZFZDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RCDCTOZFZD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="RECIPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<RECIPE> RECIPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RECIPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ROLEFUNCTION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ROLEFUNCTION> ROLEFUNCTIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ROLEFUNCTION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ROLEMENU"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ROLEMENU> ROLEMENUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ROLEMENU>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ROLE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ROLE> ROLEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ROLE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SCHEDULE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SCHEDULE> SCHEDULEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SCHEDULE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SCHEDULETYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SCHEDULETYPE> SCHEDULETYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SCHEDULETYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SIMPLECASEPICTURE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SIMPLECASEPICTURE> SIMPLECASEPICTUREs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIMPLECASEPICTURE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SIMPLECAS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SIMPLECAS> SIMPLECAS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SIMPLECAS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SINGNIN"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SINGNIN> SINGNINs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SINGNIN>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SPECIALACTIVITICE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SPECIALACTIVITICE> SPECIALACTIVITICEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SPECIALACTIVITICE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SPECIALACTIVITYDEFINITON"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SPECIALACTIVITYDEFINITON> SPECIALACTIVITYDEFINITONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SPECIALACTIVITYDEFINITON>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SPECIALTOZFSJ"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SPECIALTOZFSJ> SPECIALTOZFSJs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SPECIALTOZFSJ>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<SPECIALWORKFLOWINSTANCE> SPECIALWORKFLOWINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SPECIALWORKFLOWINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREESTORE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREESTORE> STREESTOREs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREESTORE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREESTORETYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREESTORETYPE> STREESTORETYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREESTORETYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETASSESSMENTTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETASSESSMENTTYPE> STREETASSESSMENTTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETASSESSMENTTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETBAS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETBAS> STREETBAS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETBAS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETEXAMINE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETEXAMINE> STREETEXAMINEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETEXAMINE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETPROBLEM"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETPROBLEM> STREETPROBLEMs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETPROBLEM>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREET"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREET> STREETs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREET>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETTYPE> STREETTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="STREETUSER"/> 实体实例的集合。
        /// </summary>
        public EntitySet<STREETUSER> STREETUSERs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<STREETUSER>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TABLE1"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TABLE1> TABLE1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TABLE1>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TJGHZF"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TJGHZF> TJGHZFs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TJGHZF>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSLICENSECARCOMPANy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSLICENSECARCOMPANy> TRANSLICENSECARCOMPANies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSLICENSECARCOMPANy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSLICENSECAR"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSLICENSECAR> TRANSLICENSECARs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSLICENSECAR>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSLICENSEROAD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSLICENSEROAD> TRANSLICENSEROADs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSLICENSEROAD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSLICENS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSLICENS> TRANSLICENS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSLICENS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSRECORD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSRECORD> TRANSRECORDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSRECORD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="TRANSROAD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TRANSROAD> TRANSROADs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TRANSROAD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="UNIT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<UNIT> UNITs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UNIT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="UNITTYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<UNITTYPE> UNITTYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UNITTYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERARCHIVE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERARCHIVE> USERARCHIVEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERARCHIVE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERCATEGORy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERCATEGORy> USERCATEGORies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERCATEGORy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERGROUP"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERGROUP> USERGROUPs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERGROUP>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERONDUTy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERONDUTy> USERONDUTies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERONDUTy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERPHONESIGNIN"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERPHONESIGNIN> USERPHONESIGNINs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERPHONESIGNIN>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERPOSITION> USERPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERROLE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERROLE> USERROLEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERROLE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USER"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USER> USERs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USER>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="USERS_DEL"/> 实体实例的集合。
        /// </summary>
        public EntitySet<USERS_DEL> USERS_DELs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<USERS_DEL>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="WORKFLOWDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<WORKFLOWDEFINITION> WORKFLOWDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WORKFLOWDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="WORKFLOWPEROPERTy"/> 实体实例的集合。
        /// </summary>
        public EntitySet<WORKFLOWPEROPERTy> WORKFLOWPEROPERTies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WORKFLOWPEROPERTy>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="WORKFLOWSTATUS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<WORKFLOWSTATUS> WORKFLOWSTATUS
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WORKFLOWSTATUS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="WTUSERRELATION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<WTUSERRELATION> WTUSERRELATIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WTUSERRELATION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XCJGCARTASK"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XCJGCARTASK> XCJGCARTASKs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XCJGCARTASK>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XCJGSIGNIN"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XCJGSIGNIN> XCJGSIGNINs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XCJGSIGNIN>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XCJGUSERTASK"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XCJGUSERTASK> XCJGUSERTASKs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XCJGUSERTASK>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPACTDEF"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPACTDEF> XZSPACTDEFs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPACTDEF>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPACTIST"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPACTIST> XZSPACTISTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPACTIST>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPACTISTS_DELETE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPACTISTS_DELETE> XZSPACTISTS_DELETEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPACTISTS_DELETE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPACTISTS_DELETE1"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPACTISTS_DELETE1> XZSPACTISTS_DELETE1s
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPACTISTS_DELETE1>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPACTIVITYDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPACTIVITYDEFINITION> XZSPACTIVITYDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPACTIVITYDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPAPPROVALPROJECT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPAPPROVALPROJECT> XZSPAPPROVALPROJECTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPAPPROVALPROJECT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPKZHC"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPKZHC> XZSPKZHCs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPKZHC>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPNEWACTIVITYDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPNEWACTIVITYDEFINITION> XZSPNEWACTIVITYDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPNEWACTIVITYDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPNEWTAB"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPNEWTAB> XZSPNEWTABs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPNEWTAB>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPNEWWORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPNEWWORKFLOWINSTANCE> XZSPNEWWORKFLOWINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPNEWWORKFLOWINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPPROJECTNAME"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPPROJECTNAME> XZSPPROJECTNAMEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPPROJECTNAME>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPSTU"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPSTU> XZSPSTUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPSTU>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPWFDEF"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPWFDEF> XZSPWFDEFs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPWFDEF>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZSPWFISTS_DELETE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZSPWFISTS_DELETE> XZSPWFISTS_DELETEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZSPWFISTS_DELETE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZZFLISTSH"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZZFLISTSH> XZZFLISTSHes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZZFLISTSH>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZZFQUESTIONCLASS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZZFQUESTIONCLASS> XZZFQUESTIONCLASSes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZZFQUESTIONCLASS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="XZZFTABLIST"/> 实体实例的集合。
        /// </summary>
        public EntitySet<XZZFTABLIST> XZZFTABLISTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XZZFTABLIST>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZBRZLIST"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZBRZLIST> ZBRZLISTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZBRZLIST>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFGKCARLATESTPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFGKCARLATESTPOSITION> ZFGKCARLATESTPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFGKCARLATESTPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFGKCAR"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFGKCAR> ZFGKCARs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFGKCAR>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFGKUSERLATESTPOSITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFGKUSERLATESTPOSITION> ZFGKUSERLATESTPOSITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFGKUSERLATESTPOSITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJACTIVITYDEFINITION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJACTIVITYDEFINITION> ZFSJACTIVITYDEFINITIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJACTIVITYDEFINITION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJACTIVITYINSTANCE> ZFSJACTIVITYINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJACTIVITYINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJCHARTBYQL"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJCHARTBYQL> ZFSJCHARTBYQLs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJCHARTBYQL>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJCHECKWAY"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJCHECKWAY> ZFSJCHECKWAYs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJCHECKWAY>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJPROCESSWAY"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJPROCESSWAY> ZFSJPROCESSWAYs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJPROCESSWAY>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJQUESTIONCLASS"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJQUESTIONCLASS> ZFSJQUESTIONCLASSes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJQUESTIONCLASS>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJSOURCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJSOURCE> ZFSJSOURCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJSOURCE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJSTATU"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJSTATU> ZFSJSTATUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJSTATU>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJSUMMARYINFORMATION"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJSUMMARYINFORMATION> ZFSJSUMMARYINFORMATIONs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJSUMMARYINFORMATION>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJTIMELIMIT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJTIMELIMIT> ZFSJTIMELIMITs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJTIMELIMIT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="NEWPLEDomainContext"/> 实例中的 <see cref="ZFSJWORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<ZFSJWORKFLOWINSTANCE> ZFSJWORKFLOWINSTANCEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZFSJWORKFLOWINSTANCE>();
            }
        }
        
        /// <summary>
        /// 获取一个可使用“GetACITIVITYDEFINITIONS”查询加载 <see cref="ACITIVITYDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACITIVITYDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACITIVITYDEFINITION> GetACITIVITYDEFINITIONSQuery()
        {
            this.ValidateMethod("GetACITIVITYDEFINITIONSQuery", null);
            return base.CreateQuery<ACITIVITYDEFINITION>("GetACITIVITYDEFINITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetACTIVITYDEFINITIONDOCPHASES”查询加载 <see cref="ACTIVITYDEFINITIONDOCPHAS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACTIVITYDEFINITIONDOCPHAS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACTIVITYDEFINITIONDOCPHAS> GetACTIVITYDEFINITIONDOCPHASESQuery()
        {
            this.ValidateMethod("GetACTIVITYDEFINITIONDOCPHASESQuery", null);
            return base.CreateQuery<ACTIVITYDEFINITIONDOCPHAS>("GetACTIVITYDEFINITIONDOCPHASES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetACTIVITYINSTANCES”查询加载 <see cref="ACTIVITYINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACTIVITYINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACTIVITYINSTANCE> GetACTIVITYINSTANCESQuery()
        {
            this.ValidateMethod("GetACTIVITYINSTANCESQuery", null);
            return base.CreateQuery<ACTIVITYINSTANCE>("GetACTIVITYINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetACTIVITYPERMISSIONS”查询加载 <see cref="ACTIVITYPERMISSION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACTIVITYPERMISSION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACTIVITYPERMISSION> GetACTIVITYPERMISSIONSQuery()
        {
            this.ValidateMethod("GetACTIVITYPERMISSIONSQuery", null);
            return base.CreateQuery<ACTIVITYPERMISSION>("GetACTIVITYPERMISSIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetACTIVITYPERMISSIONTYPES”查询加载 <see cref="ACTIVITYPERMISSIONTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACTIVITYPERMISSIONTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACTIVITYPERMISSIONTYPE> GetACTIVITYPERMISSIONTYPESQuery()
        {
            this.ValidateMethod("GetACTIVITYPERMISSIONTYPESQuery", null);
            return base.CreateQuery<ACTIVITYPERMISSIONTYPE>("GetACTIVITYPERMISSIONTYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetACTIVITYSTATUSES”查询加载 <see cref="ACTIVITYSTATUS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ACTIVITYSTATUS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ACTIVITYSTATUS> GetACTIVITYSTATUSESQuery()
        {
            this.ValidateMethod("GetACTIVITYSTATUSESQuery", null);
            return base.CreateQuery<ACTIVITYSTATUS>("GetACTIVITYSTATUSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllCars”查询加载 <see cref="Car"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Car"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Car> GetAllCarsQuery()
        {
            this.ValidateMethod("GetAllCarsQuery", null);
            return base.CreateQuery<Car>("GetAllCars", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllEventLaws”查询加载 <see cref="EventLaw"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="EventLaw"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<EventLaw> GetAllEventLawsQuery()
        {
            this.ValidateMethod("GetAllEventLawsQuery", null);
            return base.CreateQuery<EventLaw>("GetAllEventLaws", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllPersons”查询加载 <see cref="Person"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Person"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Person> GetAllPersonsQuery()
        {
            this.ValidateMethod("GetAllPersonsQuery", null);
            return base.CreateQuery<Person>("GetAllPersons", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllUnits”查询加载 <see cref="Unit"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Unit"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Unit> GetAllUnitsQuery()
        {
            this.ValidateMethod("GetAllUnitsQuery", null);
            return base.CreateQuery<Unit>("GetAllUnits", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllUnits4EventLaws”查询加载 <see cref="Unit"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Unit"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Unit> GetAllUnits4EventLawsQuery()
        {
            this.ValidateMethod("GetAllUnits4EventLawsQuery", null);
            return base.CreateQuery<Unit>("GetAllUnits4EventLaws", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllUnits4LawCars”查询加载 <see cref="Unit"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Unit"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Unit> GetAllUnits4LawCarsQuery()
        {
            this.ValidateMethod("GetAllUnits4LawCarsQuery", null);
            return base.CreateQuery<Unit>("GetAllUnits4LawCars", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllXZSP”查询加载 <see cref="XZSPWFIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPWFIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPWFIST> GetAllXZSPQuery()
        {
            this.ValidateMethod("GetAllXZSPQuery", null);
            return base.CreateQuery<XZSPWFIST>("GetAllXZSP", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAllZFAJ”查询加载 <see cref="WORKFLOWINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WORKFLOWINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WORKFLOWINSTANCE> GetAllZFAJQuery()
        {
            this.ValidateMethod("GetAllZFAJQuery", null);
            return base.CreateQuery<WORKFLOWINSTANCE>("GetAllZFAJ", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetAPPVERSIONS”查询加载 <see cref="APPVERSION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="APPVERSION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<APPVERSION> GetAPPVERSIONSQuery()
        {
            this.ValidateMethod("GetAPPVERSIONSQuery", null);
            return base.CreateQuery<APPVERSION>("GetAPPVERSIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetARTICLES”查询加载 <see cref="ARTICLE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ARTICLE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ARTICLE> GetARTICLESQuery()
        {
            this.ValidateMethod("GetARTICLESQuery", null);
            return base.CreateQuery<ARTICLE>("GetARTICLES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCarHistoryPositionsByCarID”查询加载 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="CarID">查询的“CarID”参数的值。</param>
        /// <param name="startTime">查询的“startTime”参数的值。</param>
        /// <param name="endTime">查询的“endTime”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKCARHISTORYPOSITION> GetCarHistoryPositionsByCarIDQuery(decimal CarID, DateTime startTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CarID", CarID);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetCarHistoryPositionsByCarIDQuery", parameters);
            return base.CreateQuery<ZFGKCARHISTORYPOSITION>("GetCarHistoryPositionsByCarID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCARSYNCPOSITIONS”查询加载 <see cref="CARSYNCPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CARSYNCPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CARSYNCPOSITION> GetCARSYNCPOSITIONSQuery()
        {
            this.ValidateMethod("GetCARSYNCPOSITIONSQuery", null);
            return base.CreateQuery<CARSYNCPOSITION>("GetCARSYNCPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCARTYPES”查询加载 <see cref="CARTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CARTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CARTYPE> GetCARTYPESQuery()
        {
            this.ValidateMethod("GetCARTYPESQuery", null);
            return base.CreateQuery<CARTYPE>("GetCARTYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCASEPHONESMSES”查询加载 <see cref="CASEPHONESMS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CASEPHONESMS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CASEPHONESMS> GetCASEPHONESMSESQuery()
        {
            this.ValidateMethod("GetCASEPHONESMSESQuery", null);
            return base.CreateQuery<CASEPHONESMS>("GetCASEPHONESMSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCASESOURCES”查询加载 <see cref="CASESOURCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CASESOURCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CASESOURCE> GetCASESOURCESQuery()
        {
            this.ValidateMethod("GetCASESOURCESQuery", null);
            return base.CreateQuery<CASESOURCE>("GetCASESOURCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCONSTRSITES”查询加载 <see cref="CONSTRSITE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CONSTRSITE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CONSTRSITE> GetCONSTRSITESQuery()
        {
            this.ValidateMethod("GetCONSTRSITESQuery", null);
            return base.CreateQuery<CONSTRSITE>("GetCONSTRSITES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCONTACTS”查询加载 <see cref="CONTACT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CONTACT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CONTACT> GetCONTACTSQuery()
        {
            this.ValidateMethod("GetCONTACTSQuery", null);
            return base.CreateQuery<CONTACT>("GetCONTACTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetCONTACTSGROUPS”查询加载 <see cref="CONTACTSGROUP"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="CONTACTSGROUP"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<CONTACTSGROUP> GetCONTACTSGROUPSQuery()
        {
            this.ValidateMethod("GetCONTACTSGROUPSQuery", null);
            return base.CreateQuery<CONTACTSGROUP>("GetCONTACTSGROUPS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetDOCDEFINITIONRELATIONS”查询加载 <see cref="DOCDEFINITIONRELATION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="DOCDEFINITIONRELATION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<DOCDEFINITIONRELATION> GetDOCDEFINITIONRELATIONSQuery()
        {
            this.ValidateMethod("GetDOCDEFINITIONRELATIONSQuery", null);
            return base.CreateQuery<DOCDEFINITIONRELATION>("GetDOCDEFINITIONRELATIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetDOCDEFINITIONS”查询加载 <see cref="DOCDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="DOCDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<DOCDEFINITION> GetDOCDEFINITIONSQuery()
        {
            this.ValidateMethod("GetDOCDEFINITIONSQuery", null);
            return base.CreateQuery<DOCDEFINITION>("GetDOCDEFINITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetDOCINSTANCES”查询加载 <see cref="DOCINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="DOCINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<DOCINSTANCE> GetDOCINSTANCESQuery()
        {
            this.ValidateMethod("GetDOCINSTANCESQuery", null);
            return base.CreateQuery<DOCINSTANCE>("GetDOCINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetDOCPHASES”查询加载 <see cref="DOCPHAS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="DOCPHAS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<DOCPHAS> GetDOCPHASESQuery()
        {
            this.ValidateMethod("GetDOCPHASESQuery", null);
            return base.CreateQuery<DOCPHAS>("GetDOCPHASES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetDUMPINGSITES”查询加载 <see cref="DUMPINGSITE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="DUMPINGSITE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<DUMPINGSITE> GetDUMPINGSITESQuery()
        {
            this.ValidateMethod("GetDUMPINGSITESQuery", null);
            return base.CreateQuery<DUMPINGSITE>("GetDUMPINGSITES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetFUNCTIONS”查询加载 <see cref="FUNCTION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="FUNCTION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<FUNCTION> GetFUNCTIONSQuery()
        {
            this.ValidateMethod("GetFUNCTIONSQuery", null);
            return base.CreateQuery<FUNCTION>("GetFUNCTIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWCASENAMES”查询加载 <see cref="GGFWCASENAME"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWCASENAME"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWCASENAME> GetGGFWCASENAMESQuery()
        {
            this.ValidateMethod("GetGGFWCASENAMESQuery", null);
            return base.CreateQuery<GGFWCASENAME>("GetGGFWCASENAMES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWEVENTS”查询加载 <see cref="GGFWEVENT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWEVENT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWEVENT> GetGGFWEVENTSQuery()
        {
            this.ValidateMethod("GetGGFWEVENTSQuery", null);
            return base.CreateQuery<GGFWEVENT>("GetGGFWEVENTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWMONTHLYREPORTS”查询加载 <see cref="GGFWMONTHLYREPORT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWMONTHLYREPORT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWMONTHLYREPORT> GetGGFWMONTHLYREPORTSQuery()
        {
            this.ValidateMethod("GetGGFWMONTHLYREPORTSQuery", null);
            return base.CreateQuery<GGFWMONTHLYREPORT>("GetGGFWMONTHLYREPORTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWSOURCES”查询加载 <see cref="GGFWSOURCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWSOURCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWSOURCE> GetGGFWSOURCESQuery()
        {
            this.ValidateMethod("GetGGFWSOURCESQuery", null);
            return base.CreateQuery<GGFWSOURCE>("GetGGFWSOURCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWSTATUES”查询加载 <see cref="GGFWSTATUE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWSTATUE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWSTATUE> GetGGFWSTATUESQuery()
        {
            this.ValidateMethod("GetGGFWSTATUESQuery", null);
            return base.CreateQuery<GGFWSTATUE>("GetGGFWSTATUES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWTOZFZDS”查询加载 <see cref="GGFWTOZFZD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWTOZFZD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWTOZFZD> GetGGFWTOZFZDSQuery()
        {
            this.ValidateMethod("GetGGFWTOZFZDSQuery", null);
            return base.CreateQuery<GGFWTOZFZD>("GetGGFWTOZFZDS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGGFWXFDOCS”查询加载 <see cref="GGFWXFDOC"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GGFWXFDOC"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GGFWXFDOC> GetGGFWXFDOCSQuery()
        {
            this.ValidateMethod("GetGGFWXFDOCSQuery", null);
            return base.CreateQuery<GGFWXFDOC>("GetGGFWXFDOCS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetGROUPS”查询加载 <see cref="GROUP"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="GROUP"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<GROUP> GetGROUPSQuery()
        {
            this.ValidateMethod("GetGROUPSQuery", null);
            return base.CreateQuery<GROUP>("GetGROUPS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetILLEGALCLASSES”查询加载 <see cref="ILLEGALCLASS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ILLEGALCLASS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ILLEGALCLASS> GetILLEGALCLASSESQuery()
        {
            this.ValidateMethod("GetILLEGALCLASSESQuery", null);
            return base.CreateQuery<ILLEGALCLASS>("GetILLEGALCLASSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetILLEGALITEMS”查询加载 <see cref="ILLEGALITEM"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ILLEGALITEM"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ILLEGALITEM> GetILLEGALITEMSQuery()
        {
            this.ValidateMethod("GetILLEGALITEMSQuery", null);
            return base.CreateQuery<ILLEGALITEM>("GetILLEGALITEMS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLatestCarByCarID”查询加载 <see cref="Car"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="CarID">查询的“CarID”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="Car"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Car> GetLatestCarByCarIDQuery(decimal CarID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CarID", CarID);
            this.ValidateMethod("GetLatestCarByCarIDQuery", parameters);
            return base.CreateQuery<Car>("GetLatestCarByCarID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLatestCars”查询加载 <see cref="Car"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Car"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Car> GetLatestCarsQuery()
        {
            this.ValidateMethod("GetLatestCarsQuery", null);
            return base.CreateQuery<Car>("GetLatestCars", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLatestPersonByUserID”查询加载 <see cref="Person"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="UserID">查询的“UserID”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="Person"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Person> GetLatestPersonByUserIDQuery(decimal UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetLatestPersonByUserIDQuery", parameters);
            return base.CreateQuery<Person>("GetLatestPersonByUserID", parameters, false, false);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLatestPersons”查询加载 <see cref="Person"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Person"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Person> GetLatestPersonsQuery()
        {
            this.ValidateMethod("GetLatestPersonsQuery", null);
            return base.CreateQuery<Person>("GetLatestPersons", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLAYERTYPEs”查询加载 <see cref="LAYERTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="LAYERTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<LAYERTYPE> GetLAYERTYPEsQuery()
        {
            this.ValidateMethod("GetLAYERTYPEsQuery", null);
            return base.CreateQuery<LAYERTYPE>("GetLAYERTYPEs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetLEADERWEEKWORKPLANS”查询加载 <see cref="LEADERWEEKWORKPLAN"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="LEADERWEEKWORKPLAN"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<LEADERWEEKWORKPLAN> GetLEADERWEEKWORKPLANSQuery()
        {
            this.ValidateMethod("GetLEADERWEEKWORKPLANSQuery", null);
            return base.CreateQuery<LEADERWEEKWORKPLAN>("GetLEADERWEEKWORKPLANS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetMAPINFOS”查询加载 <see cref="MAPINFO"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="MAPINFO"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<MAPINFO> GetMAPINFOSQuery()
        {
            this.ValidateMethod("GetMAPINFOSQuery", null);
            return base.CreateQuery<MAPINFO>("GetMAPINFOS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetMENUS”查询加载 <see cref="MENU"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="MENU"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<MENU> GetMENUSQuery()
        {
            this.ValidateMethod("GetMENUSQuery", null);
            return base.CreateQuery<MENU>("GetMENUS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetMESSAGES”查询加载 <see cref="MESSAGE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="MESSAGE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<MESSAGE> GetMESSAGESQuery()
        {
            this.ValidateMethod("GetMESSAGESQuery", null);
            return base.CreateQuery<MESSAGE>("GetMESSAGES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetMESSAGETOUSERS”查询加载 <see cref="MESSAGETOUSER"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="MESSAGETOUSER"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<MESSAGETOUSER> GetMESSAGETOUSERSQuery()
        {
            this.ValidateMethod("GetMESSAGETOUSERSQuery", null);
            return base.CreateQuery<MESSAGETOUSER>("GetMESSAGETOUSERS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetONDUTIES”查询加载 <see cref="ONDUTy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ONDUTy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ONDUTy> GetONDUTIESQuery()
        {
            this.ValidateMethod("GetONDUTIESQuery", null);
            return base.CreateQuery<ONDUTy>("GetONDUTIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPatrolAreasByCarID”查询加载 <see cref="XCJGAREA"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="CarID">查询的“CarID”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="XCJGAREA"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGAREA> GetPatrolAreasByCarIDQuery(decimal CarID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CarID", CarID);
            this.ValidateMethod("GetPatrolAreasByCarIDQuery", parameters);
            return base.CreateQuery<XCJGAREA>("GetPatrolAreasByCarID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPatrolAreasByUserID”查询加载 <see cref="XCJGAREA"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="UserID">查询的“UserID”参数的值。</param>
        /// <param name="Day">查询的“Day”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="XCJGAREA"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGAREA> GetPatrolAreasByUserIDQuery(decimal UserID, DateTime Day)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("Day", Day);
            this.ValidateMethod("GetPatrolAreasByUserIDQuery", parameters);
            return base.CreateQuery<XCJGAREA>("GetPatrolAreasByUserID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPatrolRoutesByCarID”查询加载 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="CarID">查询的“CarID”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGROUTE> GetPatrolRoutesByCarIDQuery(decimal CarID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CarID", CarID);
            this.ValidateMethod("GetPatrolRoutesByCarIDQuery", parameters);
            return base.CreateQuery<XCJGROUTE>("GetPatrolRoutesByCarID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPatrolRoutesByUserID”查询加载 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="UserID">查询的“UserID”参数的值。</param>
        /// <param name="Day">查询的“Day”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGROUTE> GetPatrolRoutesByUserIDQuery(decimal UserID, DateTime Day)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("Day", Day);
            this.ValidateMethod("GetPatrolRoutesByUserIDQuery", parameters);
            return base.CreateQuery<XCJGROUTE>("GetPatrolRoutesByUserID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPersonHistoryPosotionByUserID”查询加载 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="UserID">查询的“UserID”参数的值。</param>
        /// <param name="startTime">查询的“startTime”参数的值。</param>
        /// <param name="endTime">查询的“endTime”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKUSERHISTORYPOSITION> GetPersonHistoryPosotionByUserIDQuery(decimal UserID, DateTime startTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetPersonHistoryPosotionByUserIDQuery", parameters);
            return base.CreateQuery<ZFGKUSERHISTORYPOSITION>("GetPersonHistoryPosotionByUserID", parameters, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPHONEERRORS”查询加载 <see cref="PHONEERROR"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="PHONEERROR"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<PHONEERROR> GetPHONEERRORSQuery()
        {
            this.ValidateMethod("GetPHONEERRORSQuery", null);
            return base.CreateQuery<PHONEERROR>("GetPHONEERRORS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetPORTALCATEGORIES”查询加载 <see cref="PORTALCATEGORy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="PORTALCATEGORy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<PORTALCATEGORy> GetPORTALCATEGORIESQuery()
        {
            this.ValidateMethod("GetPORTALCATEGORIESQuery", null);
            return base.CreateQuery<PORTALCATEGORy>("GetPORTALCATEGORIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetQUESTIONIDS”查询加载 <see cref="QUESTIONID"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="QUESTIONID"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<QUESTIONID> GetQUESTIONIDSQuery()
        {
            this.ValidateMethod("GetQUESTIONIDSQuery", null);
            return base.CreateQuery<QUESTIONID>("GetQUESTIONIDS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetQUESTIONLISTS”查询加载 <see cref="QUESTIONLIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="QUESTIONLIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<QUESTIONLIST> GetQUESTIONLISTSQuery()
        {
            this.ValidateMethod("GetQUESTIONLISTSQuery", null);
            return base.CreateQuery<QUESTIONLIST>("GetQUESTIONLISTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetRCDCEVENTS”查询加载 <see cref="RCDCEVENT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="RCDCEVENT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<RCDCEVENT> GetRCDCEVENTSQuery()
        {
            this.ValidateMethod("GetRCDCEVENTSQuery", null);
            return base.CreateQuery<RCDCEVENT>("GetRCDCEVENTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetRCDCTOZFZDS”查询加载 <see cref="RCDCTOZFZD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="RCDCTOZFZD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<RCDCTOZFZD> GetRCDCTOZFZDSQuery()
        {
            this.ValidateMethod("GetRCDCTOZFZDSQuery", null);
            return base.CreateQuery<RCDCTOZFZD>("GetRCDCTOZFZDS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetRECIPES”查询加载 <see cref="RECIPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="RECIPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<RECIPE> GetRECIPESQuery()
        {
            this.ValidateMethod("GetRECIPESQuery", null);
            return base.CreateQuery<RECIPE>("GetRECIPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetROLEFUNCTIONS”查询加载 <see cref="ROLEFUNCTION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ROLEFUNCTION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ROLEFUNCTION> GetROLEFUNCTIONSQuery()
        {
            this.ValidateMethod("GetROLEFUNCTIONSQuery", null);
            return base.CreateQuery<ROLEFUNCTION>("GetROLEFUNCTIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetROLEMENUS”查询加载 <see cref="ROLEMENU"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ROLEMENU"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ROLEMENU> GetROLEMENUSQuery()
        {
            this.ValidateMethod("GetROLEMENUSQuery", null);
            return base.CreateQuery<ROLEMENU>("GetROLEMENUS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetROLES”查询加载 <see cref="ROLE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ROLE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ROLE> GetROLESQuery()
        {
            this.ValidateMethod("GetROLESQuery", null);
            return base.CreateQuery<ROLE>("GetROLES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSCHEDULES”查询加载 <see cref="SCHEDULE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SCHEDULE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SCHEDULE> GetSCHEDULESQuery()
        {
            this.ValidateMethod("GetSCHEDULESQuery", null);
            return base.CreateQuery<SCHEDULE>("GetSCHEDULES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSCHEDULETYPES”查询加载 <see cref="SCHEDULETYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SCHEDULETYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SCHEDULETYPE> GetSCHEDULETYPESQuery()
        {
            this.ValidateMethod("GetSCHEDULETYPESQuery", null);
            return base.CreateQuery<SCHEDULETYPE>("GetSCHEDULETYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSIMPLECASEPICTURES”查询加载 <see cref="SIMPLECASEPICTURE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SIMPLECASEPICTURE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SIMPLECASEPICTURE> GetSIMPLECASEPICTURESQuery()
        {
            this.ValidateMethod("GetSIMPLECASEPICTURESQuery", null);
            return base.CreateQuery<SIMPLECASEPICTURE>("GetSIMPLECASEPICTURES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSIMPLECASES”查询加载 <see cref="SIMPLECAS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SIMPLECAS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SIMPLECAS> GetSIMPLECASESQuery()
        {
            this.ValidateMethod("GetSIMPLECASESQuery", null);
            return base.CreateQuery<SIMPLECAS>("GetSIMPLECASES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSINGNINS”查询加载 <see cref="SINGNIN"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SINGNIN"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SINGNIN> GetSINGNINSQuery()
        {
            this.ValidateMethod("GetSINGNINSQuery", null);
            return base.CreateQuery<SINGNIN>("GetSINGNINS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSPECIALACTIVITICES”查询加载 <see cref="SPECIALACTIVITICE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SPECIALACTIVITICE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SPECIALACTIVITICE> GetSPECIALACTIVITICESQuery()
        {
            this.ValidateMethod("GetSPECIALACTIVITICESQuery", null);
            return base.CreateQuery<SPECIALACTIVITICE>("GetSPECIALACTIVITICES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSPECIALACTIVITYDEFINITONS”查询加载 <see cref="SPECIALACTIVITYDEFINITON"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SPECIALACTIVITYDEFINITON"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SPECIALACTIVITYDEFINITON> GetSPECIALACTIVITYDEFINITONSQuery()
        {
            this.ValidateMethod("GetSPECIALACTIVITYDEFINITONSQuery", null);
            return base.CreateQuery<SPECIALACTIVITYDEFINITON>("GetSPECIALACTIVITYDEFINITONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSPECIALTOZFSJS”查询加载 <see cref="SPECIALTOZFSJ"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SPECIALTOZFSJ"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SPECIALTOZFSJ> GetSPECIALTOZFSJSQuery()
        {
            this.ValidateMethod("GetSPECIALTOZFSJSQuery", null);
            return base.CreateQuery<SPECIALTOZFSJ>("GetSPECIALTOZFSJS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSPECIALWORKFLOWINSTANCES”查询加载 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<SPECIALWORKFLOWINSTANCE> GetSPECIALWORKFLOWINSTANCESQuery()
        {
            this.ValidateMethod("GetSPECIALWORKFLOWINSTANCESQuery", null);
            return base.CreateQuery<SPECIALWORKFLOWINSTANCE>("GetSPECIALWORKFLOWINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREESTORES”查询加载 <see cref="STREESTORE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREESTORE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREESTORE> GetSTREESTORESQuery()
        {
            this.ValidateMethod("GetSTREESTORESQuery", null);
            return base.CreateQuery<STREESTORE>("GetSTREESTORES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREESTORETYPES”查询加载 <see cref="STREESTORETYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREESTORETYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREESTORETYPE> GetSTREESTORETYPESQuery()
        {
            this.ValidateMethod("GetSTREESTORETYPESQuery", null);
            return base.CreateQuery<STREESTORETYPE>("GetSTREESTORETYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETASSESSMENTTYPES”查询加载 <see cref="STREETASSESSMENTTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETASSESSMENTTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETASSESSMENTTYPE> GetSTREETASSESSMENTTYPESQuery()
        {
            this.ValidateMethod("GetSTREETASSESSMENTTYPESQuery", null);
            return base.CreateQuery<STREETASSESSMENTTYPE>("GetSTREETASSESSMENTTYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETBASES”查询加载 <see cref="STREETBAS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETBAS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETBAS> GetSTREETBASESQuery()
        {
            this.ValidateMethod("GetSTREETBASESQuery", null);
            return base.CreateQuery<STREETBAS>("GetSTREETBASES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETEXAMINES”查询加载 <see cref="STREETEXAMINE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETEXAMINE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETEXAMINE> GetSTREETEXAMINESQuery()
        {
            this.ValidateMethod("GetSTREETEXAMINESQuery", null);
            return base.CreateQuery<STREETEXAMINE>("GetSTREETEXAMINES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETPROBLEMS”查询加载 <see cref="STREETPROBLEM"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETPROBLEM"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETPROBLEM> GetSTREETPROBLEMSQuery()
        {
            this.ValidateMethod("GetSTREETPROBLEMSQuery", null);
            return base.CreateQuery<STREETPROBLEM>("GetSTREETPROBLEMS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETS”查询加载 <see cref="STREET"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREET"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREET> GetSTREETSQuery()
        {
            this.ValidateMethod("GetSTREETSQuery", null);
            return base.CreateQuery<STREET>("GetSTREETS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETTYPES”查询加载 <see cref="STREETTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETTYPE> GetSTREETTYPESQuery()
        {
            this.ValidateMethod("GetSTREETTYPESQuery", null);
            return base.CreateQuery<STREETTYPE>("GetSTREETTYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetSTREETUSERS”查询加载 <see cref="STREETUSER"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="STREETUSER"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<STREETUSER> GetSTREETUSERSQuery()
        {
            this.ValidateMethod("GetSTREETUSERSQuery", null);
            return base.CreateQuery<STREETUSER>("GetSTREETUSERS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTABLE1”查询加载 <see cref="TABLE1"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TABLE1"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TABLE1> GetTABLE1Query()
        {
            this.ValidateMethod("GetTABLE1Query", null);
            return base.CreateQuery<TABLE1>("GetTABLE1", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTJGHZFS”查询加载 <see cref="TJGHZF"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TJGHZF"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TJGHZF> GetTJGHZFSQuery()
        {
            this.ValidateMethod("GetTJGHZFSQuery", null);
            return base.CreateQuery<TJGHZF>("GetTJGHZFS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSLICENSECARCOMPANIES”查询加载 <see cref="TRANSLICENSECARCOMPANy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSLICENSECARCOMPANy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSLICENSECARCOMPANy> GetTRANSLICENSECARCOMPANIESQuery()
        {
            this.ValidateMethod("GetTRANSLICENSECARCOMPANIESQuery", null);
            return base.CreateQuery<TRANSLICENSECARCOMPANy>("GetTRANSLICENSECARCOMPANIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSLICENSECARS”查询加载 <see cref="TRANSLICENSECAR"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSLICENSECAR"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSLICENSECAR> GetTRANSLICENSECARSQuery()
        {
            this.ValidateMethod("GetTRANSLICENSECARSQuery", null);
            return base.CreateQuery<TRANSLICENSECAR>("GetTRANSLICENSECARS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSLICENSEROADS”查询加载 <see cref="TRANSLICENSEROAD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSLICENSEROAD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSLICENSEROAD> GetTRANSLICENSEROADSQuery()
        {
            this.ValidateMethod("GetTRANSLICENSEROADSQuery", null);
            return base.CreateQuery<TRANSLICENSEROAD>("GetTRANSLICENSEROADS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSLICENSES”查询加载 <see cref="TRANSLICENS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSLICENS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSLICENS> GetTRANSLICENSESQuery()
        {
            this.ValidateMethod("GetTRANSLICENSESQuery", null);
            return base.CreateQuery<TRANSLICENS>("GetTRANSLICENSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSRECORDS”查询加载 <see cref="TRANSRECORD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSRECORD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSRECORD> GetTRANSRECORDSQuery()
        {
            this.ValidateMethod("GetTRANSRECORDSQuery", null);
            return base.CreateQuery<TRANSRECORD>("GetTRANSRECORDS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTRANSROADS”查询加载 <see cref="TRANSROAD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TRANSROAD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TRANSROAD> GetTRANSROADSQuery()
        {
            this.ValidateMethod("GetTRANSROADSQuery", null);
            return base.CreateQuery<TRANSROAD>("GetTRANSROADS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUNITS”查询加载 <see cref="UNIT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="UNIT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<UNIT> GetUNITSQuery()
        {
            this.ValidateMethod("GetUNITSQuery", null);
            return base.CreateQuery<UNIT>("GetUNITS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUNITTYPES”查询加载 <see cref="UNITTYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="UNITTYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<UNITTYPE> GetUNITTYPESQuery()
        {
            this.ValidateMethod("GetUNITTYPESQuery", null);
            return base.CreateQuery<UNITTYPE>("GetUNITTYPES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERARCHIVES”查询加载 <see cref="USERARCHIVE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERARCHIVE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERARCHIVE> GetUSERARCHIVESQuery()
        {
            this.ValidateMethod("GetUSERARCHIVESQuery", null);
            return base.CreateQuery<USERARCHIVE>("GetUSERARCHIVES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERCATEGORIES”查询加载 <see cref="USERCATEGORy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERCATEGORy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERCATEGORy> GetUSERCATEGORIESQuery()
        {
            this.ValidateMethod("GetUSERCATEGORIESQuery", null);
            return base.CreateQuery<USERCATEGORy>("GetUSERCATEGORIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERGROUPs”查询加载 <see cref="USERGROUP"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERGROUP"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERGROUP> GetUSERGROUPsQuery()
        {
            this.ValidateMethod("GetUSERGROUPsQuery", null);
            return base.CreateQuery<USERGROUP>("GetUSERGROUPs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERONDUTIES”查询加载 <see cref="USERONDUTy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERONDUTy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERONDUTy> GetUSERONDUTIESQuery()
        {
            this.ValidateMethod("GetUSERONDUTIESQuery", null);
            return base.CreateQuery<USERONDUTy>("GetUSERONDUTIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERPHONESIGNINS”查询加载 <see cref="USERPHONESIGNIN"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERPHONESIGNIN"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERPHONESIGNIN> GetUSERPHONESIGNINSQuery()
        {
            this.ValidateMethod("GetUSERPHONESIGNINSQuery", null);
            return base.CreateQuery<USERPHONESIGNIN>("GetUSERPHONESIGNINS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERPOSITIONS”查询加载 <see cref="USERPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERPOSITION> GetUSERPOSITIONSQuery()
        {
            this.ValidateMethod("GetUSERPOSITIONSQuery", null);
            return base.CreateQuery<USERPOSITION>("GetUSERPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERROLES”查询加载 <see cref="USERROLE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERROLE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERROLE> GetUSERROLESQuery()
        {
            this.ValidateMethod("GetUSERROLESQuery", null);
            return base.CreateQuery<USERROLE>("GetUSERROLES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERS”查询加载 <see cref="USER"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USER"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USER> GetUSERSQuery()
        {
            this.ValidateMethod("GetUSERSQuery", null);
            return base.CreateQuery<USER>("GetUSERS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetUSERS_DEL”查询加载 <see cref="USERS_DEL"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="USERS_DEL"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<USERS_DEL> GetUSERS_DELQuery()
        {
            this.ValidateMethod("GetUSERS_DELQuery", null);
            return base.CreateQuery<USERS_DEL>("GetUSERS_DEL", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetWORKFLOWDEFINITIONS”查询加载 <see cref="WORKFLOWDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WORKFLOWDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WORKFLOWDEFINITION> GetWORKFLOWDEFINITIONSQuery()
        {
            this.ValidateMethod("GetWORKFLOWDEFINITIONSQuery", null);
            return base.CreateQuery<WORKFLOWDEFINITION>("GetWORKFLOWDEFINITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetWORKFLOWINSTANCES”查询加载 <see cref="WORKFLOWINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WORKFLOWINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WORKFLOWINSTANCE> GetWORKFLOWINSTANCESQuery()
        {
            this.ValidateMethod("GetWORKFLOWINSTANCESQuery", null);
            return base.CreateQuery<WORKFLOWINSTANCE>("GetWORKFLOWINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetWORKFLOWPEROPERTIES”查询加载 <see cref="WORKFLOWPEROPERTy"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WORKFLOWPEROPERTy"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WORKFLOWPEROPERTy> GetWORKFLOWPEROPERTIESQuery()
        {
            this.ValidateMethod("GetWORKFLOWPEROPERTIESQuery", null);
            return base.CreateQuery<WORKFLOWPEROPERTy>("GetWORKFLOWPEROPERTIES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetWORKFLOWSTATUSES”查询加载 <see cref="WORKFLOWSTATUS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WORKFLOWSTATUS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WORKFLOWSTATUS> GetWORKFLOWSTATUSESQuery()
        {
            this.ValidateMethod("GetWORKFLOWSTATUSESQuery", null);
            return base.CreateQuery<WORKFLOWSTATUS>("GetWORKFLOWSTATUSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetWTUSERRELATIONS”查询加载 <see cref="WTUSERRELATION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="WTUSERRELATION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<WTUSERRELATION> GetWTUSERRELATIONSQuery()
        {
            this.ValidateMethod("GetWTUSERRELATIONSQuery", null);
            return base.CreateQuery<WTUSERRELATION>("GetWTUSERRELATIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXCJGAREAS”查询加载 <see cref="XCJGAREA"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XCJGAREA"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGAREA> GetXCJGAREASQuery()
        {
            this.ValidateMethod("GetXCJGAREASQuery", null);
            return base.CreateQuery<XCJGAREA>("GetXCJGAREAS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXCJGCARTASKS”查询加载 <see cref="XCJGCARTASK"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XCJGCARTASK"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGCARTASK> GetXCJGCARTASKSQuery()
        {
            this.ValidateMethod("GetXCJGCARTASKSQuery", null);
            return base.CreateQuery<XCJGCARTASK>("GetXCJGCARTASKS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXCJGROUTES”查询加载 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XCJGROUTE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGROUTE> GetXCJGROUTESQuery()
        {
            this.ValidateMethod("GetXCJGROUTESQuery", null);
            return base.CreateQuery<XCJGROUTE>("GetXCJGROUTES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXCJGSIGNINS”查询加载 <see cref="XCJGSIGNIN"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XCJGSIGNIN"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGSIGNIN> GetXCJGSIGNINSQuery()
        {
            this.ValidateMethod("GetXCJGSIGNINSQuery", null);
            return base.CreateQuery<XCJGSIGNIN>("GetXCJGSIGNINS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXCJGUSERTASKS”查询加载 <see cref="XCJGUSERTASK"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XCJGUSERTASK"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XCJGUSERTASK> GetXCJGUSERTASKSQuery()
        {
            this.ValidateMethod("GetXCJGUSERTASKSQuery", null);
            return base.CreateQuery<XCJGUSERTASK>("GetXCJGUSERTASKS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPACTDEFS”查询加载 <see cref="XZSPACTDEF"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPACTDEF"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPACTDEF> GetXZSPACTDEFSQuery()
        {
            this.ValidateMethod("GetXZSPACTDEFSQuery", null);
            return base.CreateQuery<XZSPACTDEF>("GetXZSPACTDEFS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPACTISTS”查询加载 <see cref="XZSPACTIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPACTIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPACTIST> GetXZSPACTISTSQuery()
        {
            this.ValidateMethod("GetXZSPACTISTSQuery", null);
            return base.CreateQuery<XZSPACTIST>("GetXZSPACTISTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPACTISTS_DELETE”查询加载 <see cref="XZSPACTISTS_DELETE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPACTISTS_DELETE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPACTISTS_DELETE> GetXZSPACTISTS_DELETEQuery()
        {
            this.ValidateMethod("GetXZSPACTISTS_DELETEQuery", null);
            return base.CreateQuery<XZSPACTISTS_DELETE>("GetXZSPACTISTS_DELETE", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPACTISTS_DELETE1”查询加载 <see cref="XZSPACTISTS_DELETE1"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPACTISTS_DELETE1"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPACTISTS_DELETE1> GetXZSPACTISTS_DELETE1Query()
        {
            this.ValidateMethod("GetXZSPACTISTS_DELETE1Query", null);
            return base.CreateQuery<XZSPACTISTS_DELETE1>("GetXZSPACTISTS_DELETE1", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPACTIVITYDEFINITIONS”查询加载 <see cref="XZSPACTIVITYDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPACTIVITYDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPACTIVITYDEFINITION> GetXZSPACTIVITYDEFINITIONSQuery()
        {
            this.ValidateMethod("GetXZSPACTIVITYDEFINITIONSQuery", null);
            return base.CreateQuery<XZSPACTIVITYDEFINITION>("GetXZSPACTIVITYDEFINITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPAPPROVALPROJECTS”查询加载 <see cref="XZSPAPPROVALPROJECT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPAPPROVALPROJECT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPAPPROVALPROJECT> GetXZSPAPPROVALPROJECTSQuery()
        {
            this.ValidateMethod("GetXZSPAPPROVALPROJECTSQuery", null);
            return base.CreateQuery<XZSPAPPROVALPROJECT>("GetXZSPAPPROVALPROJECTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPKZHCs”查询加载 <see cref="XZSPKZHC"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPKZHC"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPKZHC> GetXZSPKZHCsQuery()
        {
            this.ValidateMethod("GetXZSPKZHCsQuery", null);
            return base.CreateQuery<XZSPKZHC>("GetXZSPKZHCs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPNEWACTIVITYDEFINITIONS”查询加载 <see cref="XZSPNEWACTIVITYDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPNEWACTIVITYDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPNEWACTIVITYDEFINITION> GetXZSPNEWACTIVITYDEFINITIONSQuery()
        {
            this.ValidateMethod("GetXZSPNEWACTIVITYDEFINITIONSQuery", null);
            return base.CreateQuery<XZSPNEWACTIVITYDEFINITION>("GetXZSPNEWACTIVITYDEFINITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPNEWTABs”查询加载 <see cref="XZSPNEWTAB"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPNEWTAB"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPNEWTAB> GetXZSPNEWTABsQuery()
        {
            this.ValidateMethod("GetXZSPNEWTABsQuery", null);
            return base.CreateQuery<XZSPNEWTAB>("GetXZSPNEWTABs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPNEWWORKFLOWINSTANCES”查询加载 <see cref="XZSPNEWWORKFLOWINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPNEWWORKFLOWINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPNEWWORKFLOWINSTANCE> GetXZSPNEWWORKFLOWINSTANCESQuery()
        {
            this.ValidateMethod("GetXZSPNEWWORKFLOWINSTANCESQuery", null);
            return base.CreateQuery<XZSPNEWWORKFLOWINSTANCE>("GetXZSPNEWWORKFLOWINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPPROJECTNAMEs”查询加载 <see cref="XZSPPROJECTNAME"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPPROJECTNAME"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPPROJECTNAME> GetXZSPPROJECTNAMEsQuery()
        {
            this.ValidateMethod("GetXZSPPROJECTNAMEsQuery", null);
            return base.CreateQuery<XZSPPROJECTNAME>("GetXZSPPROJECTNAMEs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPSTUS”查询加载 <see cref="XZSPSTU"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPSTU"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPSTU> GetXZSPSTUSQuery()
        {
            this.ValidateMethod("GetXZSPSTUSQuery", null);
            return base.CreateQuery<XZSPSTU>("GetXZSPSTUS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPWFDEFS”查询加载 <see cref="XZSPWFDEF"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPWFDEF"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPWFDEF> GetXZSPWFDEFSQuery()
        {
            this.ValidateMethod("GetXZSPWFDEFSQuery", null);
            return base.CreateQuery<XZSPWFDEF>("GetXZSPWFDEFS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPWFISTS”查询加载 <see cref="XZSPWFIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPWFIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPWFIST> GetXZSPWFISTSQuery()
        {
            this.ValidateMethod("GetXZSPWFISTSQuery", null);
            return base.CreateQuery<XZSPWFIST>("GetXZSPWFISTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZSPWFISTS_DELETE”查询加载 <see cref="XZSPWFISTS_DELETE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZSPWFISTS_DELETE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZSPWFISTS_DELETE> GetXZSPWFISTS_DELETEQuery()
        {
            this.ValidateMethod("GetXZSPWFISTS_DELETEQuery", null);
            return base.CreateQuery<XZSPWFISTS_DELETE>("GetXZSPWFISTS_DELETE", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZZFLISTSHS”查询加载 <see cref="XZZFLISTSH"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZZFLISTSH"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZZFLISTSH> GetXZZFLISTSHSQuery()
        {
            this.ValidateMethod("GetXZZFLISTSHSQuery", null);
            return base.CreateQuery<XZZFLISTSH>("GetXZZFLISTSHS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZZFQUESTIONCLASSES”查询加载 <see cref="XZZFQUESTIONCLASS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZZFQUESTIONCLASS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZZFQUESTIONCLASS> GetXZZFQUESTIONCLASSESQuery()
        {
            this.ValidateMethod("GetXZZFQUESTIONCLASSESQuery", null);
            return base.CreateQuery<XZZFQUESTIONCLASS>("GetXZZFQUESTIONCLASSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetXZZFTABLISTS”查询加载 <see cref="XZZFTABLIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="XZZFTABLIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<XZZFTABLIST> GetXZZFTABLISTSQuery()
        {
            this.ValidateMethod("GetXZZFTABLISTSQuery", null);
            return base.CreateQuery<XZZFTABLIST>("GetXZZFTABLISTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZBRZLISTS”查询加载 <see cref="ZBRZLIST"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZBRZLIST"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZBRZLIST> GetZBRZLISTSQuery()
        {
            this.ValidateMethod("GetZBRZLISTSQuery", null);
            return base.CreateQuery<ZBRZLIST>("GetZBRZLISTS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFGKCARHISTORYPOSITIONS”查询加载 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKCARHISTORYPOSITION> GetZFGKCARHISTORYPOSITIONSQuery()
        {
            this.ValidateMethod("GetZFGKCARHISTORYPOSITIONSQuery", null);
            return base.CreateQuery<ZFGKCARHISTORYPOSITION>("GetZFGKCARHISTORYPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFGKCARLATESTPOSITIONS”查询加载 <see cref="ZFGKCARLATESTPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFGKCARLATESTPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKCARLATESTPOSITION> GetZFGKCARLATESTPOSITIONSQuery()
        {
            this.ValidateMethod("GetZFGKCARLATESTPOSITIONSQuery", null);
            return base.CreateQuery<ZFGKCARLATESTPOSITION>("GetZFGKCARLATESTPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFGKCARS”查询加载 <see cref="ZFGKCAR"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFGKCAR"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKCAR> GetZFGKCARSQuery()
        {
            this.ValidateMethod("GetZFGKCARSQuery", null);
            return base.CreateQuery<ZFGKCAR>("GetZFGKCARS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFGKUSERHISTORYPOSITIONS”查询加载 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKUSERHISTORYPOSITION> GetZFGKUSERHISTORYPOSITIONSQuery()
        {
            this.ValidateMethod("GetZFGKUSERHISTORYPOSITIONSQuery", null);
            return base.CreateQuery<ZFGKUSERHISTORYPOSITION>("GetZFGKUSERHISTORYPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFGKUSERLATESTPOSITIONS”查询加载 <see cref="ZFGKUSERLATESTPOSITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFGKUSERLATESTPOSITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFGKUSERLATESTPOSITION> GetZFGKUSERLATESTPOSITIONSQuery()
        {
            this.ValidateMethod("GetZFGKUSERLATESTPOSITIONSQuery", null);
            return base.CreateQuery<ZFGKUSERLATESTPOSITION>("GetZFGKUSERLATESTPOSITIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJACTIVITYDEFINITIONs”查询加载 <see cref="ZFSJACTIVITYDEFINITION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJACTIVITYDEFINITION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJACTIVITYDEFINITION> GetZFSJACTIVITYDEFINITIONsQuery()
        {
            this.ValidateMethod("GetZFSJACTIVITYDEFINITIONsQuery", null);
            return base.CreateQuery<ZFSJACTIVITYDEFINITION>("GetZFSJACTIVITYDEFINITIONs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJACTIVITYINSTANCES”查询加载 <see cref="ZFSJACTIVITYINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJACTIVITYINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJACTIVITYINSTANCE> GetZFSJACTIVITYINSTANCESQuery()
        {
            this.ValidateMethod("GetZFSJACTIVITYINSTANCESQuery", null);
            return base.CreateQuery<ZFSJACTIVITYINSTANCE>("GetZFSJACTIVITYINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJCHARTBYQLs”查询加载 <see cref="ZFSJCHARTBYQL"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJCHARTBYQL"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJCHARTBYQL> GetZFSJCHARTBYQLsQuery()
        {
            this.ValidateMethod("GetZFSJCHARTBYQLsQuery", null);
            return base.CreateQuery<ZFSJCHARTBYQL>("GetZFSJCHARTBYQLs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJCHECKWAYs”查询加载 <see cref="ZFSJCHECKWAY"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJCHECKWAY"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJCHECKWAY> GetZFSJCHECKWAYsQuery()
        {
            this.ValidateMethod("GetZFSJCHECKWAYsQuery", null);
            return base.CreateQuery<ZFSJCHECKWAY>("GetZFSJCHECKWAYs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJPROCESSWAYs”查询加载 <see cref="ZFSJPROCESSWAY"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJPROCESSWAY"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJPROCESSWAY> GetZFSJPROCESSWAYsQuery()
        {
            this.ValidateMethod("GetZFSJPROCESSWAYsQuery", null);
            return base.CreateQuery<ZFSJPROCESSWAY>("GetZFSJPROCESSWAYs", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJQUESTIONCLASSES”查询加载 <see cref="ZFSJQUESTIONCLASS"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJQUESTIONCLASS"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJQUESTIONCLASS> GetZFSJQUESTIONCLASSESQuery()
        {
            this.ValidateMethod("GetZFSJQUESTIONCLASSESQuery", null);
            return base.CreateQuery<ZFSJQUESTIONCLASS>("GetZFSJQUESTIONCLASSES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJSOURCES”查询加载 <see cref="ZFSJSOURCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJSOURCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJSOURCE> GetZFSJSOURCESQuery()
        {
            this.ValidateMethod("GetZFSJSOURCESQuery", null);
            return base.CreateQuery<ZFSJSOURCE>("GetZFSJSOURCES", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJSTATUS”查询加载 <see cref="ZFSJSTATU"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJSTATU"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJSTATU> GetZFSJSTATUSQuery()
        {
            this.ValidateMethod("GetZFSJSTATUSQuery", null);
            return base.CreateQuery<ZFSJSTATU>("GetZFSJSTATUS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJSUMMARYINFORMATIONS”查询加载 <see cref="ZFSJSUMMARYINFORMATION"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJSUMMARYINFORMATION"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJSUMMARYINFORMATION> GetZFSJSUMMARYINFORMATIONSQuery()
        {
            this.ValidateMethod("GetZFSJSUMMARYINFORMATIONSQuery", null);
            return base.CreateQuery<ZFSJSUMMARYINFORMATION>("GetZFSJSUMMARYINFORMATIONS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJTIMELIMITS”查询加载 <see cref="ZFSJTIMELIMIT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJTIMELIMIT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJTIMELIMIT> GetZFSJTIMELIMITSQuery()
        {
            this.ValidateMethod("GetZFSJTIMELIMITSQuery", null);
            return base.CreateQuery<ZFSJTIMELIMIT>("GetZFSJTIMELIMITS", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetZFSJWORKFLOWINSTANCES”查询加载 <see cref="ZFSJWORKFLOWINSTANCE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="ZFSJWORKFLOWINSTANCE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<ZFSJWORKFLOWINSTANCE> GetZFSJWORKFLOWINSTANCESQuery()
        {
            this.ValidateMethod("GetZFSJWORKFLOWINSTANCESQuery", null);
            return base.CreateQuery<ZFSJWORKFLOWINSTANCE>("GetZFSJWORKFLOWINSTANCES", null, false, true);
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new NEWPLEDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“NEWPLEDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface INEWPLEDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetACITIVITYDEFINITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACITIVITYDEFINITIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACITIVITYDEFINITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACITIVITYDEFINITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetACITIVITYDEFINITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACITIVITYDEFINITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACITIVITYDEFINITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetACITIVITYDEFINITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ACITIVITYDEFINITION> EndGetACITIVITYDEFINITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetACTIVITYDEFINITIONDOCPHASES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYDEFINITIONDOCPHASESDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYDEFINITIONDOCPHASES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACTIVITYDEFINITIONDOCPHASESResponse")]
            [WebGet()]
            IAsyncResult BeginGetACTIVITYDEFINITIONDOCPHASES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACTIVITYDEFINITIONDOCPHASES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACTIVITYDEFINITIONDOCPHASES”返回的 IAsyncResult。</param>
            /// <returns>从“GetACTIVITYDEFINITIONDOCPHASES”操作返回的“QueryResult”。</returns>
            QueryResult<ACTIVITYDEFINITIONDOCPHAS> EndGetACTIVITYDEFINITIONDOCPHASES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetACTIVITYINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYINSTANCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACTIVITYINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetACTIVITYINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACTIVITYINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACTIVITYINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetACTIVITYINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<ACTIVITYINSTANCE> EndGetACTIVITYINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetACTIVITYPERMISSIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetACTIVITYPERMISSIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACTIVITYPERMISSIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACTIVITYPERMISSIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetACTIVITYPERMISSIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ACTIVITYPERMISSION> EndGetACTIVITYPERMISSIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetACTIVITYPERMISSIONTYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONTYPESDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONTYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACTIVITYPERMISSIONTYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetACTIVITYPERMISSIONTYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACTIVITYPERMISSIONTYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACTIVITYPERMISSIONTYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetACTIVITYPERMISSIONTYPES”操作返回的“QueryResult”。</returns>
            QueryResult<ACTIVITYPERMISSIONTYPE> EndGetACTIVITYPERMISSIONTYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetACTIVITYSTATUSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYSTATUSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetACTIVITYSTATUSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetACTIVITYSTATUSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetACTIVITYSTATUSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetACTIVITYSTATUSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetACTIVITYSTATUSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetACTIVITYSTATUSES”操作返回的“QueryResult”。</returns>
            QueryResult<ACTIVITYSTATUS> EndGetACTIVITYSTATUSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllCars”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllCarsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllCars", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllCarsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllCars(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllCars”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllCars”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllCars”操作返回的“QueryResult”。</returns>
            QueryResult<Car> EndGetAllCars(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllEventLaws”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllEventLawsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllEventLaws", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllEventLawsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllEventLaws(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllEventLaws”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllEventLaws”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllEventLaws”操作返回的“QueryResult”。</returns>
            QueryResult<EventLaw> EndGetAllEventLaws(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllPersons”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllPersonsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllPersons", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllPersonsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllPersons(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllPersons”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllPersons”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllPersons”操作返回的“QueryResult”。</returns>
            QueryResult<Person> EndGetAllPersons(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllUnits”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllUnitsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllUnits", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllUnitsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllUnits(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllUnits”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllUnits”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllUnits”操作返回的“QueryResult”。</returns>
            QueryResult<Unit> EndGetAllUnits(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllUnits4EventLaws”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllUnits4EventLawsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllUnits4EventLaws", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllUnits4EventLawsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllUnits4EventLaws(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllUnits4EventLaws”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllUnits4EventLaws”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllUnits4EventLaws”操作返回的“QueryResult”。</returns>
            QueryResult<Unit> EndGetAllUnits4EventLaws(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllUnits4LawCars”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllUnits4LawCarsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllUnits4LawCars", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllUnits4LawCarsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllUnits4LawCars(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllUnits4LawCars”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllUnits4LawCars”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllUnits4LawCars”操作返回的“QueryResult”。</returns>
            QueryResult<Unit> EndGetAllUnits4LawCars(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllXZSP”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllXZSPDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllXZSP", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllXZSPResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllXZSP(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllXZSP”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllXZSP”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllXZSP”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPWFIST> EndGetAllXZSP(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllZFAJ”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAllZFAJDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAllZFAJ", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAllZFAJResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllZFAJ(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllZFAJ”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllZFAJ”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllZFAJ”操作返回的“QueryResult”。</returns>
            QueryResult<WORKFLOWINSTANCE> EndGetAllZFAJ(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAPPVERSIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetAPPVERSIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetAPPVERSIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetAPPVERSIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetAPPVERSIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAPPVERSIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAPPVERSIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetAPPVERSIONS”操作返回的“QueryResult”。</returns>
            QueryResult<APPVERSION> EndGetAPPVERSIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetARTICLES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetARTICLESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetARTICLES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetARTICLESResponse")]
            [WebGet()]
            IAsyncResult BeginGetARTICLES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetARTICLES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetARTICLES”返回的 IAsyncResult。</param>
            /// <returns>从“GetARTICLES”操作返回的“QueryResult”。</returns>
            QueryResult<ARTICLE> EndGetARTICLES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCarHistoryPositionsByCarID”操作。
            /// </summary>
            /// <param name="CarID">此操作的“CarID”参数的值。</param>
            /// <param name="startTime">此操作的“startTime”参数的值。</param>
            /// <param name="endTime">此操作的“endTime”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCarHistoryPositionsByCarIDDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCarHistoryPositionsByCarID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCarHistoryPositionsByCarIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetCarHistoryPositionsByCarID(decimal CarID, DateTime startTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCarHistoryPositionsByCarID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCarHistoryPositionsByCarID”返回的 IAsyncResult。</param>
            /// <returns>从“GetCarHistoryPositionsByCarID”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKCARHISTORYPOSITION> EndGetCarHistoryPositionsByCarID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCARSYNCPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCARSYNCPOSITIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCARSYNCPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCARSYNCPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetCARSYNCPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCARSYNCPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCARSYNCPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetCARSYNCPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<CARSYNCPOSITION> EndGetCARSYNCPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCARTYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCARTYPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCARTYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCARTYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetCARTYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCARTYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCARTYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetCARTYPES”操作返回的“QueryResult”。</returns>
            QueryResult<CARTYPE> EndGetCARTYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCASEPHONESMSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCASEPHONESMSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCASEPHONESMSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCASEPHONESMSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetCASEPHONESMSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCASEPHONESMSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCASEPHONESMSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetCASEPHONESMSES”操作返回的“QueryResult”。</returns>
            QueryResult<CASEPHONESMS> EndGetCASEPHONESMSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCASESOURCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCASESOURCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCASESOURCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCASESOURCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetCASESOURCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCASESOURCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCASESOURCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetCASESOURCES”操作返回的“QueryResult”。</returns>
            QueryResult<CASESOURCE> EndGetCASESOURCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCONSTRSITES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCONSTRSITESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCONSTRSITES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCONSTRSITESResponse")]
            [WebGet()]
            IAsyncResult BeginGetCONSTRSITES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCONSTRSITES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCONSTRSITES”返回的 IAsyncResult。</param>
            /// <returns>从“GetCONSTRSITES”操作返回的“QueryResult”。</returns>
            QueryResult<CONSTRSITE> EndGetCONSTRSITES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCONTACTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCONTACTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCONTACTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCONTACTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetCONTACTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCONTACTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCONTACTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetCONTACTS”操作返回的“QueryResult”。</returns>
            QueryResult<CONTACT> EndGetCONTACTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetCONTACTSGROUPS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetCONTACTSGROUPSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetCONTACTSGROUPS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetCONTACTSGROUPSResponse")]
            [WebGet()]
            IAsyncResult BeginGetCONTACTSGROUPS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetCONTACTSGROUPS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetCONTACTSGROUPS”返回的 IAsyncResult。</param>
            /// <returns>从“GetCONTACTSGROUPS”操作返回的“QueryResult”。</returns>
            QueryResult<CONTACTSGROUP> EndGetCONTACTSGROUPS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDOCDEFINITIONRELATIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONRELATIONSDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONRELATIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONRELATIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetDOCDEFINITIONRELATIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDOCDEFINITIONRELATIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDOCDEFINITIONRELATIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetDOCDEFINITIONRELATIONS”操作返回的“QueryResult”。</returns>
            QueryResult<DOCDEFINITIONRELATION> EndGetDOCDEFINITIONRELATIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDOCDEFINITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetDOCDEFINITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetDOCDEFINITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDOCDEFINITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDOCDEFINITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetDOCDEFINITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<DOCDEFINITION> EndGetDOCDEFINITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDOCINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetDOCINSTANCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetDOCINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetDOCINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetDOCINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDOCINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDOCINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetDOCINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<DOCINSTANCE> EndGetDOCINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDOCPHASES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetDOCPHASESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetDOCPHASES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetDOCPHASESResponse")]
            [WebGet()]
            IAsyncResult BeginGetDOCPHASES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDOCPHASES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDOCPHASES”返回的 IAsyncResult。</param>
            /// <returns>从“GetDOCPHASES”操作返回的“QueryResult”。</returns>
            QueryResult<DOCPHAS> EndGetDOCPHASES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDUMPINGSITES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetDUMPINGSITESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetDUMPINGSITES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetDUMPINGSITESResponse")]
            [WebGet()]
            IAsyncResult BeginGetDUMPINGSITES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDUMPINGSITES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDUMPINGSITES”返回的 IAsyncResult。</param>
            /// <returns>从“GetDUMPINGSITES”操作返回的“QueryResult”。</returns>
            QueryResult<DUMPINGSITE> EndGetDUMPINGSITES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetFUNCTIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetFUNCTIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetFUNCTIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetFUNCTIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetFUNCTIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetFUNCTIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetFUNCTIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetFUNCTIONS”操作返回的“QueryResult”。</returns>
            QueryResult<FUNCTION> EndGetFUNCTIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWCASENAMES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWCASENAMESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWCASENAMES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWCASENAMESResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWCASENAMES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWCASENAMES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWCASENAMES”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWCASENAMES”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWCASENAME> EndGetGGFWCASENAMES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWEVENTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWEVENTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWEVENTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWEVENTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWEVENTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWEVENTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWEVENTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWEVENTS”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWEVENT> EndGetGGFWEVENTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWMONTHLYREPORTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWMONTHLYREPORTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWMONTHLYREPORTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWMONTHLYREPORTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWMONTHLYREPORTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWMONTHLYREPORTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWMONTHLYREPORTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWMONTHLYREPORTS”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWMONTHLYREPORT> EndGetGGFWMONTHLYREPORTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWSOURCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWSOURCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWSOURCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWSOURCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWSOURCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWSOURCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWSOURCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWSOURCES”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWSOURCE> EndGetGGFWSOURCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWSTATUES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWSTATUESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWSTATUES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWSTATUESResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWSTATUES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWSTATUES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWSTATUES”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWSTATUES”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWSTATUE> EndGetGGFWSTATUES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWTOZFZDS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWTOZFZDSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWTOZFZDS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWTOZFZDSResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWTOZFZDS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWTOZFZDS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWTOZFZDS”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWTOZFZDS”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWTOZFZD> EndGetGGFWTOZFZDS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGGFWXFDOCS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGGFWXFDOCSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGGFWXFDOCS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGGFWXFDOCSResponse")]
            [WebGet()]
            IAsyncResult BeginGetGGFWXFDOCS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGGFWXFDOCS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGGFWXFDOCS”返回的 IAsyncResult。</param>
            /// <returns>从“GetGGFWXFDOCS”操作返回的“QueryResult”。</returns>
            QueryResult<GGFWXFDOC> EndGetGGFWXFDOCS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetGROUPS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetGROUPSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetGROUPS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetGROUPSResponse")]
            [WebGet()]
            IAsyncResult BeginGetGROUPS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetGROUPS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetGROUPS”返回的 IAsyncResult。</param>
            /// <returns>从“GetGROUPS”操作返回的“QueryResult”。</returns>
            QueryResult<GROUP> EndGetGROUPS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetILLEGALCLASSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetILLEGALCLASSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetILLEGALCLASSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetILLEGALCLASSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetILLEGALCLASSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetILLEGALCLASSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetILLEGALCLASSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetILLEGALCLASSES”操作返回的“QueryResult”。</returns>
            QueryResult<ILLEGALCLASS> EndGetILLEGALCLASSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetILLEGALITEMS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetILLEGALITEMSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetILLEGALITEMS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetILLEGALITEMSResponse")]
            [WebGet()]
            IAsyncResult BeginGetILLEGALITEMS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetILLEGALITEMS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetILLEGALITEMS”返回的 IAsyncResult。</param>
            /// <returns>从“GetILLEGALITEMS”操作返回的“QueryResult”。</returns>
            QueryResult<ILLEGALITEM> EndGetILLEGALITEMS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLatestCarByCarID”操作。
            /// </summary>
            /// <param name="CarID">此操作的“CarID”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLatestCarByCarIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLatestCarByCarID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLatestCarByCarIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetLatestCarByCarID(decimal CarID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLatestCarByCarID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLatestCarByCarID”返回的 IAsyncResult。</param>
            /// <returns>从“GetLatestCarByCarID”操作返回的“QueryResult”。</returns>
            QueryResult<Car> EndGetLatestCarByCarID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLatestCars”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLatestCarsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLatestCars", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLatestCarsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLatestCars(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLatestCars”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLatestCars”返回的 IAsyncResult。</param>
            /// <returns>从“GetLatestCars”操作返回的“QueryResult”。</returns>
            QueryResult<Car> EndGetLatestCars(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLatestPersonByUserID”操作。
            /// </summary>
            /// <param name="UserID">此操作的“UserID”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLatestPersonByUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLatestPersonByUserID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLatestPersonByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetLatestPersonByUserID(decimal UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLatestPersonByUserID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLatestPersonByUserID”返回的 IAsyncResult。</param>
            /// <returns>从“GetLatestPersonByUserID”操作返回的“QueryResult”。</returns>
            QueryResult<Person> EndGetLatestPersonByUserID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLatestPersons”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLatestPersonsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLatestPersons", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLatestPersonsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLatestPersons(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLatestPersons”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLatestPersons”返回的 IAsyncResult。</param>
            /// <returns>从“GetLatestPersons”操作返回的“QueryResult”。</returns>
            QueryResult<Person> EndGetLatestPersons(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLAYERTYPEs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLAYERTYPEsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLAYERTYPEs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLAYERTYPEsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLAYERTYPEs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLAYERTYPEs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLAYERTYPEs”返回的 IAsyncResult。</param>
            /// <returns>从“GetLAYERTYPEs”操作返回的“QueryResult”。</returns>
            QueryResult<LAYERTYPE> EndGetLAYERTYPEs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLEADERWEEKWORKPLANS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetLEADERWEEKWORKPLANSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetLEADERWEEKWORKPLANS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetLEADERWEEKWORKPLANSResponse")]
            [WebGet()]
            IAsyncResult BeginGetLEADERWEEKWORKPLANS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLEADERWEEKWORKPLANS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLEADERWEEKWORKPLANS”返回的 IAsyncResult。</param>
            /// <returns>从“GetLEADERWEEKWORKPLANS”操作返回的“QueryResult”。</returns>
            QueryResult<LEADERWEEKWORKPLAN> EndGetLEADERWEEKWORKPLANS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMAPINFOS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetMAPINFOSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetMAPINFOS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetMAPINFOSResponse")]
            [WebGet()]
            IAsyncResult BeginGetMAPINFOS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMAPINFOS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMAPINFOS”返回的 IAsyncResult。</param>
            /// <returns>从“GetMAPINFOS”操作返回的“QueryResult”。</returns>
            QueryResult<MAPINFO> EndGetMAPINFOS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMENUS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetMENUSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetMENUS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetMENUSResponse")]
            [WebGet()]
            IAsyncResult BeginGetMENUS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMENUS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMENUS”返回的 IAsyncResult。</param>
            /// <returns>从“GetMENUS”操作返回的“QueryResult”。</returns>
            QueryResult<MENU> EndGetMENUS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMESSAGES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetMESSAGESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetMESSAGES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetMESSAGESResponse")]
            [WebGet()]
            IAsyncResult BeginGetMESSAGES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMESSAGES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMESSAGES”返回的 IAsyncResult。</param>
            /// <returns>从“GetMESSAGES”操作返回的“QueryResult”。</returns>
            QueryResult<MESSAGE> EndGetMESSAGES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMESSAGETOUSERS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetMESSAGETOUSERSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetMESSAGETOUSERS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetMESSAGETOUSERSResponse")]
            [WebGet()]
            IAsyncResult BeginGetMESSAGETOUSERS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMESSAGETOUSERS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMESSAGETOUSERS”返回的 IAsyncResult。</param>
            /// <returns>从“GetMESSAGETOUSERS”操作返回的“QueryResult”。</returns>
            QueryResult<MESSAGETOUSER> EndGetMESSAGETOUSERS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetONDUTIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetONDUTIESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetONDUTIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetONDUTIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetONDUTIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetONDUTIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetONDUTIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetONDUTIES”操作返回的“QueryResult”。</returns>
            QueryResult<ONDUTy> EndGetONDUTIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPatrolAreasByCarID”操作。
            /// </summary>
            /// <param name="CarID">此操作的“CarID”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByCarIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByCarID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByCarIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatrolAreasByCarID(decimal CarID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPatrolAreasByCarID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPatrolAreasByCarID”返回的 IAsyncResult。</param>
            /// <returns>从“GetPatrolAreasByCarID”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGAREA> EndGetPatrolAreasByCarID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPatrolAreasByUserID”操作。
            /// </summary>
            /// <param name="UserID">此操作的“UserID”参数的值。</param>
            /// <param name="Day">此操作的“Day”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByUserID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPatrolAreasByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatrolAreasByUserID(decimal UserID, DateTime Day, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPatrolAreasByUserID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPatrolAreasByUserID”返回的 IAsyncResult。</param>
            /// <returns>从“GetPatrolAreasByUserID”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGAREA> EndGetPatrolAreasByUserID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPatrolRoutesByCarID”操作。
            /// </summary>
            /// <param name="CarID">此操作的“CarID”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByCarIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByCarID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByCarIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatrolRoutesByCarID(decimal CarID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPatrolRoutesByCarID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPatrolRoutesByCarID”返回的 IAsyncResult。</param>
            /// <returns>从“GetPatrolRoutesByCarID”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGROUTE> EndGetPatrolRoutesByCarID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPatrolRoutesByUserID”操作。
            /// </summary>
            /// <param name="UserID">此操作的“UserID”参数的值。</param>
            /// <param name="Day">此操作的“Day”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByUserID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPatrolRoutesByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatrolRoutesByUserID(decimal UserID, DateTime Day, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPatrolRoutesByUserID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPatrolRoutesByUserID”返回的 IAsyncResult。</param>
            /// <returns>从“GetPatrolRoutesByUserID”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGROUTE> EndGetPatrolRoutesByUserID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPersonHistoryPosotionByUserID”操作。
            /// </summary>
            /// <param name="UserID">此操作的“UserID”参数的值。</param>
            /// <param name="startTime">此操作的“startTime”参数的值。</param>
            /// <param name="endTime">此操作的“endTime”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPersonHistoryPosotionByUserIDDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPersonHistoryPosotionByUserID", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPersonHistoryPosotionByUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersonHistoryPosotionByUserID(decimal UserID, DateTime startTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPersonHistoryPosotionByUserID”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPersonHistoryPosotionByUserID”返回的 IAsyncResult。</param>
            /// <returns>从“GetPersonHistoryPosotionByUserID”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKUSERHISTORYPOSITION> EndGetPersonHistoryPosotionByUserID(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPHONEERRORS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPHONEERRORSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPHONEERRORS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPHONEERRORSResponse")]
            [WebGet()]
            IAsyncResult BeginGetPHONEERRORS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPHONEERRORS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPHONEERRORS”返回的 IAsyncResult。</param>
            /// <returns>从“GetPHONEERRORS”操作返回的“QueryResult”。</returns>
            QueryResult<PHONEERROR> EndGetPHONEERRORS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPORTALCATEGORIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetPORTALCATEGORIESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetPORTALCATEGORIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetPORTALCATEGORIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetPORTALCATEGORIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPORTALCATEGORIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPORTALCATEGORIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetPORTALCATEGORIES”操作返回的“QueryResult”。</returns>
            QueryResult<PORTALCATEGORy> EndGetPORTALCATEGORIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetQUESTIONIDS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetQUESTIONIDSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetQUESTIONIDS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetQUESTIONIDSResponse")]
            [WebGet()]
            IAsyncResult BeginGetQUESTIONIDS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetQUESTIONIDS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetQUESTIONIDS”返回的 IAsyncResult。</param>
            /// <returns>从“GetQUESTIONIDS”操作返回的“QueryResult”。</returns>
            QueryResult<QUESTIONID> EndGetQUESTIONIDS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetQUESTIONLISTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetQUESTIONLISTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetQUESTIONLISTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetQUESTIONLISTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetQUESTIONLISTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetQUESTIONLISTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetQUESTIONLISTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetQUESTIONLISTS”操作返回的“QueryResult”。</returns>
            QueryResult<QUESTIONLIST> EndGetQUESTIONLISTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRCDCEVENTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetRCDCEVENTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetRCDCEVENTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetRCDCEVENTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetRCDCEVENTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRCDCEVENTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRCDCEVENTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetRCDCEVENTS”操作返回的“QueryResult”。</returns>
            QueryResult<RCDCEVENT> EndGetRCDCEVENTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRCDCTOZFZDS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetRCDCTOZFZDSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetRCDCTOZFZDS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetRCDCTOZFZDSResponse")]
            [WebGet()]
            IAsyncResult BeginGetRCDCTOZFZDS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRCDCTOZFZDS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRCDCTOZFZDS”返回的 IAsyncResult。</param>
            /// <returns>从“GetRCDCTOZFZDS”操作返回的“QueryResult”。</returns>
            QueryResult<RCDCTOZFZD> EndGetRCDCTOZFZDS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRECIPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetRECIPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetRECIPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetRECIPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetRECIPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRECIPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRECIPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetRECIPES”操作返回的“QueryResult”。</returns>
            QueryResult<RECIPE> EndGetRECIPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetROLEFUNCTIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetROLEFUNCTIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetROLEFUNCTIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetROLEFUNCTIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetROLEFUNCTIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetROLEFUNCTIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetROLEFUNCTIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetROLEFUNCTIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ROLEFUNCTION> EndGetROLEFUNCTIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetROLEMENUS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetROLEMENUSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetROLEMENUS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetROLEMENUSResponse")]
            [WebGet()]
            IAsyncResult BeginGetROLEMENUS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetROLEMENUS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetROLEMENUS”返回的 IAsyncResult。</param>
            /// <returns>从“GetROLEMENUS”操作返回的“QueryResult”。</returns>
            QueryResult<ROLEMENU> EndGetROLEMENUS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetROLES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetROLESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetROLES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetROLESResponse")]
            [WebGet()]
            IAsyncResult BeginGetROLES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetROLES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetROLES”返回的 IAsyncResult。</param>
            /// <returns>从“GetROLES”操作返回的“QueryResult”。</returns>
            QueryResult<ROLE> EndGetROLES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSCHEDULES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSCHEDULESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSCHEDULES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSCHEDULESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSCHEDULES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSCHEDULES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSCHEDULES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSCHEDULES”操作返回的“QueryResult”。</returns>
            QueryResult<SCHEDULE> EndGetSCHEDULES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSCHEDULETYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSCHEDULETYPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSCHEDULETYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSCHEDULETYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSCHEDULETYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSCHEDULETYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSCHEDULETYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSCHEDULETYPES”操作返回的“QueryResult”。</returns>
            QueryResult<SCHEDULETYPE> EndGetSCHEDULETYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSIMPLECASEPICTURES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASEPICTURESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASEPICTURES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASEPICTURESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIMPLECASEPICTURES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSIMPLECASEPICTURES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSIMPLECASEPICTURES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSIMPLECASEPICTURES”操作返回的“QueryResult”。</returns>
            QueryResult<SIMPLECASEPICTURE> EndGetSIMPLECASEPICTURES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSIMPLECASES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSIMPLECASESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSIMPLECASES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSIMPLECASES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSIMPLECASES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSIMPLECASES”操作返回的“QueryResult”。</returns>
            QueryResult<SIMPLECAS> EndGetSIMPLECASES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSINGNINS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSINGNINSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSINGNINS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSINGNINSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSINGNINS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSINGNINS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSINGNINS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSINGNINS”操作返回的“QueryResult”。</returns>
            QueryResult<SINGNIN> EndGetSINGNINS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSPECIALACTIVITICES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITICESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITICES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITICESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSPECIALACTIVITICES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSPECIALACTIVITICES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSPECIALACTIVITICES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSPECIALACTIVITICES”操作返回的“QueryResult”。</returns>
            QueryResult<SPECIALACTIVITICE> EndGetSPECIALACTIVITICES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSPECIALACTIVITYDEFINITONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITYDEFINITONSDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITYDEFINITONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSPECIALACTIVITYDEFINITONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSPECIALACTIVITYDEFINITONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSPECIALACTIVITYDEFINITONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSPECIALACTIVITYDEFINITONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSPECIALACTIVITYDEFINITONS”操作返回的“QueryResult”。</returns>
            QueryResult<SPECIALACTIVITYDEFINITON> EndGetSPECIALACTIVITYDEFINITONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSPECIALTOZFSJS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALTOZFSJSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALTOZFSJS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSPECIALTOZFSJSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSPECIALTOZFSJS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSPECIALTOZFSJS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSPECIALTOZFSJS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSPECIALTOZFSJS”操作返回的“QueryResult”。</returns>
            QueryResult<SPECIALTOZFSJ> EndGetSPECIALTOZFSJS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSPECIALWORKFLOWINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALWORKFLOWINSTANCESDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSPECIALWORKFLOWINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSPECIALWORKFLOWINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSPECIALWORKFLOWINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSPECIALWORKFLOWINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSPECIALWORKFLOWINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSPECIALWORKFLOWINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<SPECIALWORKFLOWINSTANCE> EndGetSPECIALWORKFLOWINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREESTORES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREESTORESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREESTORES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREESTORESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREESTORES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREESTORES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREESTORES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREESTORES”操作返回的“QueryResult”。</returns>
            QueryResult<STREESTORE> EndGetSTREESTORES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREESTORETYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREESTORETYPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREESTORETYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREESTORETYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREESTORETYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREESTORETYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREESTORETYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREESTORETYPES”操作返回的“QueryResult”。</returns>
            QueryResult<STREESTORETYPE> EndGetSTREESTORETYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETASSESSMENTTYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETASSESSMENTTYPESDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETASSESSMENTTYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETASSESSMENTTYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETASSESSMENTTYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETASSESSMENTTYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETASSESSMENTTYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETASSESSMENTTYPES”操作返回的“QueryResult”。</returns>
            QueryResult<STREETASSESSMENTTYPE> EndGetSTREETASSESSMENTTYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETBASES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETBASESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETBASES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETBASESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETBASES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETBASES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETBASES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETBASES”操作返回的“QueryResult”。</returns>
            QueryResult<STREETBAS> EndGetSTREETBASES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETEXAMINES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETEXAMINESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETEXAMINES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETEXAMINESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETEXAMINES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETEXAMINES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETEXAMINES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETEXAMINES”操作返回的“QueryResult”。</returns>
            QueryResult<STREETEXAMINE> EndGetSTREETEXAMINES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETPROBLEMS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETPROBLEMSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETPROBLEMS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETPROBLEMSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETPROBLEMS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETPROBLEMS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETPROBLEMS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETPROBLEMS”操作返回的“QueryResult”。</returns>
            QueryResult<STREETPROBLEM> EndGetSTREETPROBLEMS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETS”操作返回的“QueryResult”。</returns>
            QueryResult<STREET> EndGetSTREETS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETTYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETTYPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETTYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETTYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETTYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETTYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETTYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETTYPES”操作返回的“QueryResult”。</returns>
            QueryResult<STREETTYPE> EndGetSTREETTYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSTREETUSERS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetSTREETUSERSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetSTREETUSERS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetSTREETUSERSResponse")]
            [WebGet()]
            IAsyncResult BeginGetSTREETUSERS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSTREETUSERS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSTREETUSERS”返回的 IAsyncResult。</param>
            /// <returns>从“GetSTREETUSERS”操作返回的“QueryResult”。</returns>
            QueryResult<STREETUSER> EndGetSTREETUSERS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTABLE1”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTABLE1DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTABLE1", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTABLE1Response")]
            [WebGet()]
            IAsyncResult BeginGetTABLE1(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTABLE1”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTABLE1”返回的 IAsyncResult。</param>
            /// <returns>从“GetTABLE1”操作返回的“QueryResult”。</returns>
            QueryResult<TABLE1> EndGetTABLE1(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTJGHZFS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTJGHZFSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTJGHZFS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTJGHZFSResponse")]
            [WebGet()]
            IAsyncResult BeginGetTJGHZFS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTJGHZFS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTJGHZFS”返回的 IAsyncResult。</param>
            /// <returns>从“GetTJGHZFS”操作返回的“QueryResult”。</returns>
            QueryResult<TJGHZF> EndGetTJGHZFS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSLICENSECARCOMPANIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARCOMPANIESDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARCOMPANIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARCOMPANIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSLICENSECARCOMPANIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSLICENSECARCOMPANIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSLICENSECARCOMPANIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSLICENSECARCOMPANIES”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSLICENSECARCOMPANy> EndGetTRANSLICENSECARCOMPANIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSLICENSECARS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSECARSResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSLICENSECARS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSLICENSECARS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSLICENSECARS”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSLICENSECARS”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSLICENSECAR> EndGetTRANSLICENSECARS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSLICENSEROADS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSEROADSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSEROADS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSEROADSResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSLICENSEROADS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSLICENSEROADS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSLICENSEROADS”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSLICENSEROADS”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSLICENSEROAD> EndGetTRANSLICENSEROADS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSLICENSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSLICENSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSLICENSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSLICENSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSLICENSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSLICENSES”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSLICENS> EndGetTRANSLICENSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSRECORDS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSRECORDSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSRECORDS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSRECORDSResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSRECORDS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSRECORDS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSRECORDS”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSRECORDS”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSRECORD> EndGetTRANSRECORDS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTRANSROADS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetTRANSROADSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetTRANSROADS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetTRANSROADSResponse")]
            [WebGet()]
            IAsyncResult BeginGetTRANSROADS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTRANSROADS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTRANSROADS”返回的 IAsyncResult。</param>
            /// <returns>从“GetTRANSROADS”操作返回的“QueryResult”。</returns>
            QueryResult<TRANSROAD> EndGetTRANSROADS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUNITS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUNITSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUNITS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUNITSResponse")]
            [WebGet()]
            IAsyncResult BeginGetUNITS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUNITS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUNITS”返回的 IAsyncResult。</param>
            /// <returns>从“GetUNITS”操作返回的“QueryResult”。</returns>
            QueryResult<UNIT> EndGetUNITS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUNITTYPES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUNITTYPESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUNITTYPES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUNITTYPESResponse")]
            [WebGet()]
            IAsyncResult BeginGetUNITTYPES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUNITTYPES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUNITTYPES”返回的 IAsyncResult。</param>
            /// <returns>从“GetUNITTYPES”操作返回的“QueryResult”。</returns>
            QueryResult<UNITTYPE> EndGetUNITTYPES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERARCHIVES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERARCHIVESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERARCHIVES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERARCHIVESResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERARCHIVES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERARCHIVES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERARCHIVES”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERARCHIVES”操作返回的“QueryResult”。</returns>
            QueryResult<USERARCHIVE> EndGetUSERARCHIVES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERCATEGORIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERCATEGORIESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERCATEGORIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERCATEGORIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERCATEGORIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERCATEGORIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERCATEGORIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERCATEGORIES”操作返回的“QueryResult”。</returns>
            QueryResult<USERCATEGORy> EndGetUSERCATEGORIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERGROUPs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERGROUPsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERGROUPs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERGROUPsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERGROUPs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERGROUPs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERGROUPs”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERGROUPs”操作返回的“QueryResult”。</returns>
            QueryResult<USERGROUP> EndGetUSERGROUPs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERONDUTIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERONDUTIESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERONDUTIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERONDUTIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERONDUTIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERONDUTIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERONDUTIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERONDUTIES”操作返回的“QueryResult”。</returns>
            QueryResult<USERONDUTy> EndGetUSERONDUTIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERPHONESIGNINS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERPHONESIGNINSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERPHONESIGNINS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERPHONESIGNINSResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERPHONESIGNINS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERPHONESIGNINS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERPHONESIGNINS”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERPHONESIGNINS”操作返回的“QueryResult”。</returns>
            QueryResult<USERPHONESIGNIN> EndGetUSERPHONESIGNINS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERPOSITIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<USERPOSITION> EndGetUSERPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERROLES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERROLESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERROLES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERROLESResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERROLES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERROLES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERROLES”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERROLES”操作返回的“QueryResult”。</returns>
            QueryResult<USERROLE> EndGetUSERROLES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERSResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERS”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERS”操作返回的“QueryResult”。</returns>
            QueryResult<USER> EndGetUSERS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUSERS_DEL”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetUSERS_DELDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetUSERS_DEL", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetUSERS_DELResponse")]
            [WebGet()]
            IAsyncResult BeginGetUSERS_DEL(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUSERS_DEL”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUSERS_DEL”返回的 IAsyncResult。</param>
            /// <returns>从“GetUSERS_DEL”操作返回的“QueryResult”。</returns>
            QueryResult<USERS_DEL> EndGetUSERS_DEL(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWORKFLOWDEFINITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWDEFINITIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWDEFINITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWDEFINITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetWORKFLOWDEFINITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWORKFLOWDEFINITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWORKFLOWDEFINITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetWORKFLOWDEFINITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<WORKFLOWDEFINITION> EndGetWORKFLOWDEFINITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWORKFLOWINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWINSTANCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetWORKFLOWINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWORKFLOWINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWORKFLOWINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetWORKFLOWINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<WORKFLOWINSTANCE> EndGetWORKFLOWINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWORKFLOWPEROPERTIES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWPEROPERTIESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWPEROPERTIES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWPEROPERTIESResponse")]
            [WebGet()]
            IAsyncResult BeginGetWORKFLOWPEROPERTIES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWORKFLOWPEROPERTIES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWORKFLOWPEROPERTIES”返回的 IAsyncResult。</param>
            /// <returns>从“GetWORKFLOWPEROPERTIES”操作返回的“QueryResult”。</returns>
            QueryResult<WORKFLOWPEROPERTy> EndGetWORKFLOWPEROPERTIES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWORKFLOWSTATUSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWSTATUSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWSTATUSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetWORKFLOWSTATUSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetWORKFLOWSTATUSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWORKFLOWSTATUSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWORKFLOWSTATUSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetWORKFLOWSTATUSES”操作返回的“QueryResult”。</returns>
            QueryResult<WORKFLOWSTATUS> EndGetWORKFLOWSTATUSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWTUSERRELATIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetWTUSERRELATIONSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetWTUSERRELATIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetWTUSERRELATIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetWTUSERRELATIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWTUSERRELATIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWTUSERRELATIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetWTUSERRELATIONS”操作返回的“QueryResult”。</returns>
            QueryResult<WTUSERRELATION> EndGetWTUSERRELATIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXCJGAREAS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXCJGAREASDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXCJGAREAS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXCJGAREASResponse")]
            [WebGet()]
            IAsyncResult BeginGetXCJGAREAS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXCJGAREAS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXCJGAREAS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXCJGAREAS”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGAREA> EndGetXCJGAREAS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXCJGCARTASKS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXCJGCARTASKSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXCJGCARTASKS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXCJGCARTASKSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXCJGCARTASKS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXCJGCARTASKS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXCJGCARTASKS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXCJGCARTASKS”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGCARTASK> EndGetXCJGCARTASKS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXCJGROUTES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXCJGROUTESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXCJGROUTES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXCJGROUTESResponse")]
            [WebGet()]
            IAsyncResult BeginGetXCJGROUTES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXCJGROUTES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXCJGROUTES”返回的 IAsyncResult。</param>
            /// <returns>从“GetXCJGROUTES”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGROUTE> EndGetXCJGROUTES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXCJGSIGNINS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXCJGSIGNINSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXCJGSIGNINS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXCJGSIGNINSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXCJGSIGNINS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXCJGSIGNINS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXCJGSIGNINS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXCJGSIGNINS”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGSIGNIN> EndGetXCJGSIGNINS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXCJGUSERTASKS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXCJGUSERTASKSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXCJGUSERTASKS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXCJGUSERTASKSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXCJGUSERTASKS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXCJGUSERTASKS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXCJGUSERTASKS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXCJGUSERTASKS”操作返回的“QueryResult”。</returns>
            QueryResult<XCJGUSERTASK> EndGetXCJGUSERTASKS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPACTDEFS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTDEFSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTDEFS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPACTDEFSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPACTDEFS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPACTDEFS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPACTDEFS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPACTDEFS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPACTDEF> EndGetXZSPACTDEFS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPACTISTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPACTISTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPACTISTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPACTISTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPACTISTS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPACTIST> EndGetXZSPACTISTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPACTISTS_DELETE”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETE", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETEResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPACTISTS_DELETE(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPACTISTS_DELETE”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPACTISTS_DELETE”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPACTISTS_DELETE”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPACTISTS_DELETE> EndGetXZSPACTISTS_DELETE(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPACTISTS_DELETE1”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETE1DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETE1", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPACTISTS_DELETE1Response")]
            [WebGet()]
            IAsyncResult BeginGetXZSPACTISTS_DELETE1(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPACTISTS_DELETE1”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPACTISTS_DELETE1”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPACTISTS_DELETE1”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPACTISTS_DELETE1> EndGetXZSPACTISTS_DELETE1(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPACTIVITYDEFINITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTIVITYDEFINITIONSDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPACTIVITYDEFINITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPACTIVITYDEFINITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPACTIVITYDEFINITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPACTIVITYDEFINITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPACTIVITYDEFINITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPACTIVITYDEFINITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPACTIVITYDEFINITION> EndGetXZSPACTIVITYDEFINITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPAPPROVALPROJECTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPAPPROVALPROJECTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPAPPROVALPROJECTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPAPPROVALPROJECTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPAPPROVALPROJECTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPAPPROVALPROJECTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPAPPROVALPROJECTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPAPPROVALPROJECTS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPAPPROVALPROJECT> EndGetXZSPAPPROVALPROJECTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPKZHCs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPKZHCsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPKZHCs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPKZHCsResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPKZHCs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPKZHCs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPKZHCs”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPKZHCs”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPKZHC> EndGetXZSPKZHCs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPNEWACTIVITYDEFINITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWACTIVITYDEFINITIONSDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWACTIVITYDEFINITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWACTIVITYDEFINITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPNEWACTIVITYDEFINITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPNEWACTIVITYDEFINITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPNEWACTIVITYDEFINITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPNEWACTIVITYDEFINITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPNEWACTIVITYDEFINITION> EndGetXZSPNEWACTIVITYDEFINITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPNEWTABs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWTABsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWTABs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWTABsResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPNEWTABs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPNEWTABs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPNEWTABs”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPNEWTABs”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPNEWTAB> EndGetXZSPNEWTABs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPNEWWORKFLOWINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWWORKFLOWINSTANCESDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWWORKFLOWINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPNEWWORKFLOWINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPNEWWORKFLOWINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPNEWWORKFLOWINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPNEWWORKFLOWINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPNEWWORKFLOWINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPNEWWORKFLOWINSTANCE> EndGetXZSPNEWWORKFLOWINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPPROJECTNAMEs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPPROJECTNAMEsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPPROJECTNAMEs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPPROJECTNAMEsResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPPROJECTNAMEs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPPROJECTNAMEs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPPROJECTNAMEs”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPPROJECTNAMEs”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPPROJECTNAME> EndGetXZSPPROJECTNAMEs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPSTUS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPSTUSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPSTUS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPSTUSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPSTUS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPSTUS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPSTUS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPSTUS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPSTU> EndGetXZSPSTUS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPWFDEFS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFDEFSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFDEFS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPWFDEFSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPWFDEFS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPWFDEFS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPWFDEFS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPWFDEFS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPWFDEF> EndGetXZSPWFDEFS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPWFISTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPWFISTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPWFISTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPWFISTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPWFISTS”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPWFIST> EndGetXZSPWFISTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZSPWFISTS_DELETE”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTS_DELETEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTS_DELETE", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZSPWFISTS_DELETEResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZSPWFISTS_DELETE(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZSPWFISTS_DELETE”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZSPWFISTS_DELETE”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZSPWFISTS_DELETE”操作返回的“QueryResult”。</returns>
            QueryResult<XZSPWFISTS_DELETE> EndGetXZSPWFISTS_DELETE(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZZFLISTSHS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZZFLISTSHSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZZFLISTSHS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZZFLISTSHSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZZFLISTSHS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZZFLISTSHS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZZFLISTSHS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZZFLISTSHS”操作返回的“QueryResult”。</returns>
            QueryResult<XZZFLISTSH> EndGetXZZFLISTSHS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZZFQUESTIONCLASSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZZFQUESTIONCLASSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZZFQUESTIONCLASSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZZFQUESTIONCLASSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZZFQUESTIONCLASSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZZFQUESTIONCLASSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZZFQUESTIONCLASSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZZFQUESTIONCLASSES”操作返回的“QueryResult”。</returns>
            QueryResult<XZZFQUESTIONCLASS> EndGetXZZFQUESTIONCLASSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetXZZFTABLISTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetXZZFTABLISTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetXZZFTABLISTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetXZZFTABLISTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetXZZFTABLISTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetXZZFTABLISTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetXZZFTABLISTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetXZZFTABLISTS”操作返回的“QueryResult”。</returns>
            QueryResult<XZZFTABLIST> EndGetXZZFTABLISTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZBRZLISTS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZBRZLISTSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZBRZLISTS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZBRZLISTSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZBRZLISTS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZBRZLISTS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZBRZLISTS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZBRZLISTS”操作返回的“QueryResult”。</returns>
            QueryResult<ZBRZLIST> EndGetZBRZLISTS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFGKCARHISTORYPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARHISTORYPOSITIONSDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARHISTORYPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFGKCARHISTORYPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFGKCARHISTORYPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFGKCARHISTORYPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFGKCARHISTORYPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFGKCARHISTORYPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKCARHISTORYPOSITION> EndGetZFGKCARHISTORYPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFGKCARLATESTPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARLATESTPOSITIONSDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARLATESTPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFGKCARLATESTPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFGKCARLATESTPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFGKCARLATESTPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFGKCARLATESTPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFGKCARLATESTPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKCARLATESTPOSITION> EndGetZFGKCARLATESTPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFGKCARS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFGKCARS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFGKCARSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFGKCARS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFGKCARS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFGKCARS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFGKCARS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKCAR> EndGetZFGKCARS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFGKUSERHISTORYPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERHISTORYPOSITIONSDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERHISTORYPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERHISTORYPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFGKUSERHISTORYPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFGKUSERHISTORYPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFGKUSERHISTORYPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFGKUSERHISTORYPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKUSERHISTORYPOSITION> EndGetZFGKUSERHISTORYPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFGKUSERLATESTPOSITIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERLATESTPOSITIONSDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERLATESTPOSITIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFGKUSERLATESTPOSITIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFGKUSERLATESTPOSITIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFGKUSERLATESTPOSITIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFGKUSERLATESTPOSITIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFGKUSERLATESTPOSITIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFGKUSERLATESTPOSITION> EndGetZFGKUSERLATESTPOSITIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJACTIVITYDEFINITIONs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYDEFINITIONsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYDEFINITIONs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYDEFINITIONsResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJACTIVITYDEFINITIONs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJACTIVITYDEFINITIONs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJACTIVITYDEFINITIONs”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJACTIVITYDEFINITIONs”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJACTIVITYDEFINITION> EndGetZFSJACTIVITYDEFINITIONs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJACTIVITYINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYINSTANCESDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJACTIVITYINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJACTIVITYINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJACTIVITYINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJACTIVITYINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJACTIVITYINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJACTIVITYINSTANCE> EndGetZFSJACTIVITYINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJCHARTBYQLs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJCHARTBYQLsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJCHARTBYQLs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJCHARTBYQLsResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJCHARTBYQLs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJCHARTBYQLs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJCHARTBYQLs”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJCHARTBYQLs”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJCHARTBYQL> EndGetZFSJCHARTBYQLs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJCHECKWAYs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJCHECKWAYsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJCHECKWAYs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJCHECKWAYsResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJCHECKWAYs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJCHECKWAYs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJCHECKWAYs”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJCHECKWAYs”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJCHECKWAY> EndGetZFSJCHECKWAYs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJPROCESSWAYs”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJPROCESSWAYsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJPROCESSWAYs", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJPROCESSWAYsResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJPROCESSWAYs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJPROCESSWAYs”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJPROCESSWAYs”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJPROCESSWAYs”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJPROCESSWAY> EndGetZFSJPROCESSWAYs(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJQUESTIONCLASSES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJQUESTIONCLASSESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJQUESTIONCLASSES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJQUESTIONCLASSESResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJQUESTIONCLASSES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJQUESTIONCLASSES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJQUESTIONCLASSES”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJQUESTIONCLASSES”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJQUESTIONCLASS> EndGetZFSJQUESTIONCLASSES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJSOURCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSOURCESDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSOURCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJSOURCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJSOURCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJSOURCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJSOURCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJSOURCES”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJSOURCE> EndGetZFSJSOURCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJSTATUS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSTATUSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSTATUS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJSTATUSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJSTATUS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJSTATUS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJSTATUS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJSTATUS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJSTATU> EndGetZFSJSTATUS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJSUMMARYINFORMATIONS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSUMMARYINFORMATIONSDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJSUMMARYINFORMATIONS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJSUMMARYINFORMATIONSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJSUMMARYINFORMATIONS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJSUMMARYINFORMATIONS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJSUMMARYINFORMATIONS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJSUMMARYINFORMATIONS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJSUMMARYINFORMATION> EndGetZFSJSUMMARYINFORMATIONS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJTIMELIMITS”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJTIMELIMITSDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJTIMELIMITS", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJTIMELIMITSResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJTIMELIMITS(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJTIMELIMITS”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJTIMELIMITS”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJTIMELIMITS”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJTIMELIMIT> EndGetZFSJTIMELIMITS(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetZFSJWORKFLOWINSTANCES”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/GetZFSJWORKFLOWINSTANCESDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/GetZFSJWORKFLOWINSTANCES", ReplyAction="http://tempuri.org/NEWPLEDomainService/GetZFSJWORKFLOWINSTANCESResponse")]
            [WebGet()]
            IAsyncResult BeginGetZFSJWORKFLOWINSTANCES(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetZFSJWORKFLOWINSTANCES”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetZFSJWORKFLOWINSTANCES”返回的 IAsyncResult。</param>
            /// <returns>从“GetZFSJWORKFLOWINSTANCES”操作返回的“QueryResult”。</returns>
            QueryResult<ZFSJWORKFLOWINSTANCE> EndGetZFSJWORKFLOWINSTANCES(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SubmitChanges”操作。
            /// </summary>
            /// <param name="changeSet">要提交的变更集。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/NEWPLEDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/NEWPLEDomainService/SubmitChanges", ReplyAction="http://tempuri.org/NEWPLEDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSubmitChanges”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSubmitChanges”返回的 IAsyncResult。</param>
            /// <returns>从“SubmitChanges”返回的变更集入口元素的集合。</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class NEWPLEDomainContextEntityContainer : EntityContainer
        {
            
            public NEWPLEDomainContextEntityContainer()
            {
                this.CreateEntitySet<ACITIVITYDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<ACTIVITYDEFINITIONDOCPHAS>(EntitySetOperations.All);
                this.CreateEntitySet<ACTIVITYINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<ACTIVITYPERMISSION>(EntitySetOperations.All);
                this.CreateEntitySet<ACTIVITYPERMISSIONTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<ACTIVITYSTATUS>(EntitySetOperations.All);
                this.CreateEntitySet<APPVERSION>(EntitySetOperations.All);
                this.CreateEntitySet<ARTICLE>(EntitySetOperations.All);
                this.CreateEntitySet<CARSYNCPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<CARTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<CASEPHONESMS>(EntitySetOperations.All);
                this.CreateEntitySet<CASESOURCE>(EntitySetOperations.All);
                this.CreateEntitySet<Car>(EntitySetOperations.None);
                this.CreateEntitySet<EventLaw>(EntitySetOperations.None);
                this.CreateEntitySet<Person>(EntitySetOperations.None);
                this.CreateEntitySet<Unit>(EntitySetOperations.None);
                this.CreateEntitySet<CONSTRSITE>(EntitySetOperations.All);
                this.CreateEntitySet<CONTACT>(EntitySetOperations.All);
                this.CreateEntitySet<CONTACTSGROUP>(EntitySetOperations.All);
                this.CreateEntitySet<DOCDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<DOCDEFINITIONRELATION>(EntitySetOperations.All);
                this.CreateEntitySet<DOCINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<DOCPHAS>(EntitySetOperations.All);
                this.CreateEntitySet<DUMPINGSITE>(EntitySetOperations.All);
                this.CreateEntitySet<FUNCTION>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWCASENAME>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWEVENT>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWMONTHLYREPORT>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWSOURCE>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWSTATUE>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWTOZFZD>(EntitySetOperations.All);
                this.CreateEntitySet<GGFWXFDOC>(EntitySetOperations.All);
                this.CreateEntitySet<GROUP>(EntitySetOperations.All);
                this.CreateEntitySet<ILLEGALCLASS>(EntitySetOperations.All);
                this.CreateEntitySet<ILLEGALITEM>(EntitySetOperations.All);
                this.CreateEntitySet<LAYERTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<LEADERWEEKWORKPLAN>(EntitySetOperations.All);
                this.CreateEntitySet<MAPINFO>(EntitySetOperations.All);
                this.CreateEntitySet<MENU>(EntitySetOperations.All);
                this.CreateEntitySet<MESSAGE>(EntitySetOperations.All);
                this.CreateEntitySet<MESSAGETOUSER>(EntitySetOperations.All);
                this.CreateEntitySet<ONDUTy>(EntitySetOperations.All);
                this.CreateEntitySet<PHONEERROR>(EntitySetOperations.All);
                this.CreateEntitySet<PORTALCATEGORy>(EntitySetOperations.All);
                this.CreateEntitySet<QUESTIONID>(EntitySetOperations.All);
                this.CreateEntitySet<QUESTIONLIST>(EntitySetOperations.All);
                this.CreateEntitySet<RCDCEVENT>(EntitySetOperations.All);
                this.CreateEntitySet<RCDCTOZFZD>(EntitySetOperations.All);
                this.CreateEntitySet<RECIPE>(EntitySetOperations.All);
                this.CreateEntitySet<ROLE>(EntitySetOperations.All);
                this.CreateEntitySet<ROLEFUNCTION>(EntitySetOperations.All);
                this.CreateEntitySet<ROLEMENU>(EntitySetOperations.All);
                this.CreateEntitySet<SCHEDULE>(EntitySetOperations.All);
                this.CreateEntitySet<SCHEDULETYPE>(EntitySetOperations.All);
                this.CreateEntitySet<SIMPLECAS>(EntitySetOperations.All);
                this.CreateEntitySet<SIMPLECASEPICTURE>(EntitySetOperations.All);
                this.CreateEntitySet<SINGNIN>(EntitySetOperations.All);
                this.CreateEntitySet<SPECIALACTIVITICE>(EntitySetOperations.All);
                this.CreateEntitySet<SPECIALACTIVITYDEFINITON>(EntitySetOperations.All);
                this.CreateEntitySet<SPECIALTOZFSJ>(EntitySetOperations.All);
                this.CreateEntitySet<SPECIALWORKFLOWINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<STREESTORE>(EntitySetOperations.All);
                this.CreateEntitySet<STREESTORETYPE>(EntitySetOperations.All);
                this.CreateEntitySet<STREET>(EntitySetOperations.All);
                this.CreateEntitySet<STREETASSESSMENTTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<STREETBAS>(EntitySetOperations.All);
                this.CreateEntitySet<STREETEXAMINE>(EntitySetOperations.All);
                this.CreateEntitySet<STREETPROBLEM>(EntitySetOperations.All);
                this.CreateEntitySet<STREETTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<STREETUSER>(EntitySetOperations.All);
                this.CreateEntitySet<TABLE1>(EntitySetOperations.All);
                this.CreateEntitySet<TJGHZF>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSLICENS>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSLICENSECAR>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSLICENSECARCOMPANy>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSLICENSEROAD>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSRECORD>(EntitySetOperations.All);
                this.CreateEntitySet<TRANSROAD>(EntitySetOperations.All);
                this.CreateEntitySet<UNIT>(EntitySetOperations.All);
                this.CreateEntitySet<UNITTYPE>(EntitySetOperations.All);
                this.CreateEntitySet<USER>(EntitySetOperations.All);
                this.CreateEntitySet<USERARCHIVE>(EntitySetOperations.All);
                this.CreateEntitySet<USERCATEGORy>(EntitySetOperations.All);
                this.CreateEntitySet<USERGROUP>(EntitySetOperations.All);
                this.CreateEntitySet<USERONDUTy>(EntitySetOperations.All);
                this.CreateEntitySet<USERPHONESIGNIN>(EntitySetOperations.All);
                this.CreateEntitySet<USERPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<USERROLE>(EntitySetOperations.All);
                this.CreateEntitySet<USERS_DEL>(EntitySetOperations.All);
                this.CreateEntitySet<WORKFLOWDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<WORKFLOWINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<WORKFLOWPEROPERTy>(EntitySetOperations.All);
                this.CreateEntitySet<WORKFLOWSTATUS>(EntitySetOperations.All);
                this.CreateEntitySet<WTUSERRELATION>(EntitySetOperations.All);
                this.CreateEntitySet<XCJGAREA>(EntitySetOperations.All);
                this.CreateEntitySet<XCJGCARTASK>(EntitySetOperations.All);
                this.CreateEntitySet<XCJGROUTE>(EntitySetOperations.All);
                this.CreateEntitySet<XCJGSIGNIN>(EntitySetOperations.All);
                this.CreateEntitySet<XCJGUSERTASK>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPACTDEF>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPACTIST>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPACTISTS_DELETE>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPACTISTS_DELETE1>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPACTIVITYDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPAPPROVALPROJECT>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPKZHC>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPNEWACTIVITYDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPNEWTAB>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPNEWWORKFLOWINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPPROJECTNAME>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPSTU>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPWFDEF>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPWFIST>(EntitySetOperations.All);
                this.CreateEntitySet<XZSPWFISTS_DELETE>(EntitySetOperations.All);
                this.CreateEntitySet<XZZFLISTSH>(EntitySetOperations.All);
                this.CreateEntitySet<XZZFQUESTIONCLASS>(EntitySetOperations.All);
                this.CreateEntitySet<XZZFTABLIST>(EntitySetOperations.All);
                this.CreateEntitySet<ZBRZLIST>(EntitySetOperations.All);
                this.CreateEntitySet<ZFGKCAR>(EntitySetOperations.All);
                this.CreateEntitySet<ZFGKCARHISTORYPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFGKCARLATESTPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFGKUSERHISTORYPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFGKUSERLATESTPOSITION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJACTIVITYDEFINITION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJACTIVITYINSTANCE>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJCHARTBYQL>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJCHECKWAY>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJPROCESSWAY>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJQUESTIONCLASS>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJSOURCE>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJSTATU>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJSUMMARYINFORMATION>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJTIMELIMIT>(EntitySetOperations.All);
                this.CreateEntitySet<ZFSJWORKFLOWINSTANCE>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// “ONDUTy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ONDUTy : Entity
    {
        
        private string _content;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private decimal _id;
        
        private string _ondutyname;
        
        private Nullable<DateTime> _ondutytime;
        
        private string _onrouteid;
        
        private Nullable<DateTime> _overtime;
        
        private Nullable<decimal> _statuid;
        
        private EntityRef<USER> _user;
        
        private EntityCollection<USERONDUTy> _useronduties;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnONDUTYNAMEChanging(string value);
        partial void OnONDUTYNAMEChanged();
        partial void OnONDUTYTIMEChanging(Nullable<DateTime> value);
        partial void OnONDUTYTIMEChanged();
        partial void OnONROUTEIDChanging(string value);
        partial void OnONROUTEIDChanged();
        partial void OnOVERTIMEChanging(Nullable<DateTime> value);
        partial void OnOVERTIMEChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ONDUTy"/> 类的新实例。
        /// </summary>
        public ONDUTy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONDUTYNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ONDUTYNAME
        {
            get
            {
                return this._ondutyname;
            }
            set
            {
                if ((this._ondutyname != value))
                {
                    this.OnONDUTYNAMEChanging(value);
                    this.RaiseDataMemberChanging("ONDUTYNAME");
                    this.ValidateProperty("ONDUTYNAME", value);
                    this._ondutyname = value;
                    this.RaiseDataMemberChanged("ONDUTYNAME");
                    this.OnONDUTYNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONDUTYTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ONDUTYTIME
        {
            get
            {
                return this._ondutytime;
            }
            set
            {
                if ((this._ondutytime != value))
                {
                    this.OnONDUTYTIMEChanging(value);
                    this.RaiseDataMemberChanging("ONDUTYTIME");
                    this.ValidateProperty("ONDUTYTIME", value);
                    this._ondutytime = value;
                    this.RaiseDataMemberChanged("ONDUTYTIME");
                    this.OnONDUTYTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONROUTEID”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ONROUTEID
        {
            get
            {
                return this._onrouteid;
            }
            set
            {
                if ((this._onrouteid != value))
                {
                    this.OnONROUTEIDChanging(value);
                    this.RaiseDataMemberChanging("ONROUTEID");
                    this.ValidateProperty("ONROUTEID", value);
                    this._onrouteid = value;
                    this.RaiseDataMemberChanged("ONROUTEID");
                    this.OnONROUTEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OVERTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OVERTIME
        {
            get
            {
                return this._overtime;
            }
            set
            {
                if ((this._overtime != value))
                {
                    this.OnOVERTIMEChanging(value);
                    this.RaiseDataMemberChanging("OVERTIME");
                    this.ValidateProperty("OVERTIME", value);
                    this._overtime = value;
                    this.RaiseDataMemberChanged("OVERTIME");
                    this.OnOVERTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_ONDUTy", "CREATEUSERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.ONDUTIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CREATEUSERID = value.USERID;
                    }
                    else
                    {
                        this.CREATEUSERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.ONDUTIES.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USERONDUTy"/> 实体实例的集合。
        /// </summary>
        [Association("ONDUTy_USERONDUTy", "ID", "ONDUTYID")]
        [XmlIgnore()]
        public EntityCollection<USERONDUTy> USERONDUTIES
        {
            get
            {
                if ((this._useronduties == null))
                {
                    this._useronduties = new EntityCollection<USERONDUTy>(this, "USERONDUTIES", this.FilterUSERONDUTIES, this.AttachUSERONDUTIES, this.DetachUSERONDUTIES);
                }
                return this._useronduties;
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.CREATEUSERID);
        }
        
        private void AttachUSERONDUTIES(USERONDUTy entity)
        {
            entity.ONDUTy = this;
        }
        
        private void DetachUSERONDUTIES(USERONDUTy entity)
        {
            entity.ONDUTy = null;
        }
        
        private bool FilterUSERONDUTIES(USERONDUTy entity)
        {
            return (entity.ONDUTYID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “PHONEERROR”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class PHONEERROR : Entity
    {
        
        private string _content;
        
        private Nullable<DateTime> _createtime;
        
        private decimal _id;
        
        private Nullable<decimal> _statuid;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="PHONEERROR"/> 类的新实例。
        /// </summary>
        public PHONEERROR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “PORTALCATEGORy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class PORTALCATEGORy : Entity
    {
        
        private EntityCollection<ARTICLE> _articles;
        
        private decimal _categoryid;
        
        private Nullable<DateTime> _createdtime;
        
        private string _name;
        
        private Nullable<decimal> _parentid;
        
        private Nullable<decimal> _seqno;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCATEGORYIDChanging(decimal value);
        partial void OnCATEGORYIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="PORTALCATEGORy"/> 类的新实例。
        /// </summary>
        public PORTALCATEGORy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ARTICLE"/> 实体实例的集合。
        /// </summary>
        [Association("PORTALCATEGORy_ARTICLE", "CATEGORYID", "CATEGORYID")]
        [XmlIgnore()]
        public EntityCollection<ARTICLE> ARTICLES
        {
            get
            {
                if ((this._articles == null))
                {
                    this._articles = new EntityCollection<ARTICLE>(this, "ARTICLES", this.FilterARTICLES, this.AttachARTICLES, this.DetachARTICLES);
                }
                return this._articles;
            }
        }
        
        /// <summary>
        /// 获取或设置“CATEGORYID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CATEGORYID
        {
            get
            {
                return this._categoryid;
            }
            set
            {
                if ((this._categoryid != value))
                {
                    this.OnCATEGORYIDChanging(value);
                    this.ValidateProperty("CATEGORYID", value);
                    this._categoryid = value;
                    this.RaisePropertyChanged("CATEGORYID");
                    this.OnCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        private void AttachARTICLES(ARTICLE entity)
        {
            entity.PORTALCATEGORy = this;
        }
        
        private void DetachARTICLES(ARTICLE entity)
        {
            entity.PORTALCATEGORy = null;
        }
        
        private bool FilterARTICLES(ARTICLE entity)
        {
            return (entity.CATEGORYID == this.CATEGORYID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._categoryid;
        }
    }
    
    /// <summary>
    /// “QUESTIONID”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class QUESTIONID : Entity
    {
        
        private Nullable<decimal> _parentid;
        
        private Nullable<decimal> _typedj;
        
        private decimal _typeid;
        
        private string _typename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnTYPEDJChanging(Nullable<decimal> value);
        partial void OnTYPEDJChanged();
        partial void OnTYPEIDChanging(decimal value);
        partial void OnTYPEIDChanged();
        partial void OnTYPENAMEChanging(string value);
        partial void OnTYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="QUESTIONID"/> 类的新实例。
        /// </summary>
        public QUESTIONID()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEDJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEDJ
        {
            get
            {
                return this._typedj;
            }
            set
            {
                if ((this._typedj != value))
                {
                    this.OnTYPEDJChanging(value);
                    this.RaiseDataMemberChanging("TYPEDJ");
                    this.ValidateProperty("TYPEDJ", value);
                    this._typedj = value;
                    this.RaiseDataMemberChanged("TYPEDJ");
                    this.OnTYPEDJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaisePropertyChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TYPENAME
        {
            get
            {
                return this._typename;
            }
            set
            {
                if ((this._typename != value))
                {
                    this.OnTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("TYPENAME");
                    this.ValidateProperty("TYPENAME", value);
                    this._typename = value;
                    this.RaiseDataMemberChanged("TYPENAME");
                    this.OnTYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._typeid;
        }
    }
    
    /// <summary>
    /// “QUESTIONLIST”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class QUESTIONLIST : Entity
    {
        
        private string _dlid;
        
        private decimal _id;
        
        private string _pict1;
        
        private string _pict2;
        
        private string _pict3;
        
        private string _sbren;
        
        private Nullable<DateTime> _sbtime;
        
        private string _sfdd;
        
        private string _sjxq;
        
        private string _xlid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDLIDChanging(string value);
        partial void OnDLIDChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnPICT1Changing(string value);
        partial void OnPICT1Changed();
        partial void OnPICT2Changing(string value);
        partial void OnPICT2Changed();
        partial void OnPICT3Changing(string value);
        partial void OnPICT3Changed();
        partial void OnSBRENChanging(string value);
        partial void OnSBRENChanged();
        partial void OnSBTIMEChanging(Nullable<DateTime> value);
        partial void OnSBTIMEChanged();
        partial void OnSFDDChanging(string value);
        partial void OnSFDDChanged();
        partial void OnSJXQChanging(string value);
        partial void OnSJXQChanged();
        partial void OnXLIDChanging(string value);
        partial void OnXLIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="QUESTIONLIST"/> 类的新实例。
        /// </summary>
        public QUESTIONLIST()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DLID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DLID
        {
            get
            {
                return this._dlid;
            }
            set
            {
                if ((this._dlid != value))
                {
                    this.OnDLIDChanging(value);
                    this.RaiseDataMemberChanging("DLID");
                    this.ValidateProperty("DLID", value);
                    this._dlid = value;
                    this.RaiseDataMemberChanged("DLID");
                    this.OnDLIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICT1”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string PICT1
        {
            get
            {
                return this._pict1;
            }
            set
            {
                if ((this._pict1 != value))
                {
                    this.OnPICT1Changing(value);
                    this.RaiseDataMemberChanging("PICT1");
                    this.ValidateProperty("PICT1", value);
                    this._pict1 = value;
                    this.RaiseDataMemberChanged("PICT1");
                    this.OnPICT1Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICT2”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PICT2
        {
            get
            {
                return this._pict2;
            }
            set
            {
                if ((this._pict2 != value))
                {
                    this.OnPICT2Changing(value);
                    this.RaiseDataMemberChanging("PICT2");
                    this.ValidateProperty("PICT2", value);
                    this._pict2 = value;
                    this.RaiseDataMemberChanged("PICT2");
                    this.OnPICT2Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICT3”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PICT3
        {
            get
            {
                return this._pict3;
            }
            set
            {
                if ((this._pict3 != value))
                {
                    this.OnPICT3Changing(value);
                    this.RaiseDataMemberChanging("PICT3");
                    this.ValidateProperty("PICT3", value);
                    this._pict3 = value;
                    this.RaiseDataMemberChanged("PICT3");
                    this.OnPICT3Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SBREN”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SBREN
        {
            get
            {
                return this._sbren;
            }
            set
            {
                if ((this._sbren != value))
                {
                    this.OnSBRENChanging(value);
                    this.RaiseDataMemberChanging("SBREN");
                    this.ValidateProperty("SBREN", value);
                    this._sbren = value;
                    this.RaiseDataMemberChanged("SBREN");
                    this.OnSBRENChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SBTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> SBTIME
        {
            get
            {
                return this._sbtime;
            }
            set
            {
                if ((this._sbtime != value))
                {
                    this.OnSBTIMEChanging(value);
                    this.RaiseDataMemberChanging("SBTIME");
                    this.ValidateProperty("SBTIME", value);
                    this._sbtime = value;
                    this.RaiseDataMemberChanged("SBTIME");
                    this.OnSBTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SFDD”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string SFDD
        {
            get
            {
                return this._sfdd;
            }
            set
            {
                if ((this._sfdd != value))
                {
                    this.OnSFDDChanging(value);
                    this.RaiseDataMemberChanging("SFDD");
                    this.ValidateProperty("SFDD", value);
                    this._sfdd = value;
                    this.RaiseDataMemberChanged("SFDD");
                    this.OnSFDDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SJXQ”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string SJXQ
        {
            get
            {
                return this._sjxq;
            }
            set
            {
                if ((this._sjxq != value))
                {
                    this.OnSJXQChanging(value);
                    this.RaiseDataMemberChanging("SJXQ");
                    this.ValidateProperty("SJXQ", value);
                    this._sjxq = value;
                    this.RaiseDataMemberChanged("SJXQ");
                    this.OnSJXQChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“XLID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string XLID
        {
            get
            {
                return this._xlid;
            }
            set
            {
                if ((this._xlid != value))
                {
                    this.OnXLIDChanging(value);
                    this.RaiseDataMemberChanging("XLID");
                    this.ValidateProperty("XLID", value);
                    this._xlid = value;
                    this.RaiseDataMemberChanged("XLID");
                    this.OnXLIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “RCDCEVENT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class RCDCEVENT : Entity
    {
        
        private Nullable<decimal> _classbid;
        
        private Nullable<decimal> _classsid;
        
        private Nullable<DateTime> _createtime;
        
        private string _eventaddress;
        
        private string _eventcontent;
        
        private decimal _eventid;
        
        private string _eventsource;
        
        private string _eventtitle;
        
        private Nullable<DateTime> _fxsj;
        
        private string _geometry;
        
        private Nullable<decimal> _grade;
        
        private string _guidonly;
        
        private string _pictures;
        
        private EntityCollection<RCDCTOZFZD> _rcdctozfzds;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCLASSBIDChanging(Nullable<decimal> value);
        partial void OnCLASSBIDChanged();
        partial void OnCLASSSIDChanging(Nullable<decimal> value);
        partial void OnCLASSSIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnEVENTADDRESSChanging(string value);
        partial void OnEVENTADDRESSChanged();
        partial void OnEVENTCONTENTChanging(string value);
        partial void OnEVENTCONTENTChanged();
        partial void OnEVENTIDChanging(decimal value);
        partial void OnEVENTIDChanged();
        partial void OnEVENTSOURCEChanging(string value);
        partial void OnEVENTSOURCEChanged();
        partial void OnEVENTTITLEChanging(string value);
        partial void OnEVENTTITLEChanged();
        partial void OnFXSJChanging(Nullable<DateTime> value);
        partial void OnFXSJChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnGRADEChanging(Nullable<decimal> value);
        partial void OnGRADEChanged();
        partial void OnGUIDONLYChanging(string value);
        partial void OnGUIDONLYChanged();
        partial void OnPICTURESChanging(string value);
        partial void OnPICTURESChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RCDCEVENT"/> 类的新实例。
        /// </summary>
        public RCDCEVENT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CLASSBID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSBID
        {
            get
            {
                return this._classbid;
            }
            set
            {
                if ((this._classbid != value))
                {
                    this.OnCLASSBIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSBID");
                    this.ValidateProperty("CLASSBID", value);
                    this._classbid = value;
                    this.RaiseDataMemberChanged("CLASSBID");
                    this.OnCLASSBIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSSID
        {
            get
            {
                return this._classsid;
            }
            set
            {
                if ((this._classsid != value))
                {
                    this.OnCLASSSIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSSID");
                    this.ValidateProperty("CLASSSID", value);
                    this._classsid = value;
                    this.RaiseDataMemberChanged("CLASSSID");
                    this.OnCLASSSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string EVENTADDRESS
        {
            get
            {
                return this._eventaddress;
            }
            set
            {
                if ((this._eventaddress != value))
                {
                    this.OnEVENTADDRESSChanging(value);
                    this.RaiseDataMemberChanging("EVENTADDRESS");
                    this.ValidateProperty("EVENTADDRESS", value);
                    this._eventaddress = value;
                    this.RaiseDataMemberChanged("EVENTADDRESS");
                    this.OnEVENTADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTCONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string EVENTCONTENT
        {
            get
            {
                return this._eventcontent;
            }
            set
            {
                if ((this._eventcontent != value))
                {
                    this.OnEVENTCONTENTChanging(value);
                    this.RaiseDataMemberChanging("EVENTCONTENT");
                    this.ValidateProperty("EVENTCONTENT", value);
                    this._eventcontent = value;
                    this.RaiseDataMemberChanged("EVENTCONTENT");
                    this.OnEVENTCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal EVENTID
        {
            get
            {
                return this._eventid;
            }
            set
            {
                if ((this._eventid != value))
                {
                    this.OnEVENTIDChanging(value);
                    this.ValidateProperty("EVENTID", value);
                    this._eventid = value;
                    this.RaisePropertyChanged("EVENTID");
                    this.OnEVENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EVENTSOURCE
        {
            get
            {
                return this._eventsource;
            }
            set
            {
                if ((this._eventsource != value))
                {
                    this.OnEVENTSOURCEChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCE");
                    this.ValidateProperty("EVENTSOURCE", value);
                    this._eventsource = value;
                    this.RaiseDataMemberChanged("EVENTSOURCE");
                    this.OnEVENTSOURCEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string EVENTTITLE
        {
            get
            {
                return this._eventtitle;
            }
            set
            {
                if ((this._eventtitle != value))
                {
                    this.OnEVENTTITLEChanging(value);
                    this.RaiseDataMemberChanging("EVENTTITLE");
                    this.ValidateProperty("EVENTTITLE", value);
                    this._eventtitle = value;
                    this.RaiseDataMemberChanged("EVENTTITLE");
                    this.OnEVENTTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FXSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> FXSJ
        {
            get
            {
                return this._fxsj;
            }
            set
            {
                if ((this._fxsj != value))
                {
                    this.OnFXSJChanging(value);
                    this.RaiseDataMemberChanging("FXSJ");
                    this.ValidateProperty("FXSJ", value);
                    this._fxsj = value;
                    this.RaiseDataMemberChanged("FXSJ");
                    this.OnFXSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GRADE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> GRADE
        {
            get
            {
                return this._grade;
            }
            set
            {
                if ((this._grade != value))
                {
                    this.OnGRADEChanging(value);
                    this.RaiseDataMemberChanging("GRADE");
                    this.ValidateProperty("GRADE", value);
                    this._grade = value;
                    this.RaiseDataMemberChanged("GRADE");
                    this.OnGRADEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GUIDONLY”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string GUIDONLY
        {
            get
            {
                return this._guidonly;
            }
            set
            {
                if ((this._guidonly != value))
                {
                    this.OnGUIDONLYChanging(value);
                    this.RaiseDataMemberChanging("GUIDONLY");
                    this.ValidateProperty("GUIDONLY", value);
                    this._guidonly = value;
                    this.RaiseDataMemberChanged("GUIDONLY");
                    this.OnGUIDONLYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICTURES”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string PICTURES
        {
            get
            {
                return this._pictures;
            }
            set
            {
                if ((this._pictures != value))
                {
                    this.OnPICTURESChanging(value);
                    this.RaiseDataMemberChanging("PICTURES");
                    this.ValidateProperty("PICTURES", value);
                    this._pictures = value;
                    this.RaiseDataMemberChanged("PICTURES");
                    this.OnPICTURESChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="RCDCTOZFZD"/> 实体实例的集合。
        /// </summary>
        [Association("RCDCEVENT_RCDCTOZFZD", "EVENTID", "EVENTID")]
        [XmlIgnore()]
        public EntityCollection<RCDCTOZFZD> RCDCTOZFZDS
        {
            get
            {
                if ((this._rcdctozfzds == null))
                {
                    this._rcdctozfzds = new EntityCollection<RCDCTOZFZD>(this, "RCDCTOZFZDS", this.FilterRCDCTOZFZDS, this.AttachRCDCTOZFZDS, this.DetachRCDCTOZFZDS);
                }
                return this._rcdctozfzds;
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private void AttachRCDCTOZFZDS(RCDCTOZFZD entity)
        {
            entity.RCDCEVENT = this;
        }
        
        private void DetachRCDCTOZFZDS(RCDCTOZFZD entity)
        {
            entity.RCDCEVENT = null;
        }
        
        private bool FilterRCDCTOZFZDS(RCDCTOZFZD entity)
        {
            return (entity.EVENTID == this.EVENTID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._eventid;
        }
    }
    
    /// <summary>
    /// “RCDCTOZFZD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class RCDCTOZFZD : Entity
    {
        
        private string _archiving;
        
        private Nullable<DateTime> _archivingtime;
        
        private Nullable<decimal> _archivinguser;
        
        private string _comments;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _eventid;
        
        private Nullable<decimal> _iscurrent;
        
        private EntityRef<RCDCEVENT> _rcdcevent;
        
        private string _refusecontent;
        
        private Nullable<decimal> _statue;
        
        private decimal _tozfzdid;
        
        private Nullable<decimal> _userid;
        
        private string _wiid;
        
        private Nullable<decimal> _zduserid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnARCHIVINGChanging(string value);
        partial void OnARCHIVINGChanged();
        partial void OnARCHIVINGTIMEChanging(Nullable<DateTime> value);
        partial void OnARCHIVINGTIMEChanged();
        partial void OnARCHIVINGUSERChanging(Nullable<decimal> value);
        partial void OnARCHIVINGUSERChanged();
        partial void OnCOMMENTSChanging(string value);
        partial void OnCOMMENTSChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnEVENTIDChanging(Nullable<decimal> value);
        partial void OnEVENTIDChanged();
        partial void OnISCURRENTChanging(Nullable<decimal> value);
        partial void OnISCURRENTChanged();
        partial void OnREFUSECONTENTChanging(string value);
        partial void OnREFUSECONTENTChanged();
        partial void OnSTATUEChanging(Nullable<decimal> value);
        partial void OnSTATUEChanged();
        partial void OnTOZFZDIDChanging(decimal value);
        partial void OnTOZFZDIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnZDUSERIDChanging(Nullable<decimal> value);
        partial void OnZDUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RCDCTOZFZD"/> 类的新实例。
        /// </summary>
        public RCDCTOZFZD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVING”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ARCHIVING
        {
            get
            {
                return this._archiving;
            }
            set
            {
                if ((this._archiving != value))
                {
                    this.OnARCHIVINGChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVING");
                    this.ValidateProperty("ARCHIVING", value);
                    this._archiving = value;
                    this.RaiseDataMemberChanged("ARCHIVING");
                    this.OnARCHIVINGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVINGTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ARCHIVINGTIME
        {
            get
            {
                return this._archivingtime;
            }
            set
            {
                if ((this._archivingtime != value))
                {
                    this.OnARCHIVINGTIMEChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVINGTIME");
                    this.ValidateProperty("ARCHIVINGTIME", value);
                    this._archivingtime = value;
                    this.RaiseDataMemberChanged("ARCHIVINGTIME");
                    this.OnARCHIVINGTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ARCHIVINGUSER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ARCHIVINGUSER
        {
            get
            {
                return this._archivinguser;
            }
            set
            {
                if ((this._archivinguser != value))
                {
                    this.OnARCHIVINGUSERChanging(value);
                    this.RaiseDataMemberChanging("ARCHIVINGUSER");
                    this.ValidateProperty("ARCHIVINGUSER", value);
                    this._archivinguser = value;
                    this.RaiseDataMemberChanged("ARCHIVINGUSER");
                    this.OnARCHIVINGUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“COMMENTS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string COMMENTS
        {
            get
            {
                return this._comments;
            }
            set
            {
                if ((this._comments != value))
                {
                    this.OnCOMMENTSChanging(value);
                    this.RaiseDataMemberChanging("COMMENTS");
                    this.ValidateProperty("COMMENTS", value);
                    this._comments = value;
                    this.RaiseDataMemberChanged("COMMENTS");
                    this.OnCOMMENTSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> EVENTID
        {
            get
            {
                return this._eventid;
            }
            set
            {
                if ((this._eventid != value))
                {
                    this.OnEVENTIDChanging(value);
                    this.RaiseDataMemberChanging("EVENTID");
                    this.ValidateProperty("EVENTID", value);
                    this._eventid = value;
                    this.RaiseDataMemberChanged("EVENTID");
                    this.OnEVENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISCURRENT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISCURRENT
        {
            get
            {
                return this._iscurrent;
            }
            set
            {
                if ((this._iscurrent != value))
                {
                    this.OnISCURRENTChanging(value);
                    this.RaiseDataMemberChanging("ISCURRENT");
                    this.ValidateProperty("ISCURRENT", value);
                    this._iscurrent = value;
                    this.RaiseDataMemberChanged("ISCURRENT");
                    this.OnISCURRENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="RCDCEVENT"/> 实体。
        /// </summary>
        [Association("RCDCEVENT_RCDCTOZFZD", "EVENTID", "EVENTID", IsForeignKey=true)]
        [XmlIgnore()]
        public RCDCEVENT RCDCEVENT
        {
            get
            {
                if ((this._rcdcevent == null))
                {
                    this._rcdcevent = new EntityRef<RCDCEVENT>(this, "RCDCEVENT", this.FilterRCDCEVENT);
                }
                return this._rcdcevent.Entity;
            }
            set
            {
                RCDCEVENT previous = this.RCDCEVENT;
                if ((previous != value))
                {
                    this.ValidateProperty("RCDCEVENT", value);
                    if ((previous != null))
                    {
                        this._rcdcevent.Entity = null;
                        previous.RCDCTOZFZDS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EVENTID = value.EVENTID;
                    }
                    else
                    {
                        this.EVENTID = default(Nullable<decimal>);
                    }
                    this._rcdcevent.Entity = value;
                    if ((value != null))
                    {
                        value.RCDCTOZFZDS.Add(this);
                    }
                    this.RaisePropertyChanged("RCDCEVENT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REFUSECONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string REFUSECONTENT
        {
            get
            {
                return this._refusecontent;
            }
            set
            {
                if ((this._refusecontent != value))
                {
                    this.OnREFUSECONTENTChanging(value);
                    this.RaiseDataMemberChanging("REFUSECONTENT");
                    this.ValidateProperty("REFUSECONTENT", value);
                    this._refusecontent = value;
                    this.RaiseDataMemberChanged("REFUSECONTENT");
                    this.OnREFUSECONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUE
        {
            get
            {
                return this._statue;
            }
            set
            {
                if ((this._statue != value))
                {
                    this.OnSTATUEChanging(value);
                    this.RaiseDataMemberChanging("STATUE");
                    this.ValidateProperty("STATUE", value);
                    this._statue = value;
                    this.RaiseDataMemberChanged("STATUE");
                    this.OnSTATUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOZFZDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TOZFZDID
        {
            get
            {
                return this._tozfzdid;
            }
            set
            {
                if ((this._tozfzdid != value))
                {
                    this.OnTOZFZDIDChanging(value);
                    this.ValidateProperty("TOZFZDID", value);
                    this._tozfzdid = value;
                    this.RaisePropertyChanged("TOZFZDID");
                    this.OnTOZFZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZDUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ZDUSERID
        {
            get
            {
                return this._zduserid;
            }
            set
            {
                if ((this._zduserid != value))
                {
                    this.OnZDUSERIDChanging(value);
                    this.RaiseDataMemberChanging("ZDUSERID");
                    this.ValidateProperty("ZDUSERID", value);
                    this._zduserid = value;
                    this.RaiseDataMemberChanged("ZDUSERID");
                    this.OnZDUSERIDChanged();
                }
            }
        }
        
        private bool FilterRCDCEVENT(RCDCEVENT entity)
        {
            return (entity.EVENTID == this.EVENTID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._tozfzdid;
        }
    }
    
    /// <summary>
    /// “RECIPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class RECIPE : Entity
    {
        
        private string _breakfast;
        
        private Nullable<DateTime> _createdtime;
        
        private string _dinner;
        
        private string _lunch;
        
        private Nullable<DateTime> _recipedate;
        
        private decimal _recipeid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnBREAKFASTChanging(string value);
        partial void OnBREAKFASTChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnDINNERChanging(string value);
        partial void OnDINNERChanged();
        partial void OnLUNCHChanging(string value);
        partial void OnLUNCHChanged();
        partial void OnRECIPEDATEChanging(Nullable<DateTime> value);
        partial void OnRECIPEDATEChanged();
        partial void OnRECIPEIDChanging(decimal value);
        partial void OnRECIPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RECIPE"/> 类的新实例。
        /// </summary>
        public RECIPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“BREAKFAST”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string BREAKFAST
        {
            get
            {
                return this._breakfast;
            }
            set
            {
                if ((this._breakfast != value))
                {
                    this.OnBREAKFASTChanging(value);
                    this.RaiseDataMemberChanging("BREAKFAST");
                    this.ValidateProperty("BREAKFAST", value);
                    this._breakfast = value;
                    this.RaiseDataMemberChanged("BREAKFAST");
                    this.OnBREAKFASTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DINNER”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string DINNER
        {
            get
            {
                return this._dinner;
            }
            set
            {
                if ((this._dinner != value))
                {
                    this.OnDINNERChanging(value);
                    this.RaiseDataMemberChanging("DINNER");
                    this.ValidateProperty("DINNER", value);
                    this._dinner = value;
                    this.RaiseDataMemberChanged("DINNER");
                    this.OnDINNERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LUNCH”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string LUNCH
        {
            get
            {
                return this._lunch;
            }
            set
            {
                if ((this._lunch != value))
                {
                    this.OnLUNCHChanging(value);
                    this.RaiseDataMemberChanging("LUNCH");
                    this.ValidateProperty("LUNCH", value);
                    this._lunch = value;
                    this.RaiseDataMemberChanged("LUNCH");
                    this.OnLUNCHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RECIPEDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> RECIPEDATE
        {
            get
            {
                return this._recipedate;
            }
            set
            {
                if ((this._recipedate != value))
                {
                    this.OnRECIPEDATEChanging(value);
                    this.RaiseDataMemberChanging("RECIPEDATE");
                    this.ValidateProperty("RECIPEDATE", value);
                    this._recipedate = value;
                    this.RaiseDataMemberChanged("RECIPEDATE");
                    this.OnRECIPEDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RECIPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal RECIPEID
        {
            get
            {
                return this._recipeid;
            }
            set
            {
                if ((this._recipeid != value))
                {
                    this.OnRECIPEIDChanging(value);
                    this.ValidateProperty("RECIPEID", value);
                    this._recipeid = value;
                    this.RaisePropertyChanged("RECIPEID");
                    this.OnRECIPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._recipeid;
        }
    }
    
    /// <summary>
    /// “ROLE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ROLE : Entity
    {
        
        private Nullable<decimal> _appid;
        
        private string _description;
        
        private EntityCollection<ROLEFUNCTION> _rolefunctions;
        
        private decimal _roleid;
        
        private string _rolename;
        
        private Nullable<decimal> _seqno;
        
        private Nullable<decimal> _statusid;
        
        private EntityCollection<USERROLE> _userroles;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAPPIDChanging(Nullable<decimal> value);
        partial void OnAPPIDChanged();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnROLEIDChanging(decimal value);
        partial void OnROLEIDChanged();
        partial void OnROLENAMEChanging(string value);
        partial void OnROLENAMEChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ROLE"/> 类的新实例。
        /// </summary>
        public ROLE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“APPID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APPID
        {
            get
            {
                return this._appid;
            }
            set
            {
                if ((this._appid != value))
                {
                    this.OnAPPIDChanging(value);
                    this.RaiseDataMemberChanging("APPID");
                    this.ValidateProperty("APPID", value);
                    this._appid = value;
                    this.RaiseDataMemberChanged("APPID");
                    this.OnAPPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ROLEFUNCTION"/> 实体实例的集合。
        /// </summary>
        [Association("ROLE_ROLEFUNCTION", "ROLEID", "ROLEID")]
        [XmlIgnore()]
        public EntityCollection<ROLEFUNCTION> ROLEFUNCTIONS
        {
            get
            {
                if ((this._rolefunctions == null))
                {
                    this._rolefunctions = new EntityCollection<ROLEFUNCTION>(this, "ROLEFUNCTIONS", this.FilterROLEFUNCTIONS, this.AttachROLEFUNCTIONS, this.DetachROLEFUNCTIONS);
                }
                return this._rolefunctions;
            }
        }
        
        /// <summary>
        /// 获取或设置“ROLEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ROLEID
        {
            get
            {
                return this._roleid;
            }
            set
            {
                if ((this._roleid != value))
                {
                    this.OnROLEIDChanging(value);
                    this.ValidateProperty("ROLEID", value);
                    this._roleid = value;
                    this.RaisePropertyChanged("ROLEID");
                    this.OnROLEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROLENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ROLENAME
        {
            get
            {
                return this._rolename;
            }
            set
            {
                if ((this._rolename != value))
                {
                    this.OnROLENAMEChanging(value);
                    this.RaiseDataMemberChanging("ROLENAME");
                    this.ValidateProperty("ROLENAME", value);
                    this._rolename = value;
                    this.RaiseDataMemberChanged("ROLENAME");
                    this.OnROLENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USERROLE"/> 实体实例的集合。
        /// </summary>
        [Association("ROLE_USERROLE", "ROLEID", "ROLEID")]
        [XmlIgnore()]
        public EntityCollection<USERROLE> USERROLES
        {
            get
            {
                if ((this._userroles == null))
                {
                    this._userroles = new EntityCollection<USERROLE>(this, "USERROLES", this.FilterUSERROLES, this.AttachUSERROLES, this.DetachUSERROLES);
                }
                return this._userroles;
            }
        }
        
        private void AttachROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            entity.ROLE = this;
        }
        
        private void DetachROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            entity.ROLE = null;
        }
        
        private bool FilterROLEFUNCTIONS(ROLEFUNCTION entity)
        {
            return (entity.ROLEID == this.ROLEID);
        }
        
        private void AttachUSERROLES(USERROLE entity)
        {
            entity.ROLE = this;
        }
        
        private void DetachUSERROLES(USERROLE entity)
        {
            entity.ROLE = null;
        }
        
        private bool FilterUSERROLES(USERROLE entity)
        {
            return (entity.ROLEID == this.ROLEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._roleid;
        }
    }
    
    /// <summary>
    /// “ROLEFUNCTION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ROLEFUNCTION : Entity
    {
        
        private EntityRef<FUNCTION> _function;
        
        private decimal _functionid;
        
        private string _redundancy;
        
        private EntityRef<ROLE> _role;
        
        private decimal _roleid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnFUNCTIONIDChanging(decimal value);
        partial void OnFUNCTIONIDChanged();
        partial void OnREDUNDANCYChanging(string value);
        partial void OnREDUNDANCYChanged();
        partial void OnROLEIDChanging(decimal value);
        partial void OnROLEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ROLEFUNCTION"/> 类的新实例。
        /// </summary>
        public ROLEFUNCTION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="FUNCTION"/> 实体。
        /// </summary>
        [Association("FUNCTION_ROLEFUNCTION", "FUNCTIONID", "FUNCTIONID", IsForeignKey=true)]
        [XmlIgnore()]
        public FUNCTION FUNCTION
        {
            get
            {
                if ((this._function == null))
                {
                    this._function = new EntityRef<FUNCTION>(this, "FUNCTION", this.FilterFUNCTION);
                }
                return this._function.Entity;
            }
            set
            {
                FUNCTION previous = this.FUNCTION;
                if ((previous != value))
                {
                    this.ValidateProperty("FUNCTION", value);
                    if ((previous != null))
                    {
                        this._function.Entity = null;
                        previous.ROLEFUNCTIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FUNCTIONID = value.FUNCTIONID;
                    }
                    else
                    {
                        this.FUNCTIONID = default(decimal);
                    }
                    this._function.Entity = value;
                    if ((value != null))
                    {
                        value.ROLEFUNCTIONS.Add(this);
                    }
                    this.RaisePropertyChanged("FUNCTION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FUNCTIONID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal FUNCTIONID
        {
            get
            {
                return this._functionid;
            }
            set
            {
                if ((this._functionid != value))
                {
                    this.OnFUNCTIONIDChanging(value);
                    this.RaiseDataMemberChanging("FUNCTIONID");
                    this.ValidateProperty("FUNCTIONID", value);
                    this._functionid = value;
                    this.RaiseDataMemberChanged("FUNCTIONID");
                    this.OnFUNCTIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REDUNDANCY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string REDUNDANCY
        {
            get
            {
                return this._redundancy;
            }
            set
            {
                if ((this._redundancy != value))
                {
                    this.OnREDUNDANCYChanging(value);
                    this.RaiseDataMemberChanging("REDUNDANCY");
                    this.ValidateProperty("REDUNDANCY", value);
                    this._redundancy = value;
                    this.RaiseDataMemberChanged("REDUNDANCY");
                    this.OnREDUNDANCYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ROLE"/> 实体。
        /// </summary>
        [Association("ROLE_ROLEFUNCTION", "ROLEID", "ROLEID", IsForeignKey=true)]
        [XmlIgnore()]
        public ROLE ROLE
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<ROLE>(this, "ROLE", this.FilterROLE);
                }
                return this._role.Entity;
            }
            set
            {
                ROLE previous = this.ROLE;
                if ((previous != value))
                {
                    this.ValidateProperty("ROLE", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.ROLEFUNCTIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ROLEID = value.ROLEID;
                    }
                    else
                    {
                        this.ROLEID = default(decimal);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.ROLEFUNCTIONS.Add(this);
                    }
                    this.RaisePropertyChanged("ROLE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROLEID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal ROLEID
        {
            get
            {
                return this._roleid;
            }
            set
            {
                if ((this._roleid != value))
                {
                    this.OnROLEIDChanging(value);
                    this.RaiseDataMemberChanging("ROLEID");
                    this.ValidateProperty("ROLEID", value);
                    this._roleid = value;
                    this.RaiseDataMemberChanged("ROLEID");
                    this.OnROLEIDChanged();
                }
            }
        }
        
        private bool FilterFUNCTION(FUNCTION entity)
        {
            return (entity.FUNCTIONID == this.FUNCTIONID);
        }
        
        private bool FilterROLE(ROLE entity)
        {
            return (entity.ROLEID == this.ROLEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._functionid, this._roleid);
        }
    }
    
    /// <summary>
    /// “ROLEMENU”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ROLEMENU : Entity
    {
        
        private decimal _menuid;
        
        private decimal _roleid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnMENUIDChanging(decimal value);
        partial void OnMENUIDChanged();
        partial void OnROLEIDChanging(decimal value);
        partial void OnROLEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ROLEMENU"/> 类的新实例。
        /// </summary>
        public ROLEMENU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“MENUID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal MENUID
        {
            get
            {
                return this._menuid;
            }
            set
            {
                if ((this._menuid != value))
                {
                    this.OnMENUIDChanging(value);
                    this.ValidateProperty("MENUID", value);
                    this._menuid = value;
                    this.RaisePropertyChanged("MENUID");
                    this.OnMENUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROLEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ROLEID
        {
            get
            {
                return this._roleid;
            }
            set
            {
                if ((this._roleid != value))
                {
                    this.OnROLEIDChanging(value);
                    this.ValidateProperty("ROLEID", value);
                    this._roleid = value;
                    this.RaisePropertyChanged("ROLEID");
                    this.OnROLEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._menuid, this._roleid);
        }
    }
    
    /// <summary>
    /// “SCHEDULE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SCHEDULE : Entity
    {
        
        private string _content;
        
        private Nullable<DateTime> _createditme;
        
        private Nullable<decimal> _createduserid;
        
        private Nullable<DateTime> _endtime;
        
        private Nullable<decimal> _isalldayevent;
        
        private Nullable<decimal> _owner;
        
        private decimal _scheduleid;
        
        private Nullable<decimal> _schedulesourceid;
        
        private Nullable<decimal> _scheduletypeid;
        
        private Nullable<decimal> _sharetypeid;
        
        private Nullable<DateTime> _starttime;
        
        private string _title;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATEDITMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDITMEChanged();
        partial void OnCREATEDUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEDUSERIDChanged();
        partial void OnENDTIMEChanging(Nullable<DateTime> value);
        partial void OnENDTIMEChanged();
        partial void OnISALLDAYEVENTChanging(Nullable<decimal> value);
        partial void OnISALLDAYEVENTChanged();
        partial void OnOWNERChanging(Nullable<decimal> value);
        partial void OnOWNERChanged();
        partial void OnSCHEDULEIDChanging(decimal value);
        partial void OnSCHEDULEIDChanged();
        partial void OnSCHEDULESOURCEIDChanging(Nullable<decimal> value);
        partial void OnSCHEDULESOURCEIDChanged();
        partial void OnSCHEDULETYPEIDChanging(Nullable<decimal> value);
        partial void OnSCHEDULETYPEIDChanged();
        partial void OnSHARETYPEIDChanging(Nullable<decimal> value);
        partial void OnSHARETYPEIDChanged();
        partial void OnSTARTTIMEChanging(Nullable<DateTime> value);
        partial void OnSTARTTIMEChanged();
        partial void OnTITLEChanging(string value);
        partial void OnTITLEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SCHEDULE"/> 类的新实例。
        /// </summary>
        public SCHEDULE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDITME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDITME
        {
            get
            {
                return this._createditme;
            }
            set
            {
                if ((this._createditme != value))
                {
                    this.OnCREATEDITMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDITME");
                    this.ValidateProperty("CREATEDITME", value);
                    this._createditme = value;
                    this.RaiseDataMemberChanged("CREATEDITME");
                    this.OnCREATEDITMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEDUSERID
        {
            get
            {
                return this._createduserid;
            }
            set
            {
                if ((this._createduserid != value))
                {
                    this.OnCREATEDUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEDUSERID");
                    this.ValidateProperty("CREATEDUSERID", value);
                    this._createduserid = value;
                    this.RaiseDataMemberChanged("CREATEDUSERID");
                    this.OnCREATEDUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ENDTIME
        {
            get
            {
                return this._endtime;
            }
            set
            {
                if ((this._endtime != value))
                {
                    this.OnENDTIMEChanging(value);
                    this.RaiseDataMemberChanging("ENDTIME");
                    this.ValidateProperty("ENDTIME", value);
                    this._endtime = value;
                    this.RaiseDataMemberChanged("ENDTIME");
                    this.OnENDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISALLDAYEVENT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISALLDAYEVENT
        {
            get
            {
                return this._isalldayevent;
            }
            set
            {
                if ((this._isalldayevent != value))
                {
                    this.OnISALLDAYEVENTChanging(value);
                    this.RaiseDataMemberChanging("ISALLDAYEVENT");
                    this.ValidateProperty("ISALLDAYEVENT", value);
                    this._isalldayevent = value;
                    this.RaiseDataMemberChanged("ISALLDAYEVENT");
                    this.OnISALLDAYEVENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OWNER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OWNER
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOWNERChanging(value);
                    this.RaiseDataMemberChanging("OWNER");
                    this.ValidateProperty("OWNER", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("OWNER");
                    this.OnOWNERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SCHEDULEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SCHEDULEID
        {
            get
            {
                return this._scheduleid;
            }
            set
            {
                if ((this._scheduleid != value))
                {
                    this.OnSCHEDULEIDChanging(value);
                    this.ValidateProperty("SCHEDULEID", value);
                    this._scheduleid = value;
                    this.RaisePropertyChanged("SCHEDULEID");
                    this.OnSCHEDULEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SCHEDULESOURCEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SCHEDULESOURCEID
        {
            get
            {
                return this._schedulesourceid;
            }
            set
            {
                if ((this._schedulesourceid != value))
                {
                    this.OnSCHEDULESOURCEIDChanging(value);
                    this.RaiseDataMemberChanging("SCHEDULESOURCEID");
                    this.ValidateProperty("SCHEDULESOURCEID", value);
                    this._schedulesourceid = value;
                    this.RaiseDataMemberChanged("SCHEDULESOURCEID");
                    this.OnSCHEDULESOURCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SCHEDULETYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SCHEDULETYPEID
        {
            get
            {
                return this._scheduletypeid;
            }
            set
            {
                if ((this._scheduletypeid != value))
                {
                    this.OnSCHEDULETYPEIDChanging(value);
                    this.RaiseDataMemberChanging("SCHEDULETYPEID");
                    this.ValidateProperty("SCHEDULETYPEID", value);
                    this._scheduletypeid = value;
                    this.RaiseDataMemberChanged("SCHEDULETYPEID");
                    this.OnSCHEDULETYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHARETYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SHARETYPEID
        {
            get
            {
                return this._sharetypeid;
            }
            set
            {
                if ((this._sharetypeid != value))
                {
                    this.OnSHARETYPEIDChanging(value);
                    this.RaiseDataMemberChanging("SHARETYPEID");
                    this.ValidateProperty("SHARETYPEID", value);
                    this._sharetypeid = value;
                    this.RaiseDataMemberChanged("SHARETYPEID");
                    this.OnSHARETYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> STARTTIME
        {
            get
            {
                return this._starttime;
            }
            set
            {
                if ((this._starttime != value))
                {
                    this.OnSTARTTIMEChanging(value);
                    this.RaiseDataMemberChanging("STARTTIME");
                    this.ValidateProperty("STARTTIME", value);
                    this._starttime = value;
                    this.RaiseDataMemberChanged("STARTTIME");
                    this.OnSTARTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string TITLE
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTITLEChanging(value);
                    this.RaiseDataMemberChanging("TITLE");
                    this.ValidateProperty("TITLE", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("TITLE");
                    this.OnTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._scheduleid;
        }
    }
    
    /// <summary>
    /// “SCHEDULETYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SCHEDULETYPE : Entity
    {
        
        private string _color;
        
        private Nullable<decimal> _isabledelete;
        
        private decimal _scheduletypeid;
        
        private string _scheduletypename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCOLORChanging(string value);
        partial void OnCOLORChanged();
        partial void OnISABLEDELETEChanging(Nullable<decimal> value);
        partial void OnISABLEDELETEChanged();
        partial void OnSCHEDULETYPEIDChanging(decimal value);
        partial void OnSCHEDULETYPEIDChanged();
        partial void OnSCHEDULETYPENAMEChanging(string value);
        partial void OnSCHEDULETYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SCHEDULETYPE"/> 类的新实例。
        /// </summary>
        public SCHEDULETYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“COLOR”值。
        /// </summary>
        [DataMember()]
        [StringLength(40)]
        public string COLOR
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnCOLORChanging(value);
                    this.RaiseDataMemberChanging("COLOR");
                    this.ValidateProperty("COLOR", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("COLOR");
                    this.OnCOLORChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISABLEDELETE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISABLEDELETE
        {
            get
            {
                return this._isabledelete;
            }
            set
            {
                if ((this._isabledelete != value))
                {
                    this.OnISABLEDELETEChanging(value);
                    this.RaiseDataMemberChanging("ISABLEDELETE");
                    this.ValidateProperty("ISABLEDELETE", value);
                    this._isabledelete = value;
                    this.RaiseDataMemberChanged("ISABLEDELETE");
                    this.OnISABLEDELETEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SCHEDULETYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SCHEDULETYPEID
        {
            get
            {
                return this._scheduletypeid;
            }
            set
            {
                if ((this._scheduletypeid != value))
                {
                    this.OnSCHEDULETYPEIDChanging(value);
                    this.ValidateProperty("SCHEDULETYPEID", value);
                    this._scheduletypeid = value;
                    this.RaisePropertyChanged("SCHEDULETYPEID");
                    this.OnSCHEDULETYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SCHEDULETYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SCHEDULETYPENAME
        {
            get
            {
                return this._scheduletypename;
            }
            set
            {
                if ((this._scheduletypename != value))
                {
                    this.OnSCHEDULETYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("SCHEDULETYPENAME");
                    this.ValidateProperty("SCHEDULETYPENAME", value);
                    this._scheduletypename = value;
                    this.RaiseDataMemberChanged("SCHEDULETYPENAME");
                    this.OnSCHEDULETYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._scheduletypeid;
        }
    }
    
    /// <summary>
    /// “SIMPLECAS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SIMPLECAS : Entity
    {
        
        private string _bankaccount;
        
        private string _bankaccountname;
        
        private string _caseaddress;
        
        private Nullable<DateTime> _casetime;
        
        private string _dsrgender;
        
        private string _dsridnumber;
        
        private string _dsrlx;
        
        private string _dsrname;
        
        private Nullable<decimal> _fkje;
        
        private string _fzraddress;
        
        private string _fzrname;
        
        private string _fzrposition;
        
        private Nullable<decimal> _illegalitemid;
        
        private string _jdsbh;
        
        private string _jkyh;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private string _phoneid;
        
        private decimal _simplecaseid;
        
        private EntityCollection<SIMPLECASEPICTURE> _simplecasepictures;
        
        private Nullable<decimal> _untiid;
        
        private Nullable<decimal> _userid;
        
        private string _zfrname;
        
        private Nullable<DateTime> _zfsj;
        
        private string _zfzh;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnBANKACCOUNTChanging(string value);
        partial void OnBANKACCOUNTChanged();
        partial void OnBANKACCOUNTNAMEChanging(string value);
        partial void OnBANKACCOUNTNAMEChanged();
        partial void OnCASEADDRESSChanging(string value);
        partial void OnCASEADDRESSChanged();
        partial void OnCASETIMEChanging(Nullable<DateTime> value);
        partial void OnCASETIMEChanged();
        partial void OnDSRGENDERChanging(string value);
        partial void OnDSRGENDERChanged();
        partial void OnDSRIDNUMBERChanging(string value);
        partial void OnDSRIDNUMBERChanged();
        partial void OnDSRLXChanging(string value);
        partial void OnDSRLXChanged();
        partial void OnDSRNAMEChanging(string value);
        partial void OnDSRNAMEChanged();
        partial void OnFKJEChanging(Nullable<decimal> value);
        partial void OnFKJEChanged();
        partial void OnFZRADDRESSChanging(string value);
        partial void OnFZRADDRESSChanged();
        partial void OnFZRNAMEChanging(string value);
        partial void OnFZRNAMEChanged();
        partial void OnFZRPOSITIONChanging(string value);
        partial void OnFZRPOSITIONChanged();
        partial void OnILLEGALITEMIDChanging(Nullable<decimal> value);
        partial void OnILLEGALITEMIDChanged();
        partial void OnJDSBHChanging(string value);
        partial void OnJDSBHChanged();
        partial void OnJKYHChanging(string value);
        partial void OnJKYHChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPHONEIDChanging(string value);
        partial void OnPHONEIDChanged();
        partial void OnSIMPLECASEIDChanging(decimal value);
        partial void OnSIMPLECASEIDChanged();
        partial void OnUNTIIDChanging(Nullable<decimal> value);
        partial void OnUNTIIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnZFRNAMEChanging(string value);
        partial void OnZFRNAMEChanged();
        partial void OnZFSJChanging(Nullable<DateTime> value);
        partial void OnZFSJChanged();
        partial void OnZFZHChanging(string value);
        partial void OnZFZHChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SIMPLECAS"/> 类的新实例。
        /// </summary>
        public SIMPLECAS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“BANKACCOUNT”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string BANKACCOUNT
        {
            get
            {
                return this._bankaccount;
            }
            set
            {
                if ((this._bankaccount != value))
                {
                    this.OnBANKACCOUNTChanging(value);
                    this.RaiseDataMemberChanging("BANKACCOUNT");
                    this.ValidateProperty("BANKACCOUNT", value);
                    this._bankaccount = value;
                    this.RaiseDataMemberChanged("BANKACCOUNT");
                    this.OnBANKACCOUNTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“BANKACCOUNTNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string BANKACCOUNTNAME
        {
            get
            {
                return this._bankaccountname;
            }
            set
            {
                if ((this._bankaccountname != value))
                {
                    this.OnBANKACCOUNTNAMEChanging(value);
                    this.RaiseDataMemberChanging("BANKACCOUNTNAME");
                    this.ValidateProperty("BANKACCOUNTNAME", value);
                    this._bankaccountname = value;
                    this.RaiseDataMemberChanged("BANKACCOUNTNAME");
                    this.OnBANKACCOUNTNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string CASEADDRESS
        {
            get
            {
                return this._caseaddress;
            }
            set
            {
                if ((this._caseaddress != value))
                {
                    this.OnCASEADDRESSChanging(value);
                    this.RaiseDataMemberChanging("CASEADDRESS");
                    this.ValidateProperty("CASEADDRESS", value);
                    this._caseaddress = value;
                    this.RaiseDataMemberChanged("CASEADDRESS");
                    this.OnCASEADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CASETIME
        {
            get
            {
                return this._casetime;
            }
            set
            {
                if ((this._casetime != value))
                {
                    this.OnCASETIMEChanging(value);
                    this.RaiseDataMemberChanging("CASETIME");
                    this.ValidateProperty("CASETIME", value);
                    this._casetime = value;
                    this.RaiseDataMemberChanged("CASETIME");
                    this.OnCASETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DSRGENDER”值。
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string DSRGENDER
        {
            get
            {
                return this._dsrgender;
            }
            set
            {
                if ((this._dsrgender != value))
                {
                    this.OnDSRGENDERChanging(value);
                    this.RaiseDataMemberChanging("DSRGENDER");
                    this.ValidateProperty("DSRGENDER", value);
                    this._dsrgender = value;
                    this.RaiseDataMemberChanged("DSRGENDER");
                    this.OnDSRGENDERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DSRIDNUMBER”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DSRIDNUMBER
        {
            get
            {
                return this._dsridnumber;
            }
            set
            {
                if ((this._dsridnumber != value))
                {
                    this.OnDSRIDNUMBERChanging(value);
                    this.RaiseDataMemberChanging("DSRIDNUMBER");
                    this.ValidateProperty("DSRIDNUMBER", value);
                    this._dsridnumber = value;
                    this.RaiseDataMemberChanged("DSRIDNUMBER");
                    this.OnDSRIDNUMBERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DSRLX”值。
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string DSRLX
        {
            get
            {
                return this._dsrlx;
            }
            set
            {
                if ((this._dsrlx != value))
                {
                    this.OnDSRLXChanging(value);
                    this.RaiseDataMemberChanging("DSRLX");
                    this.ValidateProperty("DSRLX", value);
                    this._dsrlx = value;
                    this.RaiseDataMemberChanged("DSRLX");
                    this.OnDSRLXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DSRNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DSRNAME
        {
            get
            {
                return this._dsrname;
            }
            set
            {
                if ((this._dsrname != value))
                {
                    this.OnDSRNAMEChanging(value);
                    this.RaiseDataMemberChanging("DSRNAME");
                    this.ValidateProperty("DSRNAME", value);
                    this._dsrname = value;
                    this.RaiseDataMemberChanged("DSRNAME");
                    this.OnDSRNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FKJE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FKJE
        {
            get
            {
                return this._fkje;
            }
            set
            {
                if ((this._fkje != value))
                {
                    this.OnFKJEChanging(value);
                    this.RaiseDataMemberChanging("FKJE");
                    this.ValidateProperty("FKJE", value);
                    this._fkje = value;
                    this.RaiseDataMemberChanged("FKJE");
                    this.OnFKJEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FZRADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string FZRADDRESS
        {
            get
            {
                return this._fzraddress;
            }
            set
            {
                if ((this._fzraddress != value))
                {
                    this.OnFZRADDRESSChanging(value);
                    this.RaiseDataMemberChanging("FZRADDRESS");
                    this.ValidateProperty("FZRADDRESS", value);
                    this._fzraddress = value;
                    this.RaiseDataMemberChanged("FZRADDRESS");
                    this.OnFZRADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FZRNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string FZRNAME
        {
            get
            {
                return this._fzrname;
            }
            set
            {
                if ((this._fzrname != value))
                {
                    this.OnFZRNAMEChanging(value);
                    this.RaiseDataMemberChanging("FZRNAME");
                    this.ValidateProperty("FZRNAME", value);
                    this._fzrname = value;
                    this.RaiseDataMemberChanged("FZRNAME");
                    this.OnFZRNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FZRPOSITION”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string FZRPOSITION
        {
            get
            {
                return this._fzrposition;
            }
            set
            {
                if ((this._fzrposition != value))
                {
                    this.OnFZRPOSITIONChanging(value);
                    this.RaiseDataMemberChanging("FZRPOSITION");
                    this.ValidateProperty("FZRPOSITION", value);
                    this._fzrposition = value;
                    this.RaiseDataMemberChanged("FZRPOSITION");
                    this.OnFZRPOSITIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALITEMID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ILLEGALITEMID
        {
            get
            {
                return this._illegalitemid;
            }
            set
            {
                if ((this._illegalitemid != value))
                {
                    this.OnILLEGALITEMIDChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALITEMID");
                    this.ValidateProperty("ILLEGALITEMID", value);
                    this._illegalitemid = value;
                    this.RaiseDataMemberChanged("ILLEGALITEMID");
                    this.OnILLEGALITEMIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JDSBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string JDSBH
        {
            get
            {
                return this._jdsbh;
            }
            set
            {
                if ((this._jdsbh != value))
                {
                    this.OnJDSBHChanging(value);
                    this.RaiseDataMemberChanging("JDSBH");
                    this.ValidateProperty("JDSBH", value);
                    this._jdsbh = value;
                    this.RaiseDataMemberChanged("JDSBH");
                    this.OnJDSBHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JKYH”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string JKYH
        {
            get
            {
                return this._jkyh;
            }
            set
            {
                if ((this._jkyh != value))
                {
                    this.OnJKYHChanging(value);
                    this.RaiseDataMemberChanging("JKYH");
                    this.ValidateProperty("JKYH", value);
                    this._jkyh = value;
                    this.RaiseDataMemberChanged("JKYH");
                    this.OnJKYHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONEID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PHONEID
        {
            get
            {
                return this._phoneid;
            }
            set
            {
                if ((this._phoneid != value))
                {
                    this.OnPHONEIDChanging(value);
                    this.RaiseDataMemberChanging("PHONEID");
                    this.ValidateProperty("PHONEID", value);
                    this._phoneid = value;
                    this.RaiseDataMemberChanged("PHONEID");
                    this.OnPHONEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIMPLECASEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SIMPLECASEID
        {
            get
            {
                return this._simplecaseid;
            }
            set
            {
                if ((this._simplecaseid != value))
                {
                    this.OnSIMPLECASEIDChanging(value);
                    this.ValidateProperty("SIMPLECASEID", value);
                    this._simplecaseid = value;
                    this.RaisePropertyChanged("SIMPLECASEID");
                    this.OnSIMPLECASEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SIMPLECASEPICTURE"/> 实体实例的集合。
        /// </summary>
        [Association("SIMPLECAS_SIMPLECASEPICTURE", "SIMPLECASEID", "SIMPLECASEID")]
        [XmlIgnore()]
        public EntityCollection<SIMPLECASEPICTURE> SIMPLECASEPICTURES
        {
            get
            {
                if ((this._simplecasepictures == null))
                {
                    this._simplecasepictures = new EntityCollection<SIMPLECASEPICTURE>(this, "SIMPLECASEPICTURES", this.FilterSIMPLECASEPICTURES, this.AttachSIMPLECASEPICTURES, this.DetachSIMPLECASEPICTURES);
                }
                return this._simplecasepictures;
            }
        }
        
        /// <summary>
        /// 获取或设置“UNTIID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNTIID
        {
            get
            {
                return this._untiid;
            }
            set
            {
                if ((this._untiid != value))
                {
                    this.OnUNTIIDChanging(value);
                    this.RaiseDataMemberChanging("UNTIID");
                    this.ValidateProperty("UNTIID", value);
                    this._untiid = value;
                    this.RaiseDataMemberChanged("UNTIID");
                    this.OnUNTIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFRNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ZFRNAME
        {
            get
            {
                return this._zfrname;
            }
            set
            {
                if ((this._zfrname != value))
                {
                    this.OnZFRNAMEChanging(value);
                    this.RaiseDataMemberChanging("ZFRNAME");
                    this.ValidateProperty("ZFRNAME", value);
                    this._zfrname = value;
                    this.RaiseDataMemberChanged("ZFRNAME");
                    this.OnZFRNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ZFSJ
        {
            get
            {
                return this._zfsj;
            }
            set
            {
                if ((this._zfsj != value))
                {
                    this.OnZFSJChanging(value);
                    this.RaiseDataMemberChanging("ZFSJ");
                    this.ValidateProperty("ZFSJ", value);
                    this._zfsj = value;
                    this.RaiseDataMemberChanged("ZFSJ");
                    this.OnZFSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFZH”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ZFZH
        {
            get
            {
                return this._zfzh;
            }
            set
            {
                if ((this._zfzh != value))
                {
                    this.OnZFZHChanging(value);
                    this.RaiseDataMemberChanging("ZFZH");
                    this.ValidateProperty("ZFZH", value);
                    this._zfzh = value;
                    this.RaiseDataMemberChanged("ZFZH");
                    this.OnZFZHChanged();
                }
            }
        }
        
        private void AttachSIMPLECASEPICTURES(SIMPLECASEPICTURE entity)
        {
            entity.SIMPLECAS = this;
        }
        
        private void DetachSIMPLECASEPICTURES(SIMPLECASEPICTURE entity)
        {
            entity.SIMPLECAS = null;
        }
        
        private bool FilterSIMPLECASEPICTURES(SIMPLECASEPICTURE entity)
        {
            return (entity.SIMPLECASEID == this.SIMPLECASEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._simplecaseid;
        }
    }
    
    /// <summary>
    /// “SIMPLECASEPICTURE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SIMPLECASEPICTURE : Entity
    {
        
        private byte[] _picture;
        
        private Nullable<decimal> _picturetype;
        
        private EntityRef<SIMPLECAS> _simplecas;
        
        private decimal _simplecaseid;
        
        private decimal _simplecasepictureid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnPICTUREChanging(byte[] value);
        partial void OnPICTUREChanged();
        partial void OnPICTURETYPEChanging(Nullable<decimal> value);
        partial void OnPICTURETYPEChanged();
        partial void OnSIMPLECASEIDChanging(decimal value);
        partial void OnSIMPLECASEIDChanged();
        partial void OnSIMPLECASEPICTUREIDChanging(decimal value);
        partial void OnSIMPLECASEPICTUREIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SIMPLECASEPICTURE"/> 类的新实例。
        /// </summary>
        public SIMPLECASEPICTURE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“PICTURE”值。
        /// </summary>
        [DataMember()]
        public byte[] PICTURE
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnPICTUREChanging(value);
                    this.RaiseDataMemberChanging("PICTURE");
                    this.ValidateProperty("PICTURE", value);
                    this._picture = value;
                    this.RaiseDataMemberChanged("PICTURE");
                    this.OnPICTUREChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICTURETYPE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PICTURETYPE
        {
            get
            {
                return this._picturetype;
            }
            set
            {
                if ((this._picturetype != value))
                {
                    this.OnPICTURETYPEChanging(value);
                    this.RaiseDataMemberChanging("PICTURETYPE");
                    this.ValidateProperty("PICTURETYPE", value);
                    this._picturetype = value;
                    this.RaiseDataMemberChanged("PICTURETYPE");
                    this.OnPICTURETYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="SIMPLECAS"/> 实体。
        /// </summary>
        [Association("SIMPLECAS_SIMPLECASEPICTURE", "SIMPLECASEID", "SIMPLECASEID", IsForeignKey=true)]
        [XmlIgnore()]
        public SIMPLECAS SIMPLECAS
        {
            get
            {
                if ((this._simplecas == null))
                {
                    this._simplecas = new EntityRef<SIMPLECAS>(this, "SIMPLECAS", this.FilterSIMPLECAS);
                }
                return this._simplecas.Entity;
            }
            set
            {
                SIMPLECAS previous = this.SIMPLECAS;
                if ((previous != value))
                {
                    this.ValidateProperty("SIMPLECAS", value);
                    if ((previous != null))
                    {
                        this._simplecas.Entity = null;
                        previous.SIMPLECASEPICTURES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SIMPLECASEID = value.SIMPLECASEID;
                    }
                    else
                    {
                        this.SIMPLECASEID = default(decimal);
                    }
                    this._simplecas.Entity = value;
                    if ((value != null))
                    {
                        value.SIMPLECASEPICTURES.Add(this);
                    }
                    this.RaisePropertyChanged("SIMPLECAS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIMPLECASEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal SIMPLECASEID
        {
            get
            {
                return this._simplecaseid;
            }
            set
            {
                if ((this._simplecaseid != value))
                {
                    this.OnSIMPLECASEIDChanging(value);
                    this.RaiseDataMemberChanging("SIMPLECASEID");
                    this.ValidateProperty("SIMPLECASEID", value);
                    this._simplecaseid = value;
                    this.RaiseDataMemberChanged("SIMPLECASEID");
                    this.OnSIMPLECASEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIMPLECASEPICTUREID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SIMPLECASEPICTUREID
        {
            get
            {
                return this._simplecasepictureid;
            }
            set
            {
                if ((this._simplecasepictureid != value))
                {
                    this.OnSIMPLECASEPICTUREIDChanging(value);
                    this.ValidateProperty("SIMPLECASEPICTUREID", value);
                    this._simplecasepictureid = value;
                    this.RaisePropertyChanged("SIMPLECASEPICTUREID");
                    this.OnSIMPLECASEPICTUREIDChanged();
                }
            }
        }
        
        private bool FilterSIMPLECAS(SIMPLECAS entity)
        {
            return (entity.SIMPLECASEID == this.SIMPLECASEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._simplecasepictureid;
        }
    }
    
    /// <summary>
    /// “SINGNIN”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SINGNIN : Entity
    {
        
        private string _description;
        
        private string _id;
        
        private string _phoneid;
        
        private string _phoneimei;
        
        private string _singninaddress;
        
        private Nullable<DateTime> _singnintime;
        
        private EntityRef<USER> _user;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnPHONEIDChanging(string value);
        partial void OnPHONEIDChanged();
        partial void OnPHONEIMEIChanging(string value);
        partial void OnPHONEIMEIChanged();
        partial void OnSINGNINADDRESSChanging(string value);
        partial void OnSINGNINADDRESSChanged();
        partial void OnSINGNINTIMEChanging(Nullable<DateTime> value);
        partial void OnSINGNINTIMEChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SINGNIN"/> 类的新实例。
        /// </summary>
        public SINGNIN()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONEID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PHONEID
        {
            get
            {
                return this._phoneid;
            }
            set
            {
                if ((this._phoneid != value))
                {
                    this.OnPHONEIDChanging(value);
                    this.RaiseDataMemberChanging("PHONEID");
                    this.ValidateProperty("PHONEID", value);
                    this._phoneid = value;
                    this.RaiseDataMemberChanged("PHONEID");
                    this.OnPHONEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONEIMEI”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PHONEIMEI
        {
            get
            {
                return this._phoneimei;
            }
            set
            {
                if ((this._phoneimei != value))
                {
                    this.OnPHONEIMEIChanging(value);
                    this.RaiseDataMemberChanging("PHONEIMEI");
                    this.ValidateProperty("PHONEIMEI", value);
                    this._phoneimei = value;
                    this.RaiseDataMemberChanged("PHONEIMEI");
                    this.OnPHONEIMEIChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SINGNINADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string SINGNINADDRESS
        {
            get
            {
                return this._singninaddress;
            }
            set
            {
                if ((this._singninaddress != value))
                {
                    this.OnSINGNINADDRESSChanging(value);
                    this.RaiseDataMemberChanging("SINGNINADDRESS");
                    this.ValidateProperty("SINGNINADDRESS", value);
                    this._singninaddress = value;
                    this.RaiseDataMemberChanged("SINGNINADDRESS");
                    this.OnSINGNINADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SINGNINTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> SINGNINTIME
        {
            get
            {
                return this._singnintime;
            }
            set
            {
                if ((this._singnintime != value))
                {
                    this.OnSINGNINTIMEChanging(value);
                    this.RaiseDataMemberChanging("SINGNINTIME");
                    this.ValidateProperty("SINGNINTIME", value);
                    this._singnintime = value;
                    this.RaiseDataMemberChanged("SINGNINTIME");
                    this.OnSINGNINTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_SINGNIN", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.SINGNINS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.SINGNINS.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “SPECIALACTIVITICE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SPECIALACTIVITICE : Entity
    {
        
        private string _adata;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<decimal> _createuserid;
        
        private Nullable<DateTime> _cretatime;
        
        private EntityRef<SPECIALACTIVITYDEFINITON> _specialactivitydefiniton;
        
        private EntityCollection<SPECIALTOZFSJ> _specialtozfsjs;
        
        private EntityRef<SPECIALWORKFLOWINSTANCE> _specialworkflowinstance;
        
        private Nullable<decimal> _status;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private EntityRef<USER> _user;
        
        private Nullable<decimal> _userid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADATAChanging(string value);
        partial void OnADATAChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnCRETATIMEChanging(Nullable<DateTime> value);
        partial void OnCRETATIMEChanged();
        partial void OnSTATUSChanging(Nullable<decimal> value);
        partial void OnSTATUSChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SPECIALACTIVITICE"/> 类的新实例。
        /// </summary>
        public SPECIALACTIVITICE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADATA”值。
        /// </summary>
        [DataMember()]
        public string ADATA
        {
            get
            {
                return this._adata;
            }
            set
            {
                if ((this._adata != value))
                {
                    this.OnADATAChanging(value);
                    this.RaiseDataMemberChanging("ADATA");
                    this.ValidateProperty("ADATA", value);
                    this._adata = value;
                    this.RaiseDataMemberChanged("ADATA");
                    this.OnADATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CRETATIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CRETATIME
        {
            get
            {
                return this._cretatime;
            }
            set
            {
                if ((this._cretatime != value))
                {
                    this.OnCRETATIMEChanging(value);
                    this.RaiseDataMemberChanging("CRETATIME");
                    this.ValidateProperty("CRETATIME", value);
                    this._cretatime = value;
                    this.RaiseDataMemberChanged("CRETATIME");
                    this.OnCRETATIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="SPECIALACTIVITYDEFINITON"/> 实体。
        /// </summary>
        [Association("SPECIALACTIVITYDEFINITON_SPECIALACTIVITICE", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public SPECIALACTIVITYDEFINITON SPECIALACTIVITYDEFINITON
        {
            get
            {
                if ((this._specialactivitydefiniton == null))
                {
                    this._specialactivitydefiniton = new EntityRef<SPECIALACTIVITYDEFINITON>(this, "SPECIALACTIVITYDEFINITON", this.FilterSPECIALACTIVITYDEFINITON);
                }
                return this._specialactivitydefiniton.Entity;
            }
            set
            {
                SPECIALACTIVITYDEFINITON previous = this.SPECIALACTIVITYDEFINITON;
                if ((previous != value))
                {
                    this.ValidateProperty("SPECIALACTIVITYDEFINITON", value);
                    if ((previous != null))
                    {
                        this._specialactivitydefiniton.Entity = null;
                        previous.SPECIALACTIVITICES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(Nullable<decimal>);
                    }
                    this._specialactivitydefiniton.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALACTIVITICES.Add(this);
                    }
                    this.RaisePropertyChanged("SPECIALACTIVITYDEFINITON");
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALTOZFSJ"/> 实体实例的集合。
        /// </summary>
        [Association("SPECIALACTIVITICE_SPECIALTOZFSJ", "AIID", "SPECIALAIID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALTOZFSJ> SPECIALTOZFSJS
        {
            get
            {
                if ((this._specialtozfsjs == null))
                {
                    this._specialtozfsjs = new EntityCollection<SPECIALTOZFSJ>(this, "SPECIALTOZFSJS", this.FilterSPECIALTOZFSJS, this.AttachSPECIALTOZFSJS, this.DetachSPECIALTOZFSJS);
                }
                return this._specialtozfsjs;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("SPECIALWORKFLOWINSTANCE_SPECIALACTIVITICE", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public SPECIALWORKFLOWINSTANCE SPECIALWORKFLOWINSTANCE
        {
            get
            {
                if ((this._specialworkflowinstance == null))
                {
                    this._specialworkflowinstance = new EntityRef<SPECIALWORKFLOWINSTANCE>(this, "SPECIALWORKFLOWINSTANCE", this.FilterSPECIALWORKFLOWINSTANCE);
                }
                return this._specialworkflowinstance.Entity;
            }
            set
            {
                SPECIALWORKFLOWINSTANCE previous = this.SPECIALWORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("SPECIALWORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._specialworkflowinstance.Entity = null;
                        previous.SPECIALACTIVITICES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._specialworkflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALACTIVITICES.Add(this);
                    }
                    this.RaisePropertyChanged("SPECIALWORKFLOWINSTANCE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUS
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnSTATUSChanging(value);
                    this.RaiseDataMemberChanging("STATUS");
                    this.ValidateProperty("STATUS", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_SPECIALACTIVITICE", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.SPECIALACTIVITICES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALACTIVITICES.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_SPECIALACTIVITICE", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.SPECIALACTIVITICES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALACTIVITICES.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        private bool FilterSPECIALACTIVITYDEFINITON(SPECIALACTIVITYDEFINITON entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private void AttachSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            entity.SPECIALACTIVITICE = this;
        }
        
        private void DetachSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            entity.SPECIALACTIVITICE = null;
        }
        
        private bool FilterSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            return (entity.SPECIALAIID == this.AIID);
        }
        
        private bool FilterSPECIALWORKFLOWINSTANCE(SPECIALWORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “SPECIALACTIVITYDEFINITON”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SPECIALACTIVITYDEFINITON : Entity
    {
        
        private decimal _adid;
        
        private string _name;
        
        private EntityCollection<SPECIALACTIVITICE> _specialactivitices;
        
        private EntityCollection<SPECIALWORKFLOWINSTANCE> _specialworkflowinstances;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SPECIALACTIVITYDEFINITON"/> 类的新实例。
        /// </summary>
        public SPECIALACTIVITYDEFINITON()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALACTIVITICE"/> 实体实例的集合。
        /// </summary>
        [Association("SPECIALACTIVITYDEFINITON_SPECIALACTIVITICE", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALACTIVITICE> SPECIALACTIVITICES
        {
            get
            {
                if ((this._specialactivitices == null))
                {
                    this._specialactivitices = new EntityCollection<SPECIALACTIVITICE>(this, "SPECIALACTIVITICES", this.FilterSPECIALACTIVITICES, this.AttachSPECIALACTIVITICES, this.DetachSPECIALACTIVITICES);
                }
                return this._specialactivitices;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("SPECIALACTIVITYDEFINITON_SPECIALWORKFLOWINSTANCE", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALWORKFLOWINSTANCE> SPECIALWORKFLOWINSTANCES
        {
            get
            {
                if ((this._specialworkflowinstances == null))
                {
                    this._specialworkflowinstances = new EntityCollection<SPECIALWORKFLOWINSTANCE>(this, "SPECIALWORKFLOWINSTANCES", this.FilterSPECIALWORKFLOWINSTANCES, this.AttachSPECIALWORKFLOWINSTANCES, this.DetachSPECIALWORKFLOWINSTANCES);
                }
                return this._specialworkflowinstances;
            }
        }
        
        private void AttachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.SPECIALACTIVITYDEFINITON = this;
        }
        
        private void DetachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.SPECIALACTIVITYDEFINITON = null;
        }
        
        private bool FilterSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private void AttachSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            entity.SPECIALACTIVITYDEFINITON = this;
        }
        
        private void DetachSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            entity.SPECIALACTIVITYDEFINITON = null;
        }
        
        private bool FilterSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “SPECIALTOZFSJ”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SPECIALTOZFSJ : Entity
    {
        
        private Nullable<decimal> _bigclassid;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private Nullable<DateTime> _handletime;
        
        private decimal _id;
        
        private Nullable<decimal> _iscurrent;
        
        private Nullable<decimal> _smallclassid;
        
        private EntityRef<SPECIALACTIVITICE> _specialactivitice;
        
        private string _specialaiid;
        
        private Nullable<decimal> _stateid;
        
        private EntityRef<USER> _user;
        
        private Nullable<decimal> _userid;
        
        private string _zfsjwiid;
        
        private string _zxdctitle;
        
        private string _zxdcwiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnBIGCLASSIDChanging(Nullable<decimal> value);
        partial void OnBIGCLASSIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnHANDLETIMEChanging(Nullable<DateTime> value);
        partial void OnHANDLETIMEChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnISCURRENTChanging(Nullable<decimal> value);
        partial void OnISCURRENTChanged();
        partial void OnSMALLCLASSIDChanging(Nullable<decimal> value);
        partial void OnSMALLCLASSIDChanged();
        partial void OnSPECIALAIIDChanging(string value);
        partial void OnSPECIALAIIDChanged();
        partial void OnSTATEIDChanging(Nullable<decimal> value);
        partial void OnSTATEIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnZFSJWIIDChanging(string value);
        partial void OnZFSJWIIDChanged();
        partial void OnZXDCTITLEChanging(string value);
        partial void OnZXDCTITLEChanged();
        partial void OnZXDCWIIDChanging(string value);
        partial void OnZXDCWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SPECIALTOZFSJ"/> 类的新实例。
        /// </summary>
        public SPECIALTOZFSJ()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“BIGCLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BIGCLASSID
        {
            get
            {
                return this._bigclassid;
            }
            set
            {
                if ((this._bigclassid != value))
                {
                    this.OnBIGCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("BIGCLASSID");
                    this.ValidateProperty("BIGCLASSID", value);
                    this._bigclassid = value;
                    this.RaiseDataMemberChanged("BIGCLASSID");
                    this.OnBIGCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“HANDLETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> HANDLETIME
        {
            get
            {
                return this._handletime;
            }
            set
            {
                if ((this._handletime != value))
                {
                    this.OnHANDLETIMEChanging(value);
                    this.RaiseDataMemberChanging("HANDLETIME");
                    this.ValidateProperty("HANDLETIME", value);
                    this._handletime = value;
                    this.RaiseDataMemberChanged("HANDLETIME");
                    this.OnHANDLETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISCURRENT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISCURRENT
        {
            get
            {
                return this._iscurrent;
            }
            set
            {
                if ((this._iscurrent != value))
                {
                    this.OnISCURRENTChanging(value);
                    this.RaiseDataMemberChanging("ISCURRENT");
                    this.ValidateProperty("ISCURRENT", value);
                    this._iscurrent = value;
                    this.RaiseDataMemberChanged("ISCURRENT");
                    this.OnISCURRENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SMALLCLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SMALLCLASSID
        {
            get
            {
                return this._smallclassid;
            }
            set
            {
                if ((this._smallclassid != value))
                {
                    this.OnSMALLCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("SMALLCLASSID");
                    this.ValidateProperty("SMALLCLASSID", value);
                    this._smallclassid = value;
                    this.RaiseDataMemberChanged("SMALLCLASSID");
                    this.OnSMALLCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="SPECIALACTIVITICE"/> 实体。
        /// </summary>
        [Association("SPECIALACTIVITICE_SPECIALTOZFSJ", "SPECIALAIID", "AIID", IsForeignKey=true)]
        [XmlIgnore()]
        public SPECIALACTIVITICE SPECIALACTIVITICE
        {
            get
            {
                if ((this._specialactivitice == null))
                {
                    this._specialactivitice = new EntityRef<SPECIALACTIVITICE>(this, "SPECIALACTIVITICE", this.FilterSPECIALACTIVITICE);
                }
                return this._specialactivitice.Entity;
            }
            set
            {
                SPECIALACTIVITICE previous = this.SPECIALACTIVITICE;
                if ((previous != value))
                {
                    this.ValidateProperty("SPECIALACTIVITICE", value);
                    if ((previous != null))
                    {
                        this._specialactivitice.Entity = null;
                        previous.SPECIALTOZFSJS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SPECIALAIID = value.AIID;
                    }
                    else
                    {
                        this.SPECIALAIID = default(string);
                    }
                    this._specialactivitice.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALTOZFSJS.Add(this);
                    }
                    this.RaisePropertyChanged("SPECIALACTIVITICE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SPECIALAIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string SPECIALAIID
        {
            get
            {
                return this._specialaiid;
            }
            set
            {
                if ((this._specialaiid != value))
                {
                    this.OnSPECIALAIIDChanging(value);
                    this.RaiseDataMemberChanging("SPECIALAIID");
                    this.ValidateProperty("SPECIALAIID", value);
                    this._specialaiid = value;
                    this.RaiseDataMemberChanged("SPECIALAIID");
                    this.OnSPECIALAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATEID
        {
            get
            {
                return this._stateid;
            }
            set
            {
                if ((this._stateid != value))
                {
                    this.OnSTATEIDChanging(value);
                    this.RaiseDataMemberChanging("STATEID");
                    this.ValidateProperty("STATEID", value);
                    this._stateid = value;
                    this.RaiseDataMemberChanged("STATEID");
                    this.OnSTATEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_SPECIALTOZFSJ", "CREATEUSERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.SPECIALTOZFSJS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CREATEUSERID = value.USERID;
                    }
                    else
                    {
                        this.CREATEUSERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALTOZFSJS.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFSJWIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ZFSJWIID
        {
            get
            {
                return this._zfsjwiid;
            }
            set
            {
                if ((this._zfsjwiid != value))
                {
                    this.OnZFSJWIIDChanging(value);
                    this.RaiseDataMemberChanging("ZFSJWIID");
                    this.ValidateProperty("ZFSJWIID", value);
                    this._zfsjwiid = value;
                    this.RaiseDataMemberChanged("ZFSJWIID");
                    this.OnZFSJWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZXDCTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ZXDCTITLE
        {
            get
            {
                return this._zxdctitle;
            }
            set
            {
                if ((this._zxdctitle != value))
                {
                    this.OnZXDCTITLEChanging(value);
                    this.RaiseDataMemberChanging("ZXDCTITLE");
                    this.ValidateProperty("ZXDCTITLE", value);
                    this._zxdctitle = value;
                    this.RaiseDataMemberChanged("ZXDCTITLE");
                    this.OnZXDCTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZXDCWIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ZXDCWIID
        {
            get
            {
                return this._zxdcwiid;
            }
            set
            {
                if ((this._zxdcwiid != value))
                {
                    this.OnZXDCWIIDChanging(value);
                    this.RaiseDataMemberChanging("ZXDCWIID");
                    this.ValidateProperty("ZXDCWIID", value);
                    this._zxdcwiid = value;
                    this.RaiseDataMemberChanged("ZXDCWIID");
                    this.OnZXDCWIIDChanged();
                }
            }
        }
        
        private bool FilterSPECIALACTIVITICE(SPECIALACTIVITICE entity)
        {
            return (entity.AIID == this.SPECIALAIID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.CREATEUSERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “SPECIALWORKFLOWINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class SPECIALWORKFLOWINSTANCE : Entity
    {
        
        private Nullable<decimal> _adid;
        
        private Nullable<decimal> _createuserid;
        
        private Nullable<DateTime> _cretetime;
        
        private string _explain;
        
        private string _files;
        
        private Nullable<DateTime> _overtime;
        
        private EntityCollection<SPECIALACTIVITICE> _specialactivitices;
        
        private EntityRef<SPECIALACTIVITYDEFINITON> _specialactivitydefiniton;
        
        private Nullable<DateTime> _starttime;
        
        private Nullable<decimal> _status;
        
        private string _titel;
        
        private EntityRef<USER> _user;
        
        private string _wdata;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnCRETETIMEChanging(Nullable<DateTime> value);
        partial void OnCRETETIMEChanged();
        partial void OnEXPLAINChanging(string value);
        partial void OnEXPLAINChanged();
        partial void OnFILESChanging(string value);
        partial void OnFILESChanged();
        partial void OnOVERTIMEChanging(Nullable<DateTime> value);
        partial void OnOVERTIMEChanged();
        partial void OnSTARTTIMEChanging(Nullable<DateTime> value);
        partial void OnSTARTTIMEChanged();
        partial void OnSTATUSChanging(Nullable<decimal> value);
        partial void OnSTATUSChanged();
        partial void OnTITELChanging(string value);
        partial void OnTITELChanged();
        partial void OnWDATAChanging(string value);
        partial void OnWDATAChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SPECIALWORKFLOWINSTANCE"/> 类的新实例。
        /// </summary>
        public SPECIALWORKFLOWINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CRETETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CRETETIME
        {
            get
            {
                return this._cretetime;
            }
            set
            {
                if ((this._cretetime != value))
                {
                    this.OnCRETETIMEChanging(value);
                    this.RaiseDataMemberChanging("CRETETIME");
                    this.ValidateProperty("CRETETIME", value);
                    this._cretetime = value;
                    this.RaiseDataMemberChanged("CRETETIME");
                    this.OnCRETETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EXPLAIN”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string EXPLAIN
        {
            get
            {
                return this._explain;
            }
            set
            {
                if ((this._explain != value))
                {
                    this.OnEXPLAINChanging(value);
                    this.RaiseDataMemberChanging("EXPLAIN");
                    this.ValidateProperty("EXPLAIN", value);
                    this._explain = value;
                    this.RaiseDataMemberChanged("EXPLAIN");
                    this.OnEXPLAINChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FILES”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string FILES
        {
            get
            {
                return this._files;
            }
            set
            {
                if ((this._files != value))
                {
                    this.OnFILESChanging(value);
                    this.RaiseDataMemberChanging("FILES");
                    this.ValidateProperty("FILES", value);
                    this._files = value;
                    this.RaiseDataMemberChanged("FILES");
                    this.OnFILESChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OVERTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OVERTIME
        {
            get
            {
                return this._overtime;
            }
            set
            {
                if ((this._overtime != value))
                {
                    this.OnOVERTIMEChanging(value);
                    this.RaiseDataMemberChanging("OVERTIME");
                    this.ValidateProperty("OVERTIME", value);
                    this._overtime = value;
                    this.RaiseDataMemberChanged("OVERTIME");
                    this.OnOVERTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALACTIVITICE"/> 实体实例的集合。
        /// </summary>
        [Association("SPECIALWORKFLOWINSTANCE_SPECIALACTIVITICE", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALACTIVITICE> SPECIALACTIVITICES
        {
            get
            {
                if ((this._specialactivitices == null))
                {
                    this._specialactivitices = new EntityCollection<SPECIALACTIVITICE>(this, "SPECIALACTIVITICES", this.FilterSPECIALACTIVITICES, this.AttachSPECIALACTIVITICES, this.DetachSPECIALACTIVITICES);
                }
                return this._specialactivitices;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="SPECIALACTIVITYDEFINITON"/> 实体。
        /// </summary>
        [Association("SPECIALACTIVITYDEFINITON_SPECIALWORKFLOWINSTANCE", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public SPECIALACTIVITYDEFINITON SPECIALACTIVITYDEFINITON
        {
            get
            {
                if ((this._specialactivitydefiniton == null))
                {
                    this._specialactivitydefiniton = new EntityRef<SPECIALACTIVITYDEFINITON>(this, "SPECIALACTIVITYDEFINITON", this.FilterSPECIALACTIVITYDEFINITON);
                }
                return this._specialactivitydefiniton.Entity;
            }
            set
            {
                SPECIALACTIVITYDEFINITON previous = this.SPECIALACTIVITYDEFINITON;
                if ((previous != value))
                {
                    this.ValidateProperty("SPECIALACTIVITYDEFINITON", value);
                    if ((previous != null))
                    {
                        this._specialactivitydefiniton.Entity = null;
                        previous.SPECIALWORKFLOWINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(Nullable<decimal>);
                    }
                    this._specialactivitydefiniton.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALWORKFLOWINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("SPECIALACTIVITYDEFINITON");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> STARTTIME
        {
            get
            {
                return this._starttime;
            }
            set
            {
                if ((this._starttime != value))
                {
                    this.OnSTARTTIMEChanging(value);
                    this.RaiseDataMemberChanging("STARTTIME");
                    this.ValidateProperty("STARTTIME", value);
                    this._starttime = value;
                    this.RaiseDataMemberChanged("STARTTIME");
                    this.OnSTARTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUS
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnSTATUSChanging(value);
                    this.RaiseDataMemberChanging("STATUS");
                    this.ValidateProperty("STATUS", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TITEL”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string TITEL
        {
            get
            {
                return this._titel;
            }
            set
            {
                if ((this._titel != value))
                {
                    this.OnTITELChanging(value);
                    this.RaiseDataMemberChanging("TITEL");
                    this.ValidateProperty("TITEL", value);
                    this._titel = value;
                    this.RaiseDataMemberChanged("TITEL");
                    this.OnTITELChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_SPECIALWORKFLOWINSTANCE", "CREATEUSERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.SPECIALWORKFLOWINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CREATEUSERID = value.USERID;
                    }
                    else
                    {
                        this.CREATEUSERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.SPECIALWORKFLOWINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDATA”值。
        /// </summary>
        [DataMember()]
        public string WDATA
        {
            get
            {
                return this._wdata;
            }
            set
            {
                if ((this._wdata != value))
                {
                    this.OnWDATAChanging(value);
                    this.RaiseDataMemberChanging("WDATA");
                    this.ValidateProperty("WDATA", value);
                    this._wdata = value;
                    this.RaiseDataMemberChanged("WDATA");
                    this.OnWDATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        private void AttachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.SPECIALWORKFLOWINSTANCE = this;
        }
        
        private void DetachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.SPECIALWORKFLOWINSTANCE = null;
        }
        
        private bool FilterSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private bool FilterSPECIALACTIVITYDEFINITON(SPECIALACTIVITYDEFINITON entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.CREATEUSERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
    
    /// <summary>
    /// “STREESTORE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREESTORE : Entity
    {
        
        private string _address;
        
        private string _geometry;
        
        private Nullable<decimal> _isgswsxkz;
        
        private Nullable<decimal> _ishjpl;
        
        private Nullable<decimal> _ismtzp;
        
        private Nullable<decimal> _ispsxkz;
        
        private string _pictureurls;
        
        private string _shopname;
        
        private string _shopphone;
        
        private string _shopusername;
        
        private decimal _streestoreid;
        
        private EntityRef<STREESTORETYPE> _streestoretype;
        
        private string _streestoretypeid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnISGSWSXKZChanging(Nullable<decimal> value);
        partial void OnISGSWSXKZChanged();
        partial void OnISHJPLChanging(Nullable<decimal> value);
        partial void OnISHJPLChanged();
        partial void OnISMTZPChanging(Nullable<decimal> value);
        partial void OnISMTZPChanged();
        partial void OnISPSXKZChanging(Nullable<decimal> value);
        partial void OnISPSXKZChanged();
        partial void OnPICTUREURLSChanging(string value);
        partial void OnPICTUREURLSChanged();
        partial void OnSHOPNAMEChanging(string value);
        partial void OnSHOPNAMEChanged();
        partial void OnSHOPPHONEChanging(string value);
        partial void OnSHOPPHONEChanged();
        partial void OnSHOPUSERNAMEChanging(string value);
        partial void OnSHOPUSERNAMEChanged();
        partial void OnSTREESTOREIDChanging(decimal value);
        partial void OnSTREESTOREIDChanged();
        partial void OnSTREESTORETYPEIDChanging(string value);
        partial void OnSTREESTORETYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREESTORE"/> 类的新实例。
        /// </summary>
        public STREESTORE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(800)]
        public string ADDRESS
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnADDRESSChanging(value);
                    this.RaiseDataMemberChanging("ADDRESS");
                    this.ValidateProperty("ADDRESS", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        [StringLength(800)]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISGSWSXKZ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISGSWSXKZ
        {
            get
            {
                return this._isgswsxkz;
            }
            set
            {
                if ((this._isgswsxkz != value))
                {
                    this.OnISGSWSXKZChanging(value);
                    this.RaiseDataMemberChanging("ISGSWSXKZ");
                    this.ValidateProperty("ISGSWSXKZ", value);
                    this._isgswsxkz = value;
                    this.RaiseDataMemberChanged("ISGSWSXKZ");
                    this.OnISGSWSXKZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISHJPL”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISHJPL
        {
            get
            {
                return this._ishjpl;
            }
            set
            {
                if ((this._ishjpl != value))
                {
                    this.OnISHJPLChanging(value);
                    this.RaiseDataMemberChanging("ISHJPL");
                    this.ValidateProperty("ISHJPL", value);
                    this._ishjpl = value;
                    this.RaiseDataMemberChanged("ISHJPL");
                    this.OnISHJPLChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISMTZP”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISMTZP
        {
            get
            {
                return this._ismtzp;
            }
            set
            {
                if ((this._ismtzp != value))
                {
                    this.OnISMTZPChanging(value);
                    this.RaiseDataMemberChanging("ISMTZP");
                    this.ValidateProperty("ISMTZP", value);
                    this._ismtzp = value;
                    this.RaiseDataMemberChanged("ISMTZP");
                    this.OnISMTZPChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISPSXKZ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISPSXKZ
        {
            get
            {
                return this._ispsxkz;
            }
            set
            {
                if ((this._ispsxkz != value))
                {
                    this.OnISPSXKZChanging(value);
                    this.RaiseDataMemberChanging("ISPSXKZ");
                    this.ValidateProperty("ISPSXKZ", value);
                    this._ispsxkz = value;
                    this.RaiseDataMemberChanged("ISPSXKZ");
                    this.OnISPSXKZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PICTUREURLS”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PICTUREURLS
        {
            get
            {
                return this._pictureurls;
            }
            set
            {
                if ((this._pictureurls != value))
                {
                    this.OnPICTUREURLSChanging(value);
                    this.RaiseDataMemberChanging("PICTUREURLS");
                    this.ValidateProperty("PICTUREURLS", value);
                    this._pictureurls = value;
                    this.RaiseDataMemberChanged("PICTUREURLS");
                    this.OnPICTUREURLSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHOPNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(800)]
        public string SHOPNAME
        {
            get
            {
                return this._shopname;
            }
            set
            {
                if ((this._shopname != value))
                {
                    this.OnSHOPNAMEChanging(value);
                    this.RaiseDataMemberChanging("SHOPNAME");
                    this.ValidateProperty("SHOPNAME", value);
                    this._shopname = value;
                    this.RaiseDataMemberChanged("SHOPNAME");
                    this.OnSHOPNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHOPPHONE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string SHOPPHONE
        {
            get
            {
                return this._shopphone;
            }
            set
            {
                if ((this._shopphone != value))
                {
                    this.OnSHOPPHONEChanging(value);
                    this.RaiseDataMemberChanging("SHOPPHONE");
                    this.ValidateProperty("SHOPPHONE", value);
                    this._shopphone = value;
                    this.RaiseDataMemberChanged("SHOPPHONE");
                    this.OnSHOPPHONEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHOPUSERNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string SHOPUSERNAME
        {
            get
            {
                return this._shopusername;
            }
            set
            {
                if ((this._shopusername != value))
                {
                    this.OnSHOPUSERNAMEChanging(value);
                    this.RaiseDataMemberChanging("SHOPUSERNAME");
                    this.ValidateProperty("SHOPUSERNAME", value);
                    this._shopusername = value;
                    this.RaiseDataMemberChanged("SHOPUSERNAME");
                    this.OnSHOPUSERNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREESTOREID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal STREESTOREID
        {
            get
            {
                return this._streestoreid;
            }
            set
            {
                if ((this._streestoreid != value))
                {
                    this.OnSTREESTOREIDChanging(value);
                    this.ValidateProperty("STREESTOREID", value);
                    this._streestoreid = value;
                    this.RaisePropertyChanged("STREESTOREID");
                    this.OnSTREESTOREIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREESTORETYPE"/> 实体。
        /// </summary>
        [Association("STREESTORETYPE_STREESTORE", "STREESTORETYPEID", "STREESTORETYPEID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREESTORETYPE STREESTORETYPE
        {
            get
            {
                if ((this._streestoretype == null))
                {
                    this._streestoretype = new EntityRef<STREESTORETYPE>(this, "STREESTORETYPE", this.FilterSTREESTORETYPE);
                }
                return this._streestoretype.Entity;
            }
            set
            {
                STREESTORETYPE previous = this.STREESTORETYPE;
                if ((previous != value))
                {
                    this.ValidateProperty("STREESTORETYPE", value);
                    if ((previous != null))
                    {
                        this._streestoretype.Entity = null;
                        previous.STREESTORES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREESTORETYPEID = value.STREESTORETYPEID;
                    }
                    else
                    {
                        this.STREESTORETYPEID = default(string);
                    }
                    this._streestoretype.Entity = value;
                    if ((value != null))
                    {
                        value.STREESTORES.Add(this);
                    }
                    this.RaisePropertyChanged("STREESTORETYPE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREESTORETYPEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string STREESTORETYPEID
        {
            get
            {
                return this._streestoretypeid;
            }
            set
            {
                if ((this._streestoretypeid != value))
                {
                    this.OnSTREESTORETYPEIDChanging(value);
                    this.RaiseDataMemberChanging("STREESTORETYPEID");
                    this.ValidateProperty("STREESTORETYPEID", value);
                    this._streestoretypeid = value;
                    this.RaiseDataMemberChanged("STREESTORETYPEID");
                    this.OnSTREESTORETYPEIDChanged();
                }
            }
        }
        
        private bool FilterSTREESTORETYPE(STREESTORETYPE entity)
        {
            return (entity.STREESTORETYPEID == this.STREESTORETYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._streestoreid;
        }
    }
    
    /// <summary>
    /// “STREESTORETYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREESTORETYPE : Entity
    {
        
        private string _description;
        
        private string _parentid;
        
        private string _path;
        
        private EntityCollection<STREESTORE> _streestores;
        
        private string _streestoretypeid;
        
        private string _typename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnPARENTIDChanging(string value);
        partial void OnPARENTIDChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();
        partial void OnSTREESTORETYPEIDChanging(string value);
        partial void OnSTREESTORETYPEIDChanged();
        partial void OnTYPENAMEChanging(string value);
        partial void OnTYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREESTORETYPE"/> 类的新实例。
        /// </summary>
        public STREESTORETYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(800)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PATH
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPATHChanging(value);
                    this.RaiseDataMemberChanging("PATH");
                    this.ValidateProperty("PATH", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREESTORE"/> 实体实例的集合。
        /// </summary>
        [Association("STREESTORETYPE_STREESTORE", "STREESTORETYPEID", "STREESTORETYPEID")]
        [XmlIgnore()]
        public EntityCollection<STREESTORE> STREESTORES
        {
            get
            {
                if ((this._streestores == null))
                {
                    this._streestores = new EntityCollection<STREESTORE>(this, "STREESTORES", this.FilterSTREESTORES, this.AttachSTREESTORES, this.DetachSTREESTORES);
                }
                return this._streestores;
            }
        }
        
        /// <summary>
        /// 获取或设置“STREESTORETYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string STREESTORETYPEID
        {
            get
            {
                return this._streestoretypeid;
            }
            set
            {
                if ((this._streestoretypeid != value))
                {
                    this.OnSTREESTORETYPEIDChanging(value);
                    this.ValidateProperty("STREESTORETYPEID", value);
                    this._streestoretypeid = value;
                    this.RaisePropertyChanged("STREESTORETYPEID");
                    this.OnSTREESTORETYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string TYPENAME
        {
            get
            {
                return this._typename;
            }
            set
            {
                if ((this._typename != value))
                {
                    this.OnTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("TYPENAME");
                    this.ValidateProperty("TYPENAME", value);
                    this._typename = value;
                    this.RaiseDataMemberChanged("TYPENAME");
                    this.OnTYPENAMEChanged();
                }
            }
        }
        
        private void AttachSTREESTORES(STREESTORE entity)
        {
            entity.STREESTORETYPE = this;
        }
        
        private void DetachSTREESTORES(STREESTORE entity)
        {
            entity.STREESTORETYPE = null;
        }
        
        private bool FilterSTREESTORES(STREESTORE entity)
        {
            return (entity.STREESTORETYPEID == this.STREESTORETYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._streestoretypeid;
        }
    }
    
    /// <summary>
    /// “STREET”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREET : Entity
    {
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private Nullable<decimal> _statuid;
        
        private string _streetaddress;
        
        private string _streetcaptain;
        
        private EntityCollection<STREETEXAMINE> _streetexamines;
        
        private string _streetexplain;
        
        private decimal _streetid;
        
        private string _streetname;
        
        private string _streetperson;
        
        private EntityRef<STREETTYPE> _streettype;
        
        private Nullable<decimal> _streettypeid;
        
        private Nullable<decimal> _unitid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();
        partial void OnSTREETADDRESSChanging(string value);
        partial void OnSTREETADDRESSChanged();
        partial void OnSTREETCAPTAINChanging(string value);
        partial void OnSTREETCAPTAINChanged();
        partial void OnSTREETEXPLAINChanging(string value);
        partial void OnSTREETEXPLAINChanged();
        partial void OnSTREETIDChanging(decimal value);
        partial void OnSTREETIDChanged();
        partial void OnSTREETNAMEChanging(string value);
        partial void OnSTREETNAMEChanged();
        partial void OnSTREETPERSONChanging(string value);
        partial void OnSTREETPERSONChanged();
        partial void OnSTREETTYPEIDChanging(Nullable<decimal> value);
        partial void OnSTREETTYPEIDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREET"/> 类的新实例。
        /// </summary>
        public STREET()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string STREETADDRESS
        {
            get
            {
                return this._streetaddress;
            }
            set
            {
                if ((this._streetaddress != value))
                {
                    this.OnSTREETADDRESSChanging(value);
                    this.RaiseDataMemberChanging("STREETADDRESS");
                    this.ValidateProperty("STREETADDRESS", value);
                    this._streetaddress = value;
                    this.RaiseDataMemberChanged("STREETADDRESS");
                    this.OnSTREETADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETCAPTAIN”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string STREETCAPTAIN
        {
            get
            {
                return this._streetcaptain;
            }
            set
            {
                if ((this._streetcaptain != value))
                {
                    this.OnSTREETCAPTAINChanging(value);
                    this.RaiseDataMemberChanging("STREETCAPTAIN");
                    this.ValidateProperty("STREETCAPTAIN", value);
                    this._streetcaptain = value;
                    this.RaiseDataMemberChanged("STREETCAPTAIN");
                    this.OnSTREETCAPTAINChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREETEXAMINE"/> 实体实例的集合。
        /// </summary>
        [Association("STREET_STREETEXAMINE", "STREETID", "STREETID")]
        [XmlIgnore()]
        public EntityCollection<STREETEXAMINE> STREETEXAMINES
        {
            get
            {
                if ((this._streetexamines == null))
                {
                    this._streetexamines = new EntityCollection<STREETEXAMINE>(this, "STREETEXAMINES", this.FilterSTREETEXAMINES, this.AttachSTREETEXAMINES, this.DetachSTREETEXAMINES);
                }
                return this._streetexamines;
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETEXPLAIN”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string STREETEXPLAIN
        {
            get
            {
                return this._streetexplain;
            }
            set
            {
                if ((this._streetexplain != value))
                {
                    this.OnSTREETEXPLAINChanging(value);
                    this.RaiseDataMemberChanging("STREETEXPLAIN");
                    this.ValidateProperty("STREETEXPLAIN", value);
                    this._streetexplain = value;
                    this.RaiseDataMemberChanged("STREETEXPLAIN");
                    this.OnSTREETEXPLAINChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal STREETID
        {
            get
            {
                return this._streetid;
            }
            set
            {
                if ((this._streetid != value))
                {
                    this.OnSTREETIDChanging(value);
                    this.ValidateProperty("STREETID", value);
                    this._streetid = value;
                    this.RaisePropertyChanged("STREETID");
                    this.OnSTREETIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string STREETNAME
        {
            get
            {
                return this._streetname;
            }
            set
            {
                if ((this._streetname != value))
                {
                    this.OnSTREETNAMEChanging(value);
                    this.RaiseDataMemberChanging("STREETNAME");
                    this.ValidateProperty("STREETNAME", value);
                    this._streetname = value;
                    this.RaiseDataMemberChanged("STREETNAME");
                    this.OnSTREETNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETPERSON”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string STREETPERSON
        {
            get
            {
                return this._streetperson;
            }
            set
            {
                if ((this._streetperson != value))
                {
                    this.OnSTREETPERSONChanging(value);
                    this.RaiseDataMemberChanging("STREETPERSON");
                    this.ValidateProperty("STREETPERSON", value);
                    this._streetperson = value;
                    this.RaiseDataMemberChanged("STREETPERSON");
                    this.OnSTREETPERSONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREETTYPE"/> 实体。
        /// </summary>
        [Association("STREETTYPE_STREET", "STREETTYPEID", "STREETTYPEID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREETTYPE STREETTYPE
        {
            get
            {
                if ((this._streettype == null))
                {
                    this._streettype = new EntityRef<STREETTYPE>(this, "STREETTYPE", this.FilterSTREETTYPE);
                }
                return this._streettype.Entity;
            }
            set
            {
                STREETTYPE previous = this.STREETTYPE;
                if ((previous != value))
                {
                    this.ValidateProperty("STREETTYPE", value);
                    if ((previous != null))
                    {
                        this._streettype.Entity = null;
                        previous.STREETS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREETTYPEID = value.STREETTYPEID;
                    }
                    else
                    {
                        this.STREETTYPEID = default(Nullable<decimal>);
                    }
                    this._streettype.Entity = value;
                    if ((value != null))
                    {
                        value.STREETS.Add(this);
                    }
                    this.RaisePropertyChanged("STREETTYPE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETTYPEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STREETTYPEID
        {
            get
            {
                return this._streettypeid;
            }
            set
            {
                if ((this._streettypeid != value))
                {
                    this.OnSTREETTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("STREETTYPEID");
                    this.ValidateProperty("STREETTYPEID", value);
                    this._streettypeid = value;
                    this.RaiseDataMemberChanged("STREETTYPEID");
                    this.OnSTREETTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        private void AttachSTREETEXAMINES(STREETEXAMINE entity)
        {
            entity.STREET = this;
        }
        
        private void DetachSTREETEXAMINES(STREETEXAMINE entity)
        {
            entity.STREET = null;
        }
        
        private bool FilterSTREETEXAMINES(STREETEXAMINE entity)
        {
            return (entity.STREETID == this.STREETID);
        }
        
        private bool FilterSTREETTYPE(STREETTYPE entity)
        {
            return (entity.STREETTYPEID == this.STREETTYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._streetid;
        }
    }
    
    /// <summary>
    /// “STREETASSESSMENTTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETASSESSMENTTYPE : Entity
    {
        
        private string _description;
        
        private decimal _id;
        
        private Nullable<decimal> _mark;
        
        private string _name;
        
        private Nullable<decimal> _parentid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnMARKChanging(Nullable<decimal> value);
        partial void OnMARKChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETASSESSMENTTYPE"/> 类的新实例。
        /// </summary>
        public STREETASSESSMENTTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MARK”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> MARK
        {
            get
            {
                return this._mark;
            }
            set
            {
                if ((this._mark != value))
                {
                    this.OnMARKChanging(value);
                    this.RaiseDataMemberChanging("MARK");
                    this.ValidateProperty("MARK", value);
                    this._mark = value;
                    this.RaiseDataMemberChanged("MARK");
                    this.OnMARKChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “STREETBAS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETBAS : Entity
    {
        
        private string _assesstitle;
        
        private string _auditopinion;
        
        private Nullable<DateTime> _auditortime;
        
        private string _auditoruserid;
        
        private string _content;
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private string _files;
        
        private Nullable<decimal> _statuid;
        
        private decimal _streetbaseid;
        
        private EntityCollection<STREETEXAMINE> _streetexamines;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnASSESSTITLEChanging(string value);
        partial void OnASSESSTITLEChanged();
        partial void OnAUDITOPINIONChanging(string value);
        partial void OnAUDITOPINIONChanged();
        partial void OnAUDITORTIMEChanging(Nullable<DateTime> value);
        partial void OnAUDITORTIMEChanged();
        partial void OnAUDITORUSERIDChanging(string value);
        partial void OnAUDITORUSERIDChanged();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnFILESChanging(string value);
        partial void OnFILESChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();
        partial void OnSTREETBASEIDChanging(decimal value);
        partial void OnSTREETBASEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETBAS"/> 类的新实例。
        /// </summary>
        public STREETBAS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ASSESSTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ASSESSTITLE
        {
            get
            {
                return this._assesstitle;
            }
            set
            {
                if ((this._assesstitle != value))
                {
                    this.OnASSESSTITLEChanging(value);
                    this.RaiseDataMemberChanging("ASSESSTITLE");
                    this.ValidateProperty("ASSESSTITLE", value);
                    this._assesstitle = value;
                    this.RaiseDataMemberChanged("ASSESSTITLE");
                    this.OnASSESSTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AUDITOPINION”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string AUDITOPINION
        {
            get
            {
                return this._auditopinion;
            }
            set
            {
                if ((this._auditopinion != value))
                {
                    this.OnAUDITOPINIONChanging(value);
                    this.RaiseDataMemberChanging("AUDITOPINION");
                    this.ValidateProperty("AUDITOPINION", value);
                    this._auditopinion = value;
                    this.RaiseDataMemberChanged("AUDITOPINION");
                    this.OnAUDITOPINIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AUDITORTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> AUDITORTIME
        {
            get
            {
                return this._auditortime;
            }
            set
            {
                if ((this._auditortime != value))
                {
                    this.OnAUDITORTIMEChanging(value);
                    this.RaiseDataMemberChanging("AUDITORTIME");
                    this.ValidateProperty("AUDITORTIME", value);
                    this._auditortime = value;
                    this.RaiseDataMemberChanged("AUDITORTIME");
                    this.OnAUDITORTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AUDITORUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string AUDITORUSERID
        {
            get
            {
                return this._auditoruserid;
            }
            set
            {
                if ((this._auditoruserid != value))
                {
                    this.OnAUDITORUSERIDChanging(value);
                    this.RaiseDataMemberChanging("AUDITORUSERID");
                    this.ValidateProperty("AUDITORUSERID", value);
                    this._auditoruserid = value;
                    this.RaiseDataMemberChanged("AUDITORUSERID");
                    this.OnAUDITORUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FILES”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string FILES
        {
            get
            {
                return this._files;
            }
            set
            {
                if ((this._files != value))
                {
                    this.OnFILESChanging(value);
                    this.RaiseDataMemberChanging("FILES");
                    this.ValidateProperty("FILES", value);
                    this._files = value;
                    this.RaiseDataMemberChanged("FILES");
                    this.OnFILESChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETBASEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal STREETBASEID
        {
            get
            {
                return this._streetbaseid;
            }
            set
            {
                if ((this._streetbaseid != value))
                {
                    this.OnSTREETBASEIDChanging(value);
                    this.ValidateProperty("STREETBASEID", value);
                    this._streetbaseid = value;
                    this.RaisePropertyChanged("STREETBASEID");
                    this.OnSTREETBASEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREETEXAMINE"/> 实体实例的集合。
        /// </summary>
        [Association("STREETBAS_STREETEXAMINE", "STREETBASEID", "STREETBASEID")]
        [XmlIgnore()]
        public EntityCollection<STREETEXAMINE> STREETEXAMINES
        {
            get
            {
                if ((this._streetexamines == null))
                {
                    this._streetexamines = new EntityCollection<STREETEXAMINE>(this, "STREETEXAMINES", this.FilterSTREETEXAMINES, this.AttachSTREETEXAMINES, this.DetachSTREETEXAMINES);
                }
                return this._streetexamines;
            }
        }
        
        private void AttachSTREETEXAMINES(STREETEXAMINE entity)
        {
            entity.STREETBAS = this;
        }
        
        private void DetachSTREETEXAMINES(STREETEXAMINE entity)
        {
            entity.STREETBAS = null;
        }
        
        private bool FilterSTREETEXAMINES(STREETEXAMINE entity)
        {
            return (entity.STREETBASEID == this.STREETBASEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._streetbaseid;
        }
    }
    
    /// <summary>
    /// “STREETEXAMINE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETEXAMINE : Entity
    {
        
        private decimal _id;
        
        private Nullable<decimal> _statuid;
        
        private EntityRef<STREET> _street;
        
        private EntityRef<STREETBAS> _streetbas;
        
        private Nullable<decimal> _streetbaseid;
        
        private Nullable<decimal> _streetid;
        
        private EntityCollection<STREETPROBLEM> _streetproblems;
        
        private EntityCollection<STREETUSER> _streetusers;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();
        partial void OnSTREETBASEIDChanging(Nullable<decimal> value);
        partial void OnSTREETBASEIDChanged();
        partial void OnSTREETIDChanging(Nullable<decimal> value);
        partial void OnSTREETIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETEXAMINE"/> 类的新实例。
        /// </summary>
        public STREETEXAMINE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREET"/> 实体。
        /// </summary>
        [Association("STREET_STREETEXAMINE", "STREETID", "STREETID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREET STREET
        {
            get
            {
                if ((this._street == null))
                {
                    this._street = new EntityRef<STREET>(this, "STREET", this.FilterSTREET);
                }
                return this._street.Entity;
            }
            set
            {
                STREET previous = this.STREET;
                if ((previous != value))
                {
                    this.ValidateProperty("STREET", value);
                    if ((previous != null))
                    {
                        this._street.Entity = null;
                        previous.STREETEXAMINES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREETID = value.STREETID;
                    }
                    else
                    {
                        this.STREETID = default(Nullable<decimal>);
                    }
                    this._street.Entity = value;
                    if ((value != null))
                    {
                        value.STREETEXAMINES.Add(this);
                    }
                    this.RaisePropertyChanged("STREET");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREETBAS"/> 实体。
        /// </summary>
        [Association("STREETBAS_STREETEXAMINE", "STREETBASEID", "STREETBASEID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREETBAS STREETBAS
        {
            get
            {
                if ((this._streetbas == null))
                {
                    this._streetbas = new EntityRef<STREETBAS>(this, "STREETBAS", this.FilterSTREETBAS);
                }
                return this._streetbas.Entity;
            }
            set
            {
                STREETBAS previous = this.STREETBAS;
                if ((previous != value))
                {
                    this.ValidateProperty("STREETBAS", value);
                    if ((previous != null))
                    {
                        this._streetbas.Entity = null;
                        previous.STREETEXAMINES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREETBASEID = value.STREETBASEID;
                    }
                    else
                    {
                        this.STREETBASEID = default(Nullable<decimal>);
                    }
                    this._streetbas.Entity = value;
                    if ((value != null))
                    {
                        value.STREETEXAMINES.Add(this);
                    }
                    this.RaisePropertyChanged("STREETBAS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETBASEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STREETBASEID
        {
            get
            {
                return this._streetbaseid;
            }
            set
            {
                if ((this._streetbaseid != value))
                {
                    this.OnSTREETBASEIDChanging(value);
                    this.RaiseDataMemberChanging("STREETBASEID");
                    this.ValidateProperty("STREETBASEID", value);
                    this._streetbaseid = value;
                    this.RaiseDataMemberChanged("STREETBASEID");
                    this.OnSTREETBASEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STREETID
        {
            get
            {
                return this._streetid;
            }
            set
            {
                if ((this._streetid != value))
                {
                    this.OnSTREETIDChanging(value);
                    this.RaiseDataMemberChanging("STREETID");
                    this.ValidateProperty("STREETID", value);
                    this._streetid = value;
                    this.RaiseDataMemberChanged("STREETID");
                    this.OnSTREETIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREETPROBLEM"/> 实体实例的集合。
        /// </summary>
        [Association("STREETEXAMINE_STREETPROBLEM", "ID", "STREETEXAMINEID")]
        [XmlIgnore()]
        public EntityCollection<STREETPROBLEM> STREETPROBLEMS
        {
            get
            {
                if ((this._streetproblems == null))
                {
                    this._streetproblems = new EntityCollection<STREETPROBLEM>(this, "STREETPROBLEMS", this.FilterSTREETPROBLEMS, this.AttachSTREETPROBLEMS, this.DetachSTREETPROBLEMS);
                }
                return this._streetproblems;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREETUSER"/> 实体实例的集合。
        /// </summary>
        [Association("STREETEXAMINE_STREETUSER", "ID", "STREETEXAMINEID")]
        [XmlIgnore()]
        public EntityCollection<STREETUSER> STREETUSERS
        {
            get
            {
                if ((this._streetusers == null))
                {
                    this._streetusers = new EntityCollection<STREETUSER>(this, "STREETUSERS", this.FilterSTREETUSERS, this.AttachSTREETUSERS, this.DetachSTREETUSERS);
                }
                return this._streetusers;
            }
        }
        
        private bool FilterSTREET(STREET entity)
        {
            return (entity.STREETID == this.STREETID);
        }
        
        private bool FilterSTREETBAS(STREETBAS entity)
        {
            return (entity.STREETBASEID == this.STREETBASEID);
        }
        
        private void AttachSTREETPROBLEMS(STREETPROBLEM entity)
        {
            entity.STREETEXAMINE = this;
        }
        
        private void DetachSTREETPROBLEMS(STREETPROBLEM entity)
        {
            entity.STREETEXAMINE = null;
        }
        
        private bool FilterSTREETPROBLEMS(STREETPROBLEM entity)
        {
            return (entity.STREETEXAMINEID == this.ID);
        }
        
        private void AttachSTREETUSERS(STREETUSER entity)
        {
            entity.STREETEXAMINE = this;
        }
        
        private void DetachSTREETUSERS(STREETUSER entity)
        {
            entity.STREETEXAMINE = null;
        }
        
        private bool FilterSTREETUSERS(STREETUSER entity)
        {
            return (entity.STREETEXAMINEID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “STREETPROBLEM”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETPROBLEM : Entity
    {
        
        private Nullable<decimal> _actualpoints;
        
        private string _address;
        
        private Nullable<decimal> _bigclassid;
        
        private string _content;
        
        private Nullable<DateTime> _createtime;
        
        private string _description;
        
        private Nullable<DateTime> _examinetime;
        
        private string _files;
        
        private decimal _id;
        
        private string _latandlong;
        
        private string _opinion;
        
        private Nullable<decimal> _pointss;
        
        private Nullable<decimal> _reportid;
        
        private Nullable<decimal> _smallclassid;
        
        private Nullable<decimal> _statuid;
        
        private EntityRef<STREETEXAMINE> _streetexamine;
        
        private Nullable<decimal> _streetexamineid;
        
        private Nullable<decimal> _subclassid;
        
        private string _title;
        
        private Nullable<decimal> _typeid;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACTUALPOINTSChanging(Nullable<decimal> value);
        partial void OnACTUALPOINTSChanged();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnBIGCLASSIDChanging(Nullable<decimal> value);
        partial void OnBIGCLASSIDChanged();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnEXAMINETIMEChanging(Nullable<DateTime> value);
        partial void OnEXAMINETIMEChanged();
        partial void OnFILESChanging(string value);
        partial void OnFILESChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnLATANDLONGChanging(string value);
        partial void OnLATANDLONGChanged();
        partial void OnOPINIONChanging(string value);
        partial void OnOPINIONChanged();
        partial void OnPOINTSSChanging(Nullable<decimal> value);
        partial void OnPOINTSSChanged();
        partial void OnREPORTIDChanging(Nullable<decimal> value);
        partial void OnREPORTIDChanged();
        partial void OnSMALLCLASSIDChanging(Nullable<decimal> value);
        partial void OnSMALLCLASSIDChanged();
        partial void OnSTATUIDChanging(Nullable<decimal> value);
        partial void OnSTATUIDChanged();
        partial void OnSTREETEXAMINEIDChanging(Nullable<decimal> value);
        partial void OnSTREETEXAMINEIDChanged();
        partial void OnSUBCLASSIDChanging(Nullable<decimal> value);
        partial void OnSUBCLASSIDChanged();
        partial void OnTITLEChanging(string value);
        partial void OnTITLEChanged();
        partial void OnTYPEIDChanging(Nullable<decimal> value);
        partial void OnTYPEIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETPROBLEM"/> 类的新实例。
        /// </summary>
        public STREETPROBLEM()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ACTUALPOINTS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ACTUALPOINTS
        {
            get
            {
                return this._actualpoints;
            }
            set
            {
                if ((this._actualpoints != value))
                {
                    this.OnACTUALPOINTSChanging(value);
                    this.RaiseDataMemberChanging("ACTUALPOINTS");
                    this.ValidateProperty("ACTUALPOINTS", value);
                    this._actualpoints = value;
                    this.RaiseDataMemberChanged("ACTUALPOINTS");
                    this.OnACTUALPOINTSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADDRESS
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnADDRESSChanging(value);
                    this.RaiseDataMemberChanging("ADDRESS");
                    this.ValidateProperty("ADDRESS", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“BIGCLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BIGCLASSID
        {
            get
            {
                return this._bigclassid;
            }
            set
            {
                if ((this._bigclassid != value))
                {
                    this.OnBIGCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("BIGCLASSID");
                    this.ValidateProperty("BIGCLASSID", value);
                    this._bigclassid = value;
                    this.RaiseDataMemberChanged("BIGCLASSID");
                    this.OnBIGCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string CONTENT
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnCONTENTChanging(value);
                    this.RaiseDataMemberChanging("CONTENT");
                    this.ValidateProperty("CONTENT", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EXAMINETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EXAMINETIME
        {
            get
            {
                return this._examinetime;
            }
            set
            {
                if ((this._examinetime != value))
                {
                    this.OnEXAMINETIMEChanging(value);
                    this.RaiseDataMemberChanging("EXAMINETIME");
                    this.ValidateProperty("EXAMINETIME", value);
                    this._examinetime = value;
                    this.RaiseDataMemberChanged("EXAMINETIME");
                    this.OnEXAMINETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FILES”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string FILES
        {
            get
            {
                return this._files;
            }
            set
            {
                if ((this._files != value))
                {
                    this.OnFILESChanging(value);
                    this.RaiseDataMemberChanging("FILES");
                    this.ValidateProperty("FILES", value);
                    this._files = value;
                    this.RaiseDataMemberChanged("FILES");
                    this.OnFILESChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LATANDLONG”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string LATANDLONG
        {
            get
            {
                return this._latandlong;
            }
            set
            {
                if ((this._latandlong != value))
                {
                    this.OnLATANDLONGChanging(value);
                    this.RaiseDataMemberChanging("LATANDLONG");
                    this.ValidateProperty("LATANDLONG", value);
                    this._latandlong = value;
                    this.RaiseDataMemberChanged("LATANDLONG");
                    this.OnLATANDLONGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OPINION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string OPINION
        {
            get
            {
                return this._opinion;
            }
            set
            {
                if ((this._opinion != value))
                {
                    this.OnOPINIONChanging(value);
                    this.RaiseDataMemberChanging("OPINION");
                    this.ValidateProperty("OPINION", value);
                    this._opinion = value;
                    this.RaiseDataMemberChanged("OPINION");
                    this.OnOPINIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POINTSS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> POINTSS
        {
            get
            {
                return this._pointss;
            }
            set
            {
                if ((this._pointss != value))
                {
                    this.OnPOINTSSChanging(value);
                    this.RaiseDataMemberChanging("POINTSS");
                    this.ValidateProperty("POINTSS", value);
                    this._pointss = value;
                    this.RaiseDataMemberChanged("POINTSS");
                    this.OnPOINTSSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REPORTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> REPORTID
        {
            get
            {
                return this._reportid;
            }
            set
            {
                if ((this._reportid != value))
                {
                    this.OnREPORTIDChanging(value);
                    this.RaiseDataMemberChanging("REPORTID");
                    this.ValidateProperty("REPORTID", value);
                    this._reportid = value;
                    this.RaiseDataMemberChanged("REPORTID");
                    this.OnREPORTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SMALLCLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SMALLCLASSID
        {
            get
            {
                return this._smallclassid;
            }
            set
            {
                if ((this._smallclassid != value))
                {
                    this.OnSMALLCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("SMALLCLASSID");
                    this.ValidateProperty("SMALLCLASSID", value);
                    this._smallclassid = value;
                    this.RaiseDataMemberChanged("SMALLCLASSID");
                    this.OnSMALLCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUID
        {
            get
            {
                return this._statuid;
            }
            set
            {
                if ((this._statuid != value))
                {
                    this.OnSTATUIDChanging(value);
                    this.RaiseDataMemberChanging("STATUID");
                    this.ValidateProperty("STATUID", value);
                    this._statuid = value;
                    this.RaiseDataMemberChanged("STATUID");
                    this.OnSTATUIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREETEXAMINE"/> 实体。
        /// </summary>
        [Association("STREETEXAMINE_STREETPROBLEM", "STREETEXAMINEID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREETEXAMINE STREETEXAMINE
        {
            get
            {
                if ((this._streetexamine == null))
                {
                    this._streetexamine = new EntityRef<STREETEXAMINE>(this, "STREETEXAMINE", this.FilterSTREETEXAMINE);
                }
                return this._streetexamine.Entity;
            }
            set
            {
                STREETEXAMINE previous = this.STREETEXAMINE;
                if ((previous != value))
                {
                    this.ValidateProperty("STREETEXAMINE", value);
                    if ((previous != null))
                    {
                        this._streetexamine.Entity = null;
                        previous.STREETPROBLEMS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREETEXAMINEID = value.ID;
                    }
                    else
                    {
                        this.STREETEXAMINEID = default(Nullable<decimal>);
                    }
                    this._streetexamine.Entity = value;
                    if ((value != null))
                    {
                        value.STREETPROBLEMS.Add(this);
                    }
                    this.RaisePropertyChanged("STREETEXAMINE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETEXAMINEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STREETEXAMINEID
        {
            get
            {
                return this._streetexamineid;
            }
            set
            {
                if ((this._streetexamineid != value))
                {
                    this.OnSTREETEXAMINEIDChanging(value);
                    this.RaiseDataMemberChanging("STREETEXAMINEID");
                    this.ValidateProperty("STREETEXAMINEID", value);
                    this._streetexamineid = value;
                    this.RaiseDataMemberChanged("STREETEXAMINEID");
                    this.OnSTREETEXAMINEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SUBCLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SUBCLASSID
        {
            get
            {
                return this._subclassid;
            }
            set
            {
                if ((this._subclassid != value))
                {
                    this.OnSUBCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("SUBCLASSID");
                    this.ValidateProperty("SUBCLASSID", value);
                    this._subclassid = value;
                    this.RaiseDataMemberChanged("SUBCLASSID");
                    this.OnSUBCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TITLE
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTITLEChanging(value);
                    this.RaiseDataMemberChanging("TITLE");
                    this.ValidateProperty("TITLE", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("TITLE");
                    this.OnTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("TYPEID");
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaiseDataMemberChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterSTREETEXAMINE(STREETEXAMINE entity)
        {
            return (entity.ID == this.STREETEXAMINEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “STREETTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETTYPE : Entity
    {
        
        private EntityCollection<STREET> _streets;
        
        private decimal _streettypeid;
        
        private string _streettypename;
        
        private string _streettypepont;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnSTREETTYPEIDChanging(decimal value);
        partial void OnSTREETTYPEIDChanged();
        partial void OnSTREETTYPENAMEChanging(string value);
        partial void OnSTREETTYPENAMEChanged();
        partial void OnSTREETTYPEPONTChanging(string value);
        partial void OnSTREETTYPEPONTChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETTYPE"/> 类的新实例。
        /// </summary>
        public STREETTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREET"/> 实体实例的集合。
        /// </summary>
        [Association("STREETTYPE_STREET", "STREETTYPEID", "STREETTYPEID")]
        [XmlIgnore()]
        public EntityCollection<STREET> STREETS
        {
            get
            {
                if ((this._streets == null))
                {
                    this._streets = new EntityCollection<STREET>(this, "STREETS", this.FilterSTREETS, this.AttachSTREETS, this.DetachSTREETS);
                }
                return this._streets;
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETTYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal STREETTYPEID
        {
            get
            {
                return this._streettypeid;
            }
            set
            {
                if ((this._streettypeid != value))
                {
                    this.OnSTREETTYPEIDChanging(value);
                    this.ValidateProperty("STREETTYPEID", value);
                    this._streettypeid = value;
                    this.RaisePropertyChanged("STREETTYPEID");
                    this.OnSTREETTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETTYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string STREETTYPENAME
        {
            get
            {
                return this._streettypename;
            }
            set
            {
                if ((this._streettypename != value))
                {
                    this.OnSTREETTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("STREETTYPENAME");
                    this.ValidateProperty("STREETTYPENAME", value);
                    this._streettypename = value;
                    this.RaiseDataMemberChanged("STREETTYPENAME");
                    this.OnSTREETTYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETTYPEPONT”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string STREETTYPEPONT
        {
            get
            {
                return this._streettypepont;
            }
            set
            {
                if ((this._streettypepont != value))
                {
                    this.OnSTREETTYPEPONTChanging(value);
                    this.RaiseDataMemberChanging("STREETTYPEPONT");
                    this.ValidateProperty("STREETTYPEPONT", value);
                    this._streettypepont = value;
                    this.RaiseDataMemberChanged("STREETTYPEPONT");
                    this.OnSTREETTYPEPONTChanged();
                }
            }
        }
        
        private void AttachSTREETS(STREET entity)
        {
            entity.STREETTYPE = this;
        }
        
        private void DetachSTREETS(STREET entity)
        {
            entity.STREETTYPE = null;
        }
        
        private bool FilterSTREETS(STREET entity)
        {
            return (entity.STREETTYPEID == this.STREETTYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._streettypeid;
        }
    }
    
    /// <summary>
    /// “STREETUSER”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class STREETUSER : Entity
    {
        
        private decimal _id;
        
        private EntityRef<STREETEXAMINE> _streetexamine;
        
        private Nullable<decimal> _streetexamineid;
        
        private EntityRef<USER> _user;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnSTREETEXAMINEIDChanging(Nullable<decimal> value);
        partial void OnSTREETEXAMINEIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="STREETUSER"/> 类的新实例。
        /// </summary>
        public STREETUSER()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="STREETEXAMINE"/> 实体。
        /// </summary>
        [Association("STREETEXAMINE_STREETUSER", "STREETEXAMINEID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public STREETEXAMINE STREETEXAMINE
        {
            get
            {
                if ((this._streetexamine == null))
                {
                    this._streetexamine = new EntityRef<STREETEXAMINE>(this, "STREETEXAMINE", this.FilterSTREETEXAMINE);
                }
                return this._streetexamine.Entity;
            }
            set
            {
                STREETEXAMINE previous = this.STREETEXAMINE;
                if ((previous != value))
                {
                    this.ValidateProperty("STREETEXAMINE", value);
                    if ((previous != null))
                    {
                        this._streetexamine.Entity = null;
                        previous.STREETUSERS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STREETEXAMINEID = value.ID;
                    }
                    else
                    {
                        this.STREETEXAMINEID = default(Nullable<decimal>);
                    }
                    this._streetexamine.Entity = value;
                    if ((value != null))
                    {
                        value.STREETUSERS.Add(this);
                    }
                    this.RaisePropertyChanged("STREETEXAMINE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STREETEXAMINEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STREETEXAMINEID
        {
            get
            {
                return this._streetexamineid;
            }
            set
            {
                if ((this._streetexamineid != value))
                {
                    this.OnSTREETEXAMINEIDChanging(value);
                    this.RaiseDataMemberChanging("STREETEXAMINEID");
                    this.ValidateProperty("STREETEXAMINEID", value);
                    this._streetexamineid = value;
                    this.RaiseDataMemberChanged("STREETEXAMINEID");
                    this.OnSTREETEXAMINEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_STREETUSER", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.STREETUSERS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.STREETUSERS.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterSTREETEXAMINE(STREETEXAMINE entity)
        {
            return (entity.ID == this.STREETEXAMINEID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TABLE1”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TABLE1 : Entity
    {
        
        private string _id;
        
        private Nullable<DateTime> _time;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnTIMEChanging(Nullable<DateTime> value);
        partial void OnTIMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TABLE1"/> 类的新实例。
        /// </summary>
        public TABLE1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TIME
        {
            get
            {
                return this._time;
            }
            set
            {
                if ((this._time != value))
                {
                    this.OnTIMEChanging(value);
                    this.RaiseDataMemberChanging("TIME");
                    this.ValidateProperty("TIME", value);
                    this._time = value;
                    this.RaiseDataMemberChanged("TIME");
                    this.OnTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TJGHZF”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TJGHZF : Entity
    {
        
        private Nullable<decimal> _ayother;
        
        private Nullable<decimal> _ayxcfx;
        
        private Nullable<decimal> _bj;
        
        private string _checkusser;
        
        private Nullable<DateTime> _createtime;
        
        private string _createuser;
        
        private Nullable<decimal> _fk;
        
        private decimal _id;
        
        private Nullable<decimal> _la;
        
        private Nullable<decimal> _mssw;
        
        private Nullable<decimal> _mswfsr;
        
        private Nullable<decimal> _obqszfzcall;
        
        private Nullable<decimal> _obqszfzczj;
        
        private Nullable<decimal> _oddfy;
        
        private Nullable<decimal> _osqfyzxsq;
        
        private Nullable<decimal> _osqfyzxzj;
        
        private Nullable<decimal> _oxzfyss;
        
        private Nullable<decimal> _oys;
        
        private Nullable<decimal> _ozltzjs;
        
        private Nullable<decimal> _ozztz;
        
        private Nullable<DateTime> _tjtime;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _wfmj;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAYOTHERChanging(Nullable<decimal> value);
        partial void OnAYOTHERChanged();
        partial void OnAYXCFXChanging(Nullable<decimal> value);
        partial void OnAYXCFXChanged();
        partial void OnBJChanging(Nullable<decimal> value);
        partial void OnBJChanged();
        partial void OnCHECKUSSERChanging(string value);
        partial void OnCHECKUSSERChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERChanging(string value);
        partial void OnCREATEUSERChanged();
        partial void OnFKChanging(Nullable<decimal> value);
        partial void OnFKChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnLAChanging(Nullable<decimal> value);
        partial void OnLAChanged();
        partial void OnMSSWChanging(Nullable<decimal> value);
        partial void OnMSSWChanged();
        partial void OnMSWFSRChanging(Nullable<decimal> value);
        partial void OnMSWFSRChanged();
        partial void OnOBQSZFZCALLChanging(Nullable<decimal> value);
        partial void OnOBQSZFZCALLChanged();
        partial void OnOBQSZFZCZJChanging(Nullable<decimal> value);
        partial void OnOBQSZFZCZJChanged();
        partial void OnODDFYChanging(Nullable<decimal> value);
        partial void OnODDFYChanged();
        partial void OnOSQFYZXSQChanging(Nullable<decimal> value);
        partial void OnOSQFYZXSQChanged();
        partial void OnOSQFYZXZJChanging(Nullable<decimal> value);
        partial void OnOSQFYZXZJChanged();
        partial void OnOXZFYSSChanging(Nullable<decimal> value);
        partial void OnOXZFYSSChanged();
        partial void OnOYSChanging(Nullable<decimal> value);
        partial void OnOYSChanged();
        partial void OnOZLTZJSChanging(Nullable<decimal> value);
        partial void OnOZLTZJSChanged();
        partial void OnOZZTZChanging(Nullable<decimal> value);
        partial void OnOZZTZChanged();
        partial void OnTJTIMEChanging(Nullable<DateTime> value);
        partial void OnTJTIMEChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnWFMJChanging(Nullable<decimal> value);
        partial void OnWFMJChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TJGHZF"/> 类的新实例。
        /// </summary>
        public TJGHZF()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AYOTHER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> AYOTHER
        {
            get
            {
                return this._ayother;
            }
            set
            {
                if ((this._ayother != value))
                {
                    this.OnAYOTHERChanging(value);
                    this.RaiseDataMemberChanging("AYOTHER");
                    this.ValidateProperty("AYOTHER", value);
                    this._ayother = value;
                    this.RaiseDataMemberChanged("AYOTHER");
                    this.OnAYOTHERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AYXCFX”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> AYXCFX
        {
            get
            {
                return this._ayxcfx;
            }
            set
            {
                if ((this._ayxcfx != value))
                {
                    this.OnAYXCFXChanging(value);
                    this.RaiseDataMemberChanging("AYXCFX");
                    this.ValidateProperty("AYXCFX", value);
                    this._ayxcfx = value;
                    this.RaiseDataMemberChanged("AYXCFX");
                    this.OnAYXCFXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“BJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BJ
        {
            get
            {
                return this._bj;
            }
            set
            {
                if ((this._bj != value))
                {
                    this.OnBJChanging(value);
                    this.RaiseDataMemberChanging("BJ");
                    this.ValidateProperty("BJ", value);
                    this._bj = value;
                    this.RaiseDataMemberChanged("BJ");
                    this.OnBJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CHECKUSSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CHECKUSSER
        {
            get
            {
                return this._checkusser;
            }
            set
            {
                if ((this._checkusser != value))
                {
                    this.OnCHECKUSSERChanging(value);
                    this.RaiseDataMemberChanging("CHECKUSSER");
                    this.ValidateProperty("CHECKUSSER", value);
                    this._checkusser = value;
                    this.RaiseDataMemberChanged("CHECKUSSER");
                    this.OnCHECKUSSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CREATEUSER
        {
            get
            {
                return this._createuser;
            }
            set
            {
                if ((this._createuser != value))
                {
                    this.OnCREATEUSERChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSER");
                    this.ValidateProperty("CREATEUSER", value);
                    this._createuser = value;
                    this.RaiseDataMemberChanged("CREATEUSER");
                    this.OnCREATEUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FK”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FK
        {
            get
            {
                return this._fk;
            }
            set
            {
                if ((this._fk != value))
                {
                    this.OnFKChanging(value);
                    this.RaiseDataMemberChanging("FK");
                    this.ValidateProperty("FK", value);
                    this._fk = value;
                    this.RaiseDataMemberChanged("FK");
                    this.OnFKChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LA”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LA
        {
            get
            {
                return this._la;
            }
            set
            {
                if ((this._la != value))
                {
                    this.OnLAChanging(value);
                    this.RaiseDataMemberChanging("LA");
                    this.ValidateProperty("LA", value);
                    this._la = value;
                    this.RaiseDataMemberChanged("LA");
                    this.OnLAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MSSW”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> MSSW
        {
            get
            {
                return this._mssw;
            }
            set
            {
                if ((this._mssw != value))
                {
                    this.OnMSSWChanging(value);
                    this.RaiseDataMemberChanging("MSSW");
                    this.ValidateProperty("MSSW", value);
                    this._mssw = value;
                    this.RaiseDataMemberChanged("MSSW");
                    this.OnMSSWChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MSWFSR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> MSWFSR
        {
            get
            {
                return this._mswfsr;
            }
            set
            {
                if ((this._mswfsr != value))
                {
                    this.OnMSWFSRChanging(value);
                    this.RaiseDataMemberChanging("MSWFSR");
                    this.ValidateProperty("MSWFSR", value);
                    this._mswfsr = value;
                    this.RaiseDataMemberChanged("MSWFSR");
                    this.OnMSWFSRChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OBQSZFZCALL”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OBQSZFZCALL
        {
            get
            {
                return this._obqszfzcall;
            }
            set
            {
                if ((this._obqszfzcall != value))
                {
                    this.OnOBQSZFZCALLChanging(value);
                    this.RaiseDataMemberChanging("OBQSZFZCALL");
                    this.ValidateProperty("OBQSZFZCALL", value);
                    this._obqszfzcall = value;
                    this.RaiseDataMemberChanged("OBQSZFZCALL");
                    this.OnOBQSZFZCALLChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OBQSZFZCZJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OBQSZFZCZJ
        {
            get
            {
                return this._obqszfzczj;
            }
            set
            {
                if ((this._obqszfzczj != value))
                {
                    this.OnOBQSZFZCZJChanging(value);
                    this.RaiseDataMemberChanging("OBQSZFZCZJ");
                    this.ValidateProperty("OBQSZFZCZJ", value);
                    this._obqszfzczj = value;
                    this.RaiseDataMemberChanged("OBQSZFZCZJ");
                    this.OnOBQSZFZCZJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ODDFY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ODDFY
        {
            get
            {
                return this._oddfy;
            }
            set
            {
                if ((this._oddfy != value))
                {
                    this.OnODDFYChanging(value);
                    this.RaiseDataMemberChanging("ODDFY");
                    this.ValidateProperty("ODDFY", value);
                    this._oddfy = value;
                    this.RaiseDataMemberChanged("ODDFY");
                    this.OnODDFYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OSQFYZXSQ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OSQFYZXSQ
        {
            get
            {
                return this._osqfyzxsq;
            }
            set
            {
                if ((this._osqfyzxsq != value))
                {
                    this.OnOSQFYZXSQChanging(value);
                    this.RaiseDataMemberChanging("OSQFYZXSQ");
                    this.ValidateProperty("OSQFYZXSQ", value);
                    this._osqfyzxsq = value;
                    this.RaiseDataMemberChanged("OSQFYZXSQ");
                    this.OnOSQFYZXSQChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OSQFYZXZJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OSQFYZXZJ
        {
            get
            {
                return this._osqfyzxzj;
            }
            set
            {
                if ((this._osqfyzxzj != value))
                {
                    this.OnOSQFYZXZJChanging(value);
                    this.RaiseDataMemberChanging("OSQFYZXZJ");
                    this.ValidateProperty("OSQFYZXZJ", value);
                    this._osqfyzxzj = value;
                    this.RaiseDataMemberChanged("OSQFYZXZJ");
                    this.OnOSQFYZXZJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OXZFYSS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OXZFYSS
        {
            get
            {
                return this._oxzfyss;
            }
            set
            {
                if ((this._oxzfyss != value))
                {
                    this.OnOXZFYSSChanging(value);
                    this.RaiseDataMemberChanging("OXZFYSS");
                    this.ValidateProperty("OXZFYSS", value);
                    this._oxzfyss = value;
                    this.RaiseDataMemberChanged("OXZFYSS");
                    this.OnOXZFYSSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OYS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OYS
        {
            get
            {
                return this._oys;
            }
            set
            {
                if ((this._oys != value))
                {
                    this.OnOYSChanging(value);
                    this.RaiseDataMemberChanging("OYS");
                    this.ValidateProperty("OYS", value);
                    this._oys = value;
                    this.RaiseDataMemberChanged("OYS");
                    this.OnOYSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OZLTZJS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OZLTZJS
        {
            get
            {
                return this._ozltzjs;
            }
            set
            {
                if ((this._ozltzjs != value))
                {
                    this.OnOZLTZJSChanging(value);
                    this.RaiseDataMemberChanging("OZLTZJS");
                    this.ValidateProperty("OZLTZJS", value);
                    this._ozltzjs = value;
                    this.RaiseDataMemberChanged("OZLTZJS");
                    this.OnOZLTZJSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OZZTZ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OZZTZ
        {
            get
            {
                return this._ozztz;
            }
            set
            {
                if ((this._ozztz != value))
                {
                    this.OnOZZTZChanging(value);
                    this.RaiseDataMemberChanging("OZZTZ");
                    this.ValidateProperty("OZZTZ", value);
                    this._ozztz = value;
                    this.RaiseDataMemberChanged("OZZTZ");
                    this.OnOZZTZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TJTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TJTIME
        {
            get
            {
                return this._tjtime;
            }
            set
            {
                if ((this._tjtime != value))
                {
                    this.OnTJTIMEChanging(value);
                    this.RaiseDataMemberChanging("TJTIME");
                    this.ValidateProperty("TJTIME", value);
                    this._tjtime = value;
                    this.RaiseDataMemberChanged("TJTIME");
                    this.OnTJTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WFMJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> WFMJ
        {
            get
            {
                return this._wfmj;
            }
            set
            {
                if ((this._wfmj != value))
                {
                    this.OnWFMJChanging(value);
                    this.RaiseDataMemberChanging("WFMJ");
                    this.ValidateProperty("WFMJ", value);
                    this._wfmj = value;
                    this.RaiseDataMemberChanged("WFMJ");
                    this.OnWFMJChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TRANSLICENS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSLICENS : Entity
    {
        
        private EntityRef<CONSTRSITE> _constrsite;
        
        private Nullable<decimal> _constrsiteid;
        
        private EntityRef<DUMPINGSITE> _dumpingsite;
        
        private Nullable<decimal> _dumpingsiteid;
        
        private Nullable<DateTime> _enddate;
        
        private Nullable<decimal> _issync;
        
        private Nullable<decimal> _nijiang;
        
        private Nullable<DateTime> _startdate;
        
        private EntityCollection<TRANSLICENSECARCOMPANy> _translicensecarcompanies;
        
        private EntityCollection<TRANSLICENSECAR> _translicensecars;
        
        private decimal _translicenseid;
        
        private EntityCollection<TRANSLICENSEROAD> _translicenseroads;
        
        private string _transline;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _zhatu;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCONSTRSITEIDChanging(Nullable<decimal> value);
        partial void OnCONSTRSITEIDChanged();
        partial void OnDUMPINGSITEIDChanging(Nullable<decimal> value);
        partial void OnDUMPINGSITEIDChanged();
        partial void OnENDDATEChanging(Nullable<DateTime> value);
        partial void OnENDDATEChanged();
        partial void OnISSYNCChanging(Nullable<decimal> value);
        partial void OnISSYNCChanged();
        partial void OnNIJIANGChanging(Nullable<decimal> value);
        partial void OnNIJIANGChanged();
        partial void OnSTARTDATEChanging(Nullable<DateTime> value);
        partial void OnSTARTDATEChanged();
        partial void OnTRANSLICENSEIDChanging(decimal value);
        partial void OnTRANSLICENSEIDChanged();
        partial void OnTRANSLINEChanging(string value);
        partial void OnTRANSLINEChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnZHATUChanging(Nullable<decimal> value);
        partial void OnZHATUChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSLICENS"/> 类的新实例。
        /// </summary>
        public TRANSLICENS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="CONSTRSITE"/> 实体。
        /// </summary>
        [Association("CONSTRSITE_TRANSLICENS", "CONSTRSITEID", "CONSTRSITEID", IsForeignKey=true)]
        [XmlIgnore()]
        public CONSTRSITE CONSTRSITE
        {
            get
            {
                if ((this._constrsite == null))
                {
                    this._constrsite = new EntityRef<CONSTRSITE>(this, "CONSTRSITE", this.FilterCONSTRSITE);
                }
                return this._constrsite.Entity;
            }
            set
            {
                CONSTRSITE previous = this.CONSTRSITE;
                if ((previous != value))
                {
                    this.ValidateProperty("CONSTRSITE", value);
                    if ((previous != null))
                    {
                        this._constrsite.Entity = null;
                        previous.TRANSLICENSES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CONSTRSITEID = value.CONSTRSITEID;
                    }
                    else
                    {
                        this.CONSTRSITEID = default(Nullable<decimal>);
                    }
                    this._constrsite.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSES.Add(this);
                    }
                    this.RaisePropertyChanged("CONSTRSITE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRSITEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CONSTRSITEID
        {
            get
            {
                return this._constrsiteid;
            }
            set
            {
                if ((this._constrsiteid != value))
                {
                    this.OnCONSTRSITEIDChanging(value);
                    this.RaiseDataMemberChanging("CONSTRSITEID");
                    this.ValidateProperty("CONSTRSITEID", value);
                    this._constrsiteid = value;
                    this.RaiseDataMemberChanged("CONSTRSITEID");
                    this.OnCONSTRSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="DUMPINGSITE"/> 实体。
        /// </summary>
        [Association("DUMPINGSITE_TRANSLICENS", "DUMPINGSITEID", "DUMPINGSITEID", IsForeignKey=true)]
        [XmlIgnore()]
        public DUMPINGSITE DUMPINGSITE
        {
            get
            {
                if ((this._dumpingsite == null))
                {
                    this._dumpingsite = new EntityRef<DUMPINGSITE>(this, "DUMPINGSITE", this.FilterDUMPINGSITE);
                }
                return this._dumpingsite.Entity;
            }
            set
            {
                DUMPINGSITE previous = this.DUMPINGSITE;
                if ((previous != value))
                {
                    this.ValidateProperty("DUMPINGSITE", value);
                    if ((previous != null))
                    {
                        this._dumpingsite.Entity = null;
                        previous.TRANSLICENSES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DUMPINGSITEID = value.DUMPINGSITEID;
                    }
                    else
                    {
                        this.DUMPINGSITEID = default(Nullable<decimal>);
                    }
                    this._dumpingsite.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSES.Add(this);
                    }
                    this.RaisePropertyChanged("DUMPINGSITE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DUMPINGSITEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> DUMPINGSITEID
        {
            get
            {
                return this._dumpingsiteid;
            }
            set
            {
                if ((this._dumpingsiteid != value))
                {
                    this.OnDUMPINGSITEIDChanging(value);
                    this.RaiseDataMemberChanging("DUMPINGSITEID");
                    this.ValidateProperty("DUMPINGSITEID", value);
                    this._dumpingsiteid = value;
                    this.RaiseDataMemberChanged("DUMPINGSITEID");
                    this.OnDUMPINGSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ENDDATE
        {
            get
            {
                return this._enddate;
            }
            set
            {
                if ((this._enddate != value))
                {
                    this.OnENDDATEChanging(value);
                    this.RaiseDataMemberChanging("ENDDATE");
                    this.ValidateProperty("ENDDATE", value);
                    this._enddate = value;
                    this.RaiseDataMemberChanged("ENDDATE");
                    this.OnENDDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISSYNC”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISSYNC
        {
            get
            {
                return this._issync;
            }
            set
            {
                if ((this._issync != value))
                {
                    this.OnISSYNCChanging(value);
                    this.RaiseDataMemberChanging("ISSYNC");
                    this.ValidateProperty("ISSYNC", value);
                    this._issync = value;
                    this.RaiseDataMemberChanged("ISSYNC");
                    this.OnISSYNCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NIJIANG”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NIJIANG
        {
            get
            {
                return this._nijiang;
            }
            set
            {
                if ((this._nijiang != value))
                {
                    this.OnNIJIANGChanging(value);
                    this.RaiseDataMemberChanging("NIJIANG");
                    this.ValidateProperty("NIJIANG", value);
                    this._nijiang = value;
                    this.RaiseDataMemberChanged("NIJIANG");
                    this.OnNIJIANGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> STARTDATE
        {
            get
            {
                return this._startdate;
            }
            set
            {
                if ((this._startdate != value))
                {
                    this.OnSTARTDATEChanging(value);
                    this.RaiseDataMemberChanging("STARTDATE");
                    this.ValidateProperty("STARTDATE", value);
                    this._startdate = value;
                    this.RaiseDataMemberChanged("STARTDATE");
                    this.OnSTARTDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENSECARCOMPANy"/> 实体实例的集合。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSECARCOMPANy", "TRANSLICENSEID", "TRANSLICENSEID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENSECARCOMPANy> TRANSLICENSECARCOMPANIES
        {
            get
            {
                if ((this._translicensecarcompanies == null))
                {
                    this._translicensecarcompanies = new EntityCollection<TRANSLICENSECARCOMPANy>(this, "TRANSLICENSECARCOMPANIES", this.FilterTRANSLICENSECARCOMPANIES, this.AttachTRANSLICENSECARCOMPANIES, this.DetachTRANSLICENSECARCOMPANIES);
                }
                return this._translicensecarcompanies;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENSECAR"/> 实体实例的集合。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSECAR", "TRANSLICENSEID", "TRANSLICENSEID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENSECAR> TRANSLICENSECARS
        {
            get
            {
                if ((this._translicensecars == null))
                {
                    this._translicensecars = new EntityCollection<TRANSLICENSECAR>(this, "TRANSLICENSECARS", this.FilterTRANSLICENSECARS, this.AttachTRANSLICENSECARS, this.DetachTRANSLICENSECARS);
                }
                return this._translicensecars;
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSLICENSEID
        {
            get
            {
                return this._translicenseid;
            }
            set
            {
                if ((this._translicenseid != value))
                {
                    this.OnTRANSLICENSEIDChanging(value);
                    this.ValidateProperty("TRANSLICENSEID", value);
                    this._translicenseid = value;
                    this.RaisePropertyChanged("TRANSLICENSEID");
                    this.OnTRANSLICENSEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENSEROAD"/> 实体实例的集合。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSEROAD", "TRANSLICENSEID", "TRANSLICENSEID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENSEROAD> TRANSLICENSEROADS
        {
            get
            {
                if ((this._translicenseroads == null))
                {
                    this._translicenseroads = new EntityCollection<TRANSLICENSEROAD>(this, "TRANSLICENSEROADS", this.FilterTRANSLICENSEROADS, this.AttachTRANSLICENSEROADS, this.DetachTRANSLICENSEROADS);
                }
                return this._translicenseroads;
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLINE”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string TRANSLINE
        {
            get
            {
                return this._transline;
            }
            set
            {
                if ((this._transline != value))
                {
                    this.OnTRANSLINEChanging(value);
                    this.RaiseDataMemberChanging("TRANSLINE");
                    this.ValidateProperty("TRANSLINE", value);
                    this._transline = value;
                    this.RaiseDataMemberChanged("TRANSLINE");
                    this.OnTRANSLINEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_TRANSLICENS", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.TRANSLICENSES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSES.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZHATU”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ZHATU
        {
            get
            {
                return this._zhatu;
            }
            set
            {
                if ((this._zhatu != value))
                {
                    this.OnZHATUChanging(value);
                    this.RaiseDataMemberChanging("ZHATU");
                    this.ValidateProperty("ZHATU", value);
                    this._zhatu = value;
                    this.RaiseDataMemberChanged("ZHATU");
                    this.OnZHATUChanged();
                }
            }
        }
        
        private bool FilterCONSTRSITE(CONSTRSITE entity)
        {
            return (entity.CONSTRSITEID == this.CONSTRSITEID);
        }
        
        private bool FilterDUMPINGSITE(DUMPINGSITE entity)
        {
            return (entity.DUMPINGSITEID == this.DUMPINGSITEID);
        }
        
        private void AttachTRANSLICENSECARCOMPANIES(TRANSLICENSECARCOMPANy entity)
        {
            entity.TRANSLICENS = this;
        }
        
        private void DetachTRANSLICENSECARCOMPANIES(TRANSLICENSECARCOMPANy entity)
        {
            entity.TRANSLICENS = null;
        }
        
        private bool FilterTRANSLICENSECARCOMPANIES(TRANSLICENSECARCOMPANy entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        private void AttachTRANSLICENSECARS(TRANSLICENSECAR entity)
        {
            entity.TRANSLICENS = this;
        }
        
        private void DetachTRANSLICENSECARS(TRANSLICENSECAR entity)
        {
            entity.TRANSLICENS = null;
        }
        
        private bool FilterTRANSLICENSECARS(TRANSLICENSECAR entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        private void AttachTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            entity.TRANSLICENS = this;
        }
        
        private void DetachTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            entity.TRANSLICENS = null;
        }
        
        private bool FilterTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._translicenseid;
        }
    }
    
    /// <summary>
    /// “TRANSLICENSECAR”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSLICENSECAR : Entity
    {
        
        private decimal _carid;
        
        private string _redundancy;
        
        private EntityRef<TRANSLICENS> _translicens;
        
        private decimal _translicenseid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARIDChanging(decimal value);
        partial void OnCARIDChanged();
        partial void OnREDUNDANCYChanging(string value);
        partial void OnREDUNDANCYChanged();
        partial void OnTRANSLICENSEIDChanging(decimal value);
        partial void OnTRANSLICENSEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSLICENSECAR"/> 类的新实例。
        /// </summary>
        public TRANSLICENSECAR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.RaiseDataMemberChanging("CARID");
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaiseDataMemberChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REDUNDANCY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string REDUNDANCY
        {
            get
            {
                return this._redundancy;
            }
            set
            {
                if ((this._redundancy != value))
                {
                    this.OnREDUNDANCYChanging(value);
                    this.RaiseDataMemberChanging("REDUNDANCY");
                    this.ValidateProperty("REDUNDANCY", value);
                    this._redundancy = value;
                    this.RaiseDataMemberChanged("REDUNDANCY");
                    this.OnREDUNDANCYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TRANSLICENS"/> 实体。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSECAR", "TRANSLICENSEID", "TRANSLICENSEID", IsForeignKey=true)]
        [XmlIgnore()]
        public TRANSLICENS TRANSLICENS
        {
            get
            {
                if ((this._translicens == null))
                {
                    this._translicens = new EntityRef<TRANSLICENS>(this, "TRANSLICENS", this.FilterTRANSLICENS);
                }
                return this._translicens.Entity;
            }
            set
            {
                TRANSLICENS previous = this.TRANSLICENS;
                if ((previous != value))
                {
                    this.ValidateProperty("TRANSLICENS", value);
                    if ((previous != null))
                    {
                        this._translicens.Entity = null;
                        previous.TRANSLICENSECARS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TRANSLICENSEID = value.TRANSLICENSEID;
                    }
                    else
                    {
                        this.TRANSLICENSEID = default(decimal);
                    }
                    this._translicens.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSECARS.Add(this);
                    }
                    this.RaisePropertyChanged("TRANSLICENS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSEID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSLICENSEID
        {
            get
            {
                return this._translicenseid;
            }
            set
            {
                if ((this._translicenseid != value))
                {
                    this.OnTRANSLICENSEIDChanging(value);
                    this.RaiseDataMemberChanging("TRANSLICENSEID");
                    this.ValidateProperty("TRANSLICENSEID", value);
                    this._translicenseid = value;
                    this.RaiseDataMemberChanged("TRANSLICENSEID");
                    this.OnTRANSLICENSEIDChanged();
                }
            }
        }
        
        private bool FilterTRANSLICENS(TRANSLICENS entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._carid, this._translicenseid);
        }
    }
    
    /// <summary>
    /// “TRANSLICENSECARCOMPANy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSLICENSECARCOMPANy : Entity
    {
        
        private decimal _carcompanyid;
        
        private string _redundancy;
        
        private EntityRef<TRANSLICENS> _translicens;
        
        private decimal _translicenseid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARCOMPANYIDChanging(decimal value);
        partial void OnCARCOMPANYIDChanged();
        partial void OnREDUNDANCYChanging(string value);
        partial void OnREDUNDANCYChanged();
        partial void OnTRANSLICENSEIDChanging(decimal value);
        partial void OnTRANSLICENSEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSLICENSECARCOMPANy"/> 类的新实例。
        /// </summary>
        public TRANSLICENSECARCOMPANy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARCOMPANYID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARCOMPANYID
        {
            get
            {
                return this._carcompanyid;
            }
            set
            {
                if ((this._carcompanyid != value))
                {
                    this.OnCARCOMPANYIDChanging(value);
                    this.RaiseDataMemberChanging("CARCOMPANYID");
                    this.ValidateProperty("CARCOMPANYID", value);
                    this._carcompanyid = value;
                    this.RaiseDataMemberChanged("CARCOMPANYID");
                    this.OnCARCOMPANYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REDUNDANCY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string REDUNDANCY
        {
            get
            {
                return this._redundancy;
            }
            set
            {
                if ((this._redundancy != value))
                {
                    this.OnREDUNDANCYChanging(value);
                    this.RaiseDataMemberChanging("REDUNDANCY");
                    this.ValidateProperty("REDUNDANCY", value);
                    this._redundancy = value;
                    this.RaiseDataMemberChanged("REDUNDANCY");
                    this.OnREDUNDANCYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TRANSLICENS"/> 实体。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSECARCOMPANy", "TRANSLICENSEID", "TRANSLICENSEID", IsForeignKey=true)]
        [XmlIgnore()]
        public TRANSLICENS TRANSLICENS
        {
            get
            {
                if ((this._translicens == null))
                {
                    this._translicens = new EntityRef<TRANSLICENS>(this, "TRANSLICENS", this.FilterTRANSLICENS);
                }
                return this._translicens.Entity;
            }
            set
            {
                TRANSLICENS previous = this.TRANSLICENS;
                if ((previous != value))
                {
                    this.ValidateProperty("TRANSLICENS", value);
                    if ((previous != null))
                    {
                        this._translicens.Entity = null;
                        previous.TRANSLICENSECARCOMPANIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TRANSLICENSEID = value.TRANSLICENSEID;
                    }
                    else
                    {
                        this.TRANSLICENSEID = default(decimal);
                    }
                    this._translicens.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSECARCOMPANIES.Add(this);
                    }
                    this.RaisePropertyChanged("TRANSLICENS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSEID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSLICENSEID
        {
            get
            {
                return this._translicenseid;
            }
            set
            {
                if ((this._translicenseid != value))
                {
                    this.OnTRANSLICENSEIDChanging(value);
                    this.RaiseDataMemberChanging("TRANSLICENSEID");
                    this.ValidateProperty("TRANSLICENSEID", value);
                    this._translicenseid = value;
                    this.RaiseDataMemberChanged("TRANSLICENSEID");
                    this.OnTRANSLICENSEIDChanged();
                }
            }
        }
        
        private bool FilterTRANSLICENS(TRANSLICENS entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._carcompanyid, this._translicenseid);
        }
    }
    
    /// <summary>
    /// “TRANSLICENSEROAD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSLICENSEROAD : Entity
    {
        
        private EntityRef<TRANSLICENS> _translicens;
        
        private Nullable<decimal> _translicenseid;
        
        private decimal _translicenseroadid;
        
        private EntityRef<TRANSROAD> _transroad;
        
        private Nullable<decimal> _transroadid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnTRANSLICENSEIDChanging(Nullable<decimal> value);
        partial void OnTRANSLICENSEIDChanged();
        partial void OnTRANSLICENSEROADIDChanging(decimal value);
        partial void OnTRANSLICENSEROADIDChanged();
        partial void OnTRANSROADIDChanging(Nullable<decimal> value);
        partial void OnTRANSROADIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSLICENSEROAD"/> 类的新实例。
        /// </summary>
        public TRANSLICENSEROAD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TRANSLICENS"/> 实体。
        /// </summary>
        [Association("TRANSLICENS_TRANSLICENSEROAD", "TRANSLICENSEID", "TRANSLICENSEID", IsForeignKey=true)]
        [XmlIgnore()]
        public TRANSLICENS TRANSLICENS
        {
            get
            {
                if ((this._translicens == null))
                {
                    this._translicens = new EntityRef<TRANSLICENS>(this, "TRANSLICENS", this.FilterTRANSLICENS);
                }
                return this._translicens.Entity;
            }
            set
            {
                TRANSLICENS previous = this.TRANSLICENS;
                if ((previous != value))
                {
                    this.ValidateProperty("TRANSLICENS", value);
                    if ((previous != null))
                    {
                        this._translicens.Entity = null;
                        previous.TRANSLICENSEROADS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TRANSLICENSEID = value.TRANSLICENSEID;
                    }
                    else
                    {
                        this.TRANSLICENSEID = default(Nullable<decimal>);
                    }
                    this._translicens.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSEROADS.Add(this);
                    }
                    this.RaisePropertyChanged("TRANSLICENS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> TRANSLICENSEID
        {
            get
            {
                return this._translicenseid;
            }
            set
            {
                if ((this._translicenseid != value))
                {
                    this.OnTRANSLICENSEIDChanging(value);
                    this.RaiseDataMemberChanging("TRANSLICENSEID");
                    this.ValidateProperty("TRANSLICENSEID", value);
                    this._translicenseid = value;
                    this.RaiseDataMemberChanged("TRANSLICENSEID");
                    this.OnTRANSLICENSEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSEROADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSLICENSEROADID
        {
            get
            {
                return this._translicenseroadid;
            }
            set
            {
                if ((this._translicenseroadid != value))
                {
                    this.OnTRANSLICENSEROADIDChanging(value);
                    this.ValidateProperty("TRANSLICENSEROADID", value);
                    this._translicenseroadid = value;
                    this.RaisePropertyChanged("TRANSLICENSEROADID");
                    this.OnTRANSLICENSEROADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TRANSROAD"/> 实体。
        /// </summary>
        [Association("TRANSROAD_TRANSLICENSEROAD", "TRANSROADID", "TRANSROADID", IsForeignKey=true)]
        [XmlIgnore()]
        public TRANSROAD TRANSROAD
        {
            get
            {
                if ((this._transroad == null))
                {
                    this._transroad = new EntityRef<TRANSROAD>(this, "TRANSROAD", this.FilterTRANSROAD);
                }
                return this._transroad.Entity;
            }
            set
            {
                TRANSROAD previous = this.TRANSROAD;
                if ((previous != value))
                {
                    this.ValidateProperty("TRANSROAD", value);
                    if ((previous != null))
                    {
                        this._transroad.Entity = null;
                        previous.TRANSLICENSEROADS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TRANSROADID = value.TRANSROADID;
                    }
                    else
                    {
                        this.TRANSROADID = default(Nullable<decimal>);
                    }
                    this._transroad.Entity = value;
                    if ((value != null))
                    {
                        value.TRANSLICENSEROADS.Add(this);
                    }
                    this.RaisePropertyChanged("TRANSROAD");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSROADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> TRANSROADID
        {
            get
            {
                return this._transroadid;
            }
            set
            {
                if ((this._transroadid != value))
                {
                    this.OnTRANSROADIDChanging(value);
                    this.RaiseDataMemberChanging("TRANSROADID");
                    this.ValidateProperty("TRANSROADID", value);
                    this._transroadid = value;
                    this.RaiseDataMemberChanged("TRANSROADID");
                    this.OnTRANSROADIDChanged();
                }
            }
        }
        
        private bool FilterTRANSLICENS(TRANSLICENS entity)
        {
            return (entity.TRANSLICENSEID == this.TRANSLICENSEID);
        }
        
        private bool FilterTRANSROAD(TRANSROAD entity)
        {
            return (entity.TRANSROADID == this.TRANSROADID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._translicenseroadid;
        }
    }
    
    /// <summary>
    /// “TRANSRECORD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSRECORD : Entity
    {
        
        private Nullable<decimal> _carid;
        
        private Nullable<decimal> _constrsiteid;
        
        private Nullable<DateTime> _constrsitetime;
        
        private Nullable<decimal> _dumpingsiteid;
        
        private Nullable<DateTime> _dumpingsitetime;
        
        private Nullable<decimal> _translicensid;
        
        private decimal _transrecordid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARIDChanging(Nullable<decimal> value);
        partial void OnCARIDChanged();
        partial void OnCONSTRSITEIDChanging(Nullable<decimal> value);
        partial void OnCONSTRSITEIDChanged();
        partial void OnCONSTRSITETIMEChanging(Nullable<DateTime> value);
        partial void OnCONSTRSITETIMEChanged();
        partial void OnDUMPINGSITEIDChanging(Nullable<decimal> value);
        partial void OnDUMPINGSITEIDChanged();
        partial void OnDUMPINGSITETIMEChanging(Nullable<DateTime> value);
        partial void OnDUMPINGSITETIMEChanged();
        partial void OnTRANSLICENSIDChanging(Nullable<decimal> value);
        partial void OnTRANSLICENSIDChanged();
        partial void OnTRANSRECORDIDChanging(decimal value);
        partial void OnTRANSRECORDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSRECORD"/> 类的新实例。
        /// </summary>
        public TRANSRECORD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.RaiseDataMemberChanging("CARID");
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaiseDataMemberChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRSITEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CONSTRSITEID
        {
            get
            {
                return this._constrsiteid;
            }
            set
            {
                if ((this._constrsiteid != value))
                {
                    this.OnCONSTRSITEIDChanging(value);
                    this.RaiseDataMemberChanging("CONSTRSITEID");
                    this.ValidateProperty("CONSTRSITEID", value);
                    this._constrsiteid = value;
                    this.RaiseDataMemberChanged("CONSTRSITEID");
                    this.OnCONSTRSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CONSTRSITETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CONSTRSITETIME
        {
            get
            {
                return this._constrsitetime;
            }
            set
            {
                if ((this._constrsitetime != value))
                {
                    this.OnCONSTRSITETIMEChanging(value);
                    this.RaiseDataMemberChanging("CONSTRSITETIME");
                    this.ValidateProperty("CONSTRSITETIME", value);
                    this._constrsitetime = value;
                    this.RaiseDataMemberChanged("CONSTRSITETIME");
                    this.OnCONSTRSITETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DUMPINGSITEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DUMPINGSITEID
        {
            get
            {
                return this._dumpingsiteid;
            }
            set
            {
                if ((this._dumpingsiteid != value))
                {
                    this.OnDUMPINGSITEIDChanging(value);
                    this.RaiseDataMemberChanging("DUMPINGSITEID");
                    this.ValidateProperty("DUMPINGSITEID", value);
                    this._dumpingsiteid = value;
                    this.RaiseDataMemberChanged("DUMPINGSITEID");
                    this.OnDUMPINGSITEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DUMPINGSITETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DUMPINGSITETIME
        {
            get
            {
                return this._dumpingsitetime;
            }
            set
            {
                if ((this._dumpingsitetime != value))
                {
                    this.OnDUMPINGSITETIMEChanging(value);
                    this.RaiseDataMemberChanging("DUMPINGSITETIME");
                    this.ValidateProperty("DUMPINGSITETIME", value);
                    this._dumpingsitetime = value;
                    this.RaiseDataMemberChanged("DUMPINGSITETIME");
                    this.OnDUMPINGSITETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSLICENSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TRANSLICENSID
        {
            get
            {
                return this._translicensid;
            }
            set
            {
                if ((this._translicensid != value))
                {
                    this.OnTRANSLICENSIDChanging(value);
                    this.RaiseDataMemberChanging("TRANSLICENSID");
                    this.ValidateProperty("TRANSLICENSID", value);
                    this._translicensid = value;
                    this.RaiseDataMemberChanged("TRANSLICENSID");
                    this.OnTRANSLICENSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSRECORDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSRECORDID
        {
            get
            {
                return this._transrecordid;
            }
            set
            {
                if ((this._transrecordid != value))
                {
                    this.OnTRANSRECORDIDChanging(value);
                    this.ValidateProperty("TRANSRECORDID", value);
                    this._transrecordid = value;
                    this.RaisePropertyChanged("TRANSRECORDID");
                    this.OnTRANSRECORDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._transrecordid;
        }
    }
    
    /// <summary>
    /// “TRANSROAD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class TRANSROAD : Entity
    {
        
        private string _endtime;
        
        private string _geometry;
        
        private Nullable<decimal> _speed;
        
        private string _starttime;
        
        private EntityCollection<TRANSLICENSEROAD> _translicenseroads;
        
        private decimal _transroadid;
        
        private string _transroadname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnENDTIMEChanging(string value);
        partial void OnENDTIMEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnSPEEDChanging(Nullable<decimal> value);
        partial void OnSPEEDChanged();
        partial void OnSTARTTIMEChanging(string value);
        partial void OnSTARTTIMEChanged();
        partial void OnTRANSROADIDChanging(decimal value);
        partial void OnTRANSROADIDChanged();
        partial void OnTRANSROADNAMEChanging(string value);
        partial void OnTRANSROADNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TRANSROAD"/> 类的新实例。
        /// </summary>
        public TRANSROAD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ENDTIME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ENDTIME
        {
            get
            {
                return this._endtime;
            }
            set
            {
                if ((this._endtime != value))
                {
                    this.OnENDTIMEChanging(value);
                    this.RaiseDataMemberChanging("ENDTIME");
                    this.ValidateProperty("ENDTIME", value);
                    this._endtime = value;
                    this.RaiseDataMemberChanged("ENDTIME");
                    this.OnENDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SPEED”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SPEED
        {
            get
            {
                return this._speed;
            }
            set
            {
                if ((this._speed != value))
                {
                    this.OnSPEEDChanging(value);
                    this.RaiseDataMemberChanging("SPEED");
                    this.ValidateProperty("SPEED", value);
                    this._speed = value;
                    this.RaiseDataMemberChanged("SPEED");
                    this.OnSPEEDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTTIME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string STARTTIME
        {
            get
            {
                return this._starttime;
            }
            set
            {
                if ((this._starttime != value))
                {
                    this.OnSTARTTIMEChanging(value);
                    this.RaiseDataMemberChanging("STARTTIME");
                    this.ValidateProperty("STARTTIME", value);
                    this._starttime = value;
                    this.RaiseDataMemberChanged("STARTTIME");
                    this.OnSTARTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENSEROAD"/> 实体实例的集合。
        /// </summary>
        [Association("TRANSROAD_TRANSLICENSEROAD", "TRANSROADID", "TRANSROADID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENSEROAD> TRANSLICENSEROADS
        {
            get
            {
                if ((this._translicenseroads == null))
                {
                    this._translicenseroads = new EntityCollection<TRANSLICENSEROAD>(this, "TRANSLICENSEROADS", this.FilterTRANSLICENSEROADS, this.AttachTRANSLICENSEROADS, this.DetachTRANSLICENSEROADS);
                }
                return this._translicenseroads;
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSROADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal TRANSROADID
        {
            get
            {
                return this._transroadid;
            }
            set
            {
                if ((this._transroadid != value))
                {
                    this.OnTRANSROADIDChanging(value);
                    this.ValidateProperty("TRANSROADID", value);
                    this._transroadid = value;
                    this.RaisePropertyChanged("TRANSROADID");
                    this.OnTRANSROADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TRANSROADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TRANSROADNAME
        {
            get
            {
                return this._transroadname;
            }
            set
            {
                if ((this._transroadname != value))
                {
                    this.OnTRANSROADNAMEChanging(value);
                    this.RaiseDataMemberChanging("TRANSROADNAME");
                    this.ValidateProperty("TRANSROADNAME", value);
                    this._transroadname = value;
                    this.RaiseDataMemberChanged("TRANSROADNAME");
                    this.OnTRANSROADNAMEChanged();
                }
            }
        }
        
        private void AttachTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            entity.TRANSROAD = this;
        }
        
        private void DetachTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            entity.TRANSROAD = null;
        }
        
        private bool FilterTRANSLICENSEROADS(TRANSLICENSEROAD entity)
        {
            return (entity.TRANSROADID == this.TRANSROADID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._transroadid;
        }
    }
    
    /// <summary>
    /// “UNIT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class UNIT : Entity
    {
        
        private string _abbreviation;
        
        private EntityCollection<ACTIVITYPERMISSION> _activitypermissions;
        
        private EntityCollection<CONSTRSITE> _constrsites;
        
        private string _description;
        
        private EntityCollection<DUMPINGSITE> _dumpingsites;
        
        private string _dwzc;
        
        private Nullable<decimal> _isadminunit;
        
        private Nullable<decimal> _parentid;
        
        private string _path;
        
        private Nullable<decimal> _seqno;
        
        private EntityCollection<SPECIALACTIVITICE> _specialactivitices;
        
        private Nullable<decimal> _statusid;
        
        private EntityCollection<TRANSLICENS> _translicenses;
        
        private EntityRef<UNIT> _unit1;
        
        private decimal _unitid;
        
        private string _unitname;
        
        private EntityCollection<UNIT> _units1;
        
        private EntityRef<UNITTYPE> _unittype;
        
        private Nullable<decimal> _unittypeid;
        
        private EntityCollection<USER> _users;
        
        private EntityCollection<WORKFLOWINSTANCE> _workflowinstances;
        
        private EntityCollection<XCJGSIGNIN> _xcjgsignins;
        
        private EntityCollection<ZFGKCAR> _zfgkcars;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnABBREVIATIONChanging(string value);
        partial void OnABBREVIATIONChanged();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnDWZCChanging(string value);
        partial void OnDWZCChanged();
        partial void OnISADMINUNITChanging(Nullable<decimal> value);
        partial void OnISADMINUNITChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnUNITIDChanging(decimal value);
        partial void OnUNITIDChanged();
        partial void OnUNITNAMEChanging(string value);
        partial void OnUNITNAMEChanged();
        partial void OnUNITTYPEIDChanging(Nullable<decimal> value);
        partial void OnUNITTYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="UNIT"/> 类的新实例。
        /// </summary>
        public UNIT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ABBREVIATION”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ABBREVIATION
        {
            get
            {
                return this._abbreviation;
            }
            set
            {
                if ((this._abbreviation != value))
                {
                    this.OnABBREVIATIONChanging(value);
                    this.RaiseDataMemberChanging("ABBREVIATION");
                    this.ValidateProperty("ABBREVIATION", value);
                    this._abbreviation = value;
                    this.RaiseDataMemberChanged("ABBREVIATION");
                    this.OnABBREVIATIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYPERMISSION"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_ACTIVITYPERMISSION", "UNITID", "REGIONID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYPERMISSION> ACTIVITYPERMISSIONS
        {
            get
            {
                if ((this._activitypermissions == null))
                {
                    this._activitypermissions = new EntityCollection<ACTIVITYPERMISSION>(this, "ACTIVITYPERMISSIONS", this.FilterACTIVITYPERMISSIONS, this.AttachACTIVITYPERMISSIONS, this.DetachACTIVITYPERMISSIONS);
                }
                return this._activitypermissions;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="CONSTRSITE"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_CONSTRSITE", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<CONSTRSITE> CONSTRSITES
        {
            get
            {
                if ((this._constrsites == null))
                {
                    this._constrsites = new EntityCollection<CONSTRSITE>(this, "CONSTRSITES", this.FilterCONSTRSITES, this.AttachCONSTRSITES, this.DetachCONSTRSITES);
                }
                return this._constrsites;
            }
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DUMPINGSITE"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_DUMPINGSITE", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<DUMPINGSITE> DUMPINGSITES
        {
            get
            {
                if ((this._dumpingsites == null))
                {
                    this._dumpingsites = new EntityCollection<DUMPINGSITE>(this, "DUMPINGSITES", this.FilterDUMPINGSITES, this.AttachDUMPINGSITES, this.DetachDUMPINGSITES);
                }
                return this._dumpingsites;
            }
        }
        
        /// <summary>
        /// 获取或设置“DWZC”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DWZC
        {
            get
            {
                return this._dwzc;
            }
            set
            {
                if ((this._dwzc != value))
                {
                    this.OnDWZCChanging(value);
                    this.RaiseDataMemberChanging("DWZC");
                    this.ValidateProperty("DWZC", value);
                    this._dwzc = value;
                    this.RaiseDataMemberChanged("DWZC");
                    this.OnDWZCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ISADMINUNIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ISADMINUNIT
        {
            get
            {
                return this._isadminunit;
            }
            set
            {
                if ((this._isadminunit != value))
                {
                    this.OnISADMINUNITChanging(value);
                    this.RaiseDataMemberChanging("ISADMINUNIT");
                    this.ValidateProperty("ISADMINUNIT", value);
                    this._isadminunit = value;
                    this.RaiseDataMemberChanged("ISADMINUNIT");
                    this.OnISADMINUNITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PATH
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPATHChanging(value);
                    this.RaiseDataMemberChanging("PATH");
                    this.ValidateProperty("PATH", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALACTIVITICE"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_SPECIALACTIVITICE", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALACTIVITICE> SPECIALACTIVITICES
        {
            get
            {
                if ((this._specialactivitices == null))
                {
                    this._specialactivitices = new EntityCollection<SPECIALACTIVITICE>(this, "SPECIALACTIVITICES", this.FilterSPECIALACTIVITICES, this.AttachSPECIALACTIVITICES, this.DetachSPECIALACTIVITICES);
                }
                return this._specialactivitices;
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TRANSLICENS"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_TRANSLICENS", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<TRANSLICENS> TRANSLICENSES
        {
            get
            {
                if ((this._translicenses == null))
                {
                    this._translicenses = new EntityCollection<TRANSLICENS>(this, "TRANSLICENSES", this.FilterTRANSLICENSES, this.AttachTRANSLICENSES, this.DetachTRANSLICENSES);
                }
                return this._translicenses;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_UNIT", "PARENTID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT1
        {
            get
            {
                if ((this._unit1 == null))
                {
                    this._unit1 = new EntityRef<UNIT>(this, "UNIT1", this.FilterUNIT1);
                }
                return this._unit1.Entity;
            }
            set
            {
                UNIT previous = this.UNIT1;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT1", value);
                    if ((previous != null))
                    {
                        this._unit1.Entity = null;
                        previous.UNITS1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PARENTID = value.UNITID;
                    }
                    else
                    {
                        this.PARENTID = default(Nullable<decimal>);
                    }
                    this._unit1.Entity = value;
                    if ((value != null))
                    {
                        value.UNITS1.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT1");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaisePropertyChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string UNITNAME
        {
            get
            {
                return this._unitname;
            }
            set
            {
                if ((this._unitname != value))
                {
                    this.OnUNITNAMEChanging(value);
                    this.RaiseDataMemberChanging("UNITNAME");
                    this.ValidateProperty("UNITNAME", value);
                    this._unitname = value;
                    this.RaiseDataMemberChanged("UNITNAME");
                    this.OnUNITNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="UNIT"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_UNIT", "UNITID", "PARENTID")]
        [XmlIgnore()]
        public EntityCollection<UNIT> UNITS1
        {
            get
            {
                if ((this._units1 == null))
                {
                    this._units1 = new EntityCollection<UNIT>(this, "UNITS1", this.FilterUNITS1, this.AttachUNITS1, this.DetachUNITS1);
                }
                return this._units1;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNITTYPE"/> 实体。
        /// </summary>
        [Association("UNITTYPE_UNIT", "UNITTYPEID", "UNITTYPEID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNITTYPE UNITTYPE
        {
            get
            {
                if ((this._unittype == null))
                {
                    this._unittype = new EntityRef<UNITTYPE>(this, "UNITTYPE", this.FilterUNITTYPE);
                }
                return this._unittype.Entity;
            }
            set
            {
                UNITTYPE previous = this.UNITTYPE;
                if ((previous != value))
                {
                    this.ValidateProperty("UNITTYPE", value);
                    if ((previous != null))
                    {
                        this._unittype.Entity = null;
                        previous.UNITS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITTYPEID = value.UNITTYPEID;
                    }
                    else
                    {
                        this.UNITTYPEID = default(Nullable<decimal>);
                    }
                    this._unittype.Entity = value;
                    if ((value != null))
                    {
                        value.UNITS.Add(this);
                    }
                    this.RaisePropertyChanged("UNITTYPE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITTYPEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITTYPEID
        {
            get
            {
                return this._unittypeid;
            }
            set
            {
                if ((this._unittypeid != value))
                {
                    this.OnUNITTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("UNITTYPEID");
                    this.ValidateProperty("UNITTYPEID", value);
                    this._unittypeid = value;
                    this.RaiseDataMemberChanged("UNITTYPEID");
                    this.OnUNITTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USER"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_USER", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<USER> USERS
        {
            get
            {
                if ((this._users == null))
                {
                    this._users = new EntityCollection<USER>(this, "USERS", this.FilterUSERS, this.AttachUSERS, this.DetachUSERS);
                }
                return this._users;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="WORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_WORKFLOWINSTANCE", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<WORKFLOWINSTANCE> WORKFLOWINSTANCES
        {
            get
            {
                if ((this._workflowinstances == null))
                {
                    this._workflowinstances = new EntityCollection<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCES", this.FilterWORKFLOWINSTANCES, this.AttachWORKFLOWINSTANCES, this.DetachWORKFLOWINSTANCES);
                }
                return this._workflowinstances;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGSIGNIN"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_XCJGSIGNIN", "UNITID", "SSZDID")]
        [XmlIgnore()]
        public EntityCollection<XCJGSIGNIN> XCJGSIGNINS
        {
            get
            {
                if ((this._xcjgsignins == null))
                {
                    this._xcjgsignins = new EntityCollection<XCJGSIGNIN>(this, "XCJGSIGNINS", this.FilterXCJGSIGNINS, this.AttachXCJGSIGNINS, this.DetachXCJGSIGNINS);
                }
                return this._xcjgsignins;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFGKCAR"/> 实体实例的集合。
        /// </summary>
        [Association("UNIT_ZFGKCAR", "UNITID", "UNITID")]
        [XmlIgnore()]
        public EntityCollection<ZFGKCAR> ZFGKCARS
        {
            get
            {
                if ((this._zfgkcars == null))
                {
                    this._zfgkcars = new EntityCollection<ZFGKCAR>(this, "ZFGKCARS", this.FilterZFGKCARS, this.AttachZFGKCARS, this.DetachZFGKCARS);
                }
                return this._zfgkcars;
            }
        }
        
        private void AttachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterACTIVITYPERMISSIONS(ACTIVITYPERMISSION entity)
        {
            return (entity.REGIONID == this.UNITID);
        }
        
        private void AttachCONSTRSITES(CONSTRSITE entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachCONSTRSITES(CONSTRSITE entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterCONSTRSITES(CONSTRSITE entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachDUMPINGSITES(DUMPINGSITE entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachDUMPINGSITES(DUMPINGSITE entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterDUMPINGSITES(DUMPINGSITE entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachTRANSLICENSES(TRANSLICENS entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterTRANSLICENSES(TRANSLICENS entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private bool FilterUNIT1(UNIT entity)
        {
            return (entity.UNITID == this.PARENTID);
        }
        
        private void AttachUNITS1(UNIT entity)
        {
            entity.UNIT1 = this;
        }
        
        private void DetachUNITS1(UNIT entity)
        {
            entity.UNIT1 = null;
        }
        
        private bool FilterUNITS1(UNIT entity)
        {
            return (entity.PARENTID == this.UNITID);
        }
        
        private bool FilterUNITTYPE(UNITTYPE entity)
        {
            return (entity.UNITTYPEID == this.UNITTYPEID);
        }
        
        private void AttachUSERS(USER entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachUSERS(USER entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterUSERS(USER entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachXCJGSIGNINS(XCJGSIGNIN entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachXCJGSIGNINS(XCJGSIGNIN entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterXCJGSIGNINS(XCJGSIGNIN entity)
        {
            return (entity.SSZDID == this.UNITID);
        }
        
        private void AttachZFGKCARS(ZFGKCAR entity)
        {
            entity.UNIT = this;
        }
        
        private void DetachZFGKCARS(ZFGKCAR entity)
        {
            entity.UNIT = null;
        }
        
        private bool FilterZFGKCARS(ZFGKCAR entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._unitid;
        }
    }
    
    /// <summary>
    /// “UNITTYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class UNITTYPE : Entity
    {
        
        private EntityCollection<UNIT> _units;
        
        private decimal _unittypeid;
        
        private string _unittypename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnUNITTYPEIDChanging(decimal value);
        partial void OnUNITTYPEIDChanged();
        partial void OnUNITTYPENAMEChanging(string value);
        partial void OnUNITTYPENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="UNITTYPE"/> 类的新实例。
        /// </summary>
        public UNITTYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="UNIT"/> 实体实例的集合。
        /// </summary>
        [Association("UNITTYPE_UNIT", "UNITTYPEID", "UNITTYPEID")]
        [XmlIgnore()]
        public EntityCollection<UNIT> UNITS
        {
            get
            {
                if ((this._units == null))
                {
                    this._units = new EntityCollection<UNIT>(this, "UNITS", this.FilterUNITS, this.AttachUNITS, this.DetachUNITS);
                }
                return this._units;
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITTYPEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal UNITTYPEID
        {
            get
            {
                return this._unittypeid;
            }
            set
            {
                if ((this._unittypeid != value))
                {
                    this.OnUNITTYPEIDChanging(value);
                    this.ValidateProperty("UNITTYPEID", value);
                    this._unittypeid = value;
                    this.RaisePropertyChanged("UNITTYPEID");
                    this.OnUNITTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITTYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string UNITTYPENAME
        {
            get
            {
                return this._unittypename;
            }
            set
            {
                if ((this._unittypename != value))
                {
                    this.OnUNITTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("UNITTYPENAME");
                    this.ValidateProperty("UNITTYPENAME", value);
                    this._unittypename = value;
                    this.RaiseDataMemberChanged("UNITTYPENAME");
                    this.OnUNITTYPENAMEChanged();
                }
            }
        }
        
        private void AttachUNITS(UNIT entity)
        {
            entity.UNITTYPE = this;
        }
        
        private void DetachUNITS(UNIT entity)
        {
            entity.UNITTYPE = null;
        }
        
        private bool FilterUNITS(UNIT entity)
        {
            return (entity.UNITTYPEID == this.UNITTYPEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._unittypeid;
        }
    }
    
    /// <summary>
    /// “USER”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USER : Entity
    {
        
        private string _account;
        
        private Nullable<decimal> _categoryid;
        
        private EntityCollection<ONDUTy> _onduties;
        
        private string _password;
        
        private Nullable<decimal> _regionid;
        
        private string _rtxaccount;
        
        private Nullable<decimal> _seqno;
        
        private EntityCollection<SINGNIN> _singnins;
        
        private string _smsnumbers;
        
        private EntityCollection<SPECIALACTIVITICE> _specialactivitices;
        
        private EntityCollection<SPECIALTOZFSJ> _specialtozfsjs;
        
        private EntityCollection<SPECIALWORKFLOWINSTANCE> _specialworkflowinstances;
        
        private Nullable<decimal> _statusid;
        
        private EntityCollection<STREETUSER> _streetusers;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private EntityRef<USERARCHIVE> _userarchive;
        
        private EntityRef<USERCATEGORy> _usercategoRy;
        
        private Nullable<decimal> _usercategoryid;
        
        private decimal _userid;
        
        private string _username;
        
        private EntityCollection<USERONDUTy> _useronduties;
        
        private EntityRef<USERPOSITION> _userposition;
        
        private Nullable<decimal> _userpositionid;
        
        private EntityCollection<USERROLE> _userroles;
        
        private string _workzz;
        
        private EntityRef<WTUSERRELATION> _wtuserrelation;
        
        private EntityCollection<XCJGUSERTASK> _xcjgusertasks;
        
        private EntityCollection<ZFGKUSERHISTORYPOSITION> _zfgkuserhistorypositions;
        
        private EntityRef<ZFGKUSERLATESTPOSITION> _zfgkuserlatestposition;
        
        private string _zfzbh;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACCOUNTChanging(string value);
        partial void OnACCOUNTChanged();
        partial void OnCATEGORYIDChanging(Nullable<decimal> value);
        partial void OnCATEGORYIDChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnREGIONIDChanging(Nullable<decimal> value);
        partial void OnREGIONIDChanged();
        partial void OnRTXACCOUNTChanging(string value);
        partial void OnRTXACCOUNTChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSMSNUMBERSChanging(string value);
        partial void OnSMSNUMBERSChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERCATEGORYIDChanging(Nullable<decimal> value);
        partial void OnUSERCATEGORYIDChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnUSERPOSITIONIDChanging(Nullable<decimal> value);
        partial void OnUSERPOSITIONIDChanged();
        partial void OnWORKZZChanging(string value);
        partial void OnWORKZZChanged();
        partial void OnZFZBHChanging(string value);
        partial void OnZFZBHChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USER"/> 类的新实例。
        /// </summary>
        public USER()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ACCOUNT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ACCOUNT
        {
            get
            {
                return this._account;
            }
            set
            {
                if ((this._account != value))
                {
                    this.OnACCOUNTChanging(value);
                    this.RaiseDataMemberChanging("ACCOUNT");
                    this.ValidateProperty("ACCOUNT", value);
                    this._account = value;
                    this.RaiseDataMemberChanged("ACCOUNT");
                    this.OnACCOUNTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CATEGORYID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CATEGORYID
        {
            get
            {
                return this._categoryid;
            }
            set
            {
                if ((this._categoryid != value))
                {
                    this.OnCATEGORYIDChanging(value);
                    this.RaiseDataMemberChanging("CATEGORYID");
                    this.ValidateProperty("CATEGORYID", value);
                    this._categoryid = value;
                    this.RaiseDataMemberChanged("CATEGORYID");
                    this.OnCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ONDUTy"/> 实体实例的集合。
        /// </summary>
        [Association("USER_ONDUTy", "USERID", "CREATEUSERID")]
        [XmlIgnore()]
        public EntityCollection<ONDUTy> ONDUTIES
        {
            get
            {
                if ((this._onduties == null))
                {
                    this._onduties = new EntityCollection<ONDUTy>(this, "ONDUTIES", this.FilterONDUTIES, this.AttachONDUTIES, this.DetachONDUTIES);
                }
                return this._onduties;
            }
        }
        
        /// <summary>
        /// 获取或设置“PASSWORD”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PASSWORD
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPASSWORDChanging(value);
                    this.RaiseDataMemberChanging("PASSWORD");
                    this.ValidateProperty("PASSWORD", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REGIONID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> REGIONID
        {
            get
            {
                return this._regionid;
            }
            set
            {
                if ((this._regionid != value))
                {
                    this.OnREGIONIDChanging(value);
                    this.RaiseDataMemberChanging("REGIONID");
                    this.ValidateProperty("REGIONID", value);
                    this._regionid = value;
                    this.RaiseDataMemberChanged("REGIONID");
                    this.OnREGIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RTXACCOUNT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string RTXACCOUNT
        {
            get
            {
                return this._rtxaccount;
            }
            set
            {
                if ((this._rtxaccount != value))
                {
                    this.OnRTXACCOUNTChanging(value);
                    this.RaiseDataMemberChanging("RTXACCOUNT");
                    this.ValidateProperty("RTXACCOUNT", value);
                    this._rtxaccount = value;
                    this.RaiseDataMemberChanged("RTXACCOUNT");
                    this.OnRTXACCOUNTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SINGNIN"/> 实体实例的集合。
        /// </summary>
        [Association("USER_SINGNIN", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<SINGNIN> SINGNINS
        {
            get
            {
                if ((this._singnins == null))
                {
                    this._singnins = new EntityCollection<SINGNIN>(this, "SINGNINS", this.FilterSINGNINS, this.AttachSINGNINS, this.DetachSINGNINS);
                }
                return this._singnins;
            }
        }
        
        /// <summary>
        /// 获取或设置“SMSNUMBERS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SMSNUMBERS
        {
            get
            {
                return this._smsnumbers;
            }
            set
            {
                if ((this._smsnumbers != value))
                {
                    this.OnSMSNUMBERSChanging(value);
                    this.RaiseDataMemberChanging("SMSNUMBERS");
                    this.ValidateProperty("SMSNUMBERS", value);
                    this._smsnumbers = value;
                    this.RaiseDataMemberChanged("SMSNUMBERS");
                    this.OnSMSNUMBERSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALACTIVITICE"/> 实体实例的集合。
        /// </summary>
        [Association("USER_SPECIALACTIVITICE", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALACTIVITICE> SPECIALACTIVITICES
        {
            get
            {
                if ((this._specialactivitices == null))
                {
                    this._specialactivitices = new EntityCollection<SPECIALACTIVITICE>(this, "SPECIALACTIVITICES", this.FilterSPECIALACTIVITICES, this.AttachSPECIALACTIVITICES, this.DetachSPECIALACTIVITICES);
                }
                return this._specialactivitices;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALTOZFSJ"/> 实体实例的集合。
        /// </summary>
        [Association("USER_SPECIALTOZFSJ", "USERID", "CREATEUSERID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALTOZFSJ> SPECIALTOZFSJS
        {
            get
            {
                if ((this._specialtozfsjs == null))
                {
                    this._specialtozfsjs = new EntityCollection<SPECIALTOZFSJ>(this, "SPECIALTOZFSJS", this.FilterSPECIALTOZFSJS, this.AttachSPECIALTOZFSJS, this.DetachSPECIALTOZFSJS);
                }
                return this._specialtozfsjs;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="SPECIALWORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("USER_SPECIALWORKFLOWINSTANCE", "USERID", "CREATEUSERID")]
        [XmlIgnore()]
        public EntityCollection<SPECIALWORKFLOWINSTANCE> SPECIALWORKFLOWINSTANCES
        {
            get
            {
                if ((this._specialworkflowinstances == null))
                {
                    this._specialworkflowinstances = new EntityCollection<SPECIALWORKFLOWINSTANCE>(this, "SPECIALWORKFLOWINSTANCES", this.FilterSPECIALWORKFLOWINSTANCES, this.AttachSPECIALWORKFLOWINSTANCES, this.DetachSPECIALWORKFLOWINSTANCES);
                }
                return this._specialworkflowinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="STREETUSER"/> 实体实例的集合。
        /// </summary>
        [Association("USER_STREETUSER", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<STREETUSER> STREETUSERS
        {
            get
            {
                if ((this._streetusers == null))
                {
                    this._streetusers = new EntityCollection<STREETUSER>(this, "STREETUSERS", this.FilterSTREETUSERS, this.AttachSTREETUSERS, this.DetachSTREETUSERS);
                }
                return this._streetusers;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_USER", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.USERS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.USERS.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USERARCHIVE"/> 实体。
        /// </summary>
        [Association("USER_USERARCHIVE", "USERID", "USERID")]
        [XmlIgnore()]
        public USERARCHIVE USERARCHIVE
        {
            get
            {
                if ((this._userarchive == null))
                {
                    this._userarchive = new EntityRef<USERARCHIVE>(this, "USERARCHIVE", this.FilterUSERARCHIVE);
                }
                return this._userarchive.Entity;
            }
            set
            {
                USERARCHIVE previous = this.USERARCHIVE;
                if ((previous != value))
                {
                    this.ValidateProperty("USERARCHIVE", value);
                    if ((previous != null))
                    {
                        this._userarchive.Entity = null;
                        previous.USER = null;
                    }
                    this._userarchive.Entity = value;
                    if ((value != null))
                    {
                        value.USER = this;
                    }
                    this.RaisePropertyChanged("USERARCHIVE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USERCATEGORy"/> 实体。
        /// </summary>
        [Association("USERCATEGORy_USER", "USERCATEGORYID", "USERCATEGORYID", IsForeignKey=true)]
        [XmlIgnore()]
        public USERCATEGORy USERCATEGORy
        {
            get
            {
                if ((this._usercategoRy == null))
                {
                    this._usercategoRy = new EntityRef<USERCATEGORy>(this, "USERCATEGORy", this.FilterUSERCATEGORy);
                }
                return this._usercategoRy.Entity;
            }
            set
            {
                USERCATEGORy previous = this.USERCATEGORy;
                if ((previous != value))
                {
                    this.ValidateProperty("USERCATEGORy", value);
                    if ((previous != null))
                    {
                        this._usercategoRy.Entity = null;
                        previous.USERS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERCATEGORYID = value.USERCATEGORYID;
                    }
                    else
                    {
                        this.USERCATEGORYID = default(Nullable<decimal>);
                    }
                    this._usercategoRy.Entity = value;
                    if ((value != null))
                    {
                        value.USERS.Add(this);
                    }
                    this.RaisePropertyChanged("USERCATEGORy");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERCATEGORYID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERCATEGORYID
        {
            get
            {
                return this._usercategoryid;
            }
            set
            {
                if ((this._usercategoryid != value))
                {
                    this.OnUSERCATEGORYIDChanging(value);
                    this.RaiseDataMemberChanging("USERCATEGORYID");
                    this.ValidateProperty("USERCATEGORYID", value);
                    this._usercategoryid = value;
                    this.RaiseDataMemberChanged("USERCATEGORYID");
                    this.OnUSERCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaisePropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(60)]
        public string USERNAME
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUSERNAMEChanging(value);
                    this.RaiseDataMemberChanging("USERNAME");
                    this.ValidateProperty("USERNAME", value);
                    this._username = value;
                    this.RaiseDataMemberChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USERONDUTy"/> 实体实例的集合。
        /// </summary>
        [Association("USER_USERONDUTy", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<USERONDUTy> USERONDUTIES
        {
            get
            {
                if ((this._useronduties == null))
                {
                    this._useronduties = new EntityCollection<USERONDUTy>(this, "USERONDUTIES", this.FilterUSERONDUTIES, this.AttachUSERONDUTIES, this.DetachUSERONDUTIES);
                }
                return this._useronduties;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USERPOSITION"/> 实体。
        /// </summary>
        [Association("USERPOSITION_USER", "USERPOSITIONID", "USERPOSITIONID", IsForeignKey=true)]
        [XmlIgnore()]
        public USERPOSITION USERPOSITION
        {
            get
            {
                if ((this._userposition == null))
                {
                    this._userposition = new EntityRef<USERPOSITION>(this, "USERPOSITION", this.FilterUSERPOSITION);
                }
                return this._userposition.Entity;
            }
            set
            {
                USERPOSITION previous = this.USERPOSITION;
                if ((previous != value))
                {
                    this.ValidateProperty("USERPOSITION", value);
                    if ((previous != null))
                    {
                        this._userposition.Entity = null;
                        previous.USERS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERPOSITIONID = value.USERPOSITIONID;
                    }
                    else
                    {
                        this.USERPOSITIONID = default(Nullable<decimal>);
                    }
                    this._userposition.Entity = value;
                    if ((value != null))
                    {
                        value.USERS.Add(this);
                    }
                    this.RaisePropertyChanged("USERPOSITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERPOSITIONID
        {
            get
            {
                return this._userpositionid;
            }
            set
            {
                if ((this._userpositionid != value))
                {
                    this.OnUSERPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("USERPOSITIONID");
                    this.ValidateProperty("USERPOSITIONID", value);
                    this._userpositionid = value;
                    this.RaiseDataMemberChanged("USERPOSITIONID");
                    this.OnUSERPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USERROLE"/> 实体实例的集合。
        /// </summary>
        [Association("USER_USERROLE", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<USERROLE> USERROLES
        {
            get
            {
                if ((this._userroles == null))
                {
                    this._userroles = new EntityCollection<USERROLE>(this, "USERROLES", this.FilterUSERROLES, this.AttachUSERROLES, this.DetachUSERROLES);
                }
                return this._userroles;
            }
        }
        
        /// <summary>
        /// 获取或设置“WORKZZ”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string WORKZZ
        {
            get
            {
                return this._workzz;
            }
            set
            {
                if ((this._workzz != value))
                {
                    this.OnWORKZZChanging(value);
                    this.RaiseDataMemberChanging("WORKZZ");
                    this.ValidateProperty("WORKZZ", value);
                    this._workzz = value;
                    this.RaiseDataMemberChanged("WORKZZ");
                    this.OnWORKZZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WTUSERRELATION"/> 实体。
        /// </summary>
        [Association("USER_WTUSERRELATION", "USERID", "USERID")]
        [XmlIgnore()]
        public WTUSERRELATION WTUSERRELATION
        {
            get
            {
                if ((this._wtuserrelation == null))
                {
                    this._wtuserrelation = new EntityRef<WTUSERRELATION>(this, "WTUSERRELATION", this.FilterWTUSERRELATION);
                }
                return this._wtuserrelation.Entity;
            }
            set
            {
                WTUSERRELATION previous = this.WTUSERRELATION;
                if ((previous != value))
                {
                    this.ValidateProperty("WTUSERRELATION", value);
                    if ((previous != null))
                    {
                        this._wtuserrelation.Entity = null;
                        previous.USER = null;
                    }
                    this._wtuserrelation.Entity = value;
                    if ((value != null))
                    {
                        value.USER = this;
                    }
                    this.RaisePropertyChanged("WTUSERRELATION");
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGUSERTASK"/> 实体实例的集合。
        /// </summary>
        [Association("USER_XCJGUSERTASK", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<XCJGUSERTASK> XCJGUSERTASKS
        {
            get
            {
                if ((this._xcjgusertasks == null))
                {
                    this._xcjgusertasks = new EntityCollection<XCJGUSERTASK>(this, "XCJGUSERTASKS", this.FilterXCJGUSERTASKS, this.AttachXCJGUSERTASKS, this.DetachXCJGUSERTASKS);
                }
                return this._xcjgusertasks;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFGKUSERHISTORYPOSITION"/> 实体实例的集合。
        /// </summary>
        [Association("USER_ZFGKUSERHISTORYPOSITION", "USERID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<ZFGKUSERHISTORYPOSITION> ZFGKUSERHISTORYPOSITIONS
        {
            get
            {
                if ((this._zfgkuserhistorypositions == null))
                {
                    this._zfgkuserhistorypositions = new EntityCollection<ZFGKUSERHISTORYPOSITION>(this, "ZFGKUSERHISTORYPOSITIONS", this.FilterZFGKUSERHISTORYPOSITIONS, this.AttachZFGKUSERHISTORYPOSITIONS, this.DetachZFGKUSERHISTORYPOSITIONS);
                }
                return this._zfgkuserhistorypositions;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFGKUSERLATESTPOSITION"/> 实体。
        /// </summary>
        [Association("USER_ZFGKUSERLATESTPOSITION", "USERID", "USERID")]
        [XmlIgnore()]
        public ZFGKUSERLATESTPOSITION ZFGKUSERLATESTPOSITION
        {
            get
            {
                if ((this._zfgkuserlatestposition == null))
                {
                    this._zfgkuserlatestposition = new EntityRef<ZFGKUSERLATESTPOSITION>(this, "ZFGKUSERLATESTPOSITION", this.FilterZFGKUSERLATESTPOSITION);
                }
                return this._zfgkuserlatestposition.Entity;
            }
            set
            {
                ZFGKUSERLATESTPOSITION previous = this.ZFGKUSERLATESTPOSITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFGKUSERLATESTPOSITION", value);
                    if ((previous != null))
                    {
                        this._zfgkuserlatestposition.Entity = null;
                        previous.USER = null;
                    }
                    this._zfgkuserlatestposition.Entity = value;
                    if ((value != null))
                    {
                        value.USER = this;
                    }
                    this.RaisePropertyChanged("ZFGKUSERLATESTPOSITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFZBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ZFZBH
        {
            get
            {
                return this._zfzbh;
            }
            set
            {
                if ((this._zfzbh != value))
                {
                    this.OnZFZBHChanging(value);
                    this.RaiseDataMemberChanging("ZFZBH");
                    this.ValidateProperty("ZFZBH", value);
                    this._zfzbh = value;
                    this.RaiseDataMemberChanged("ZFZBH");
                    this.OnZFZBHChanged();
                }
            }
        }
        
        private void AttachONDUTIES(ONDUTy entity)
        {
            entity.USER = this;
        }
        
        private void DetachONDUTIES(ONDUTy entity)
        {
            entity.USER = null;
        }
        
        private bool FilterONDUTIES(ONDUTy entity)
        {
            return (entity.CREATEUSERID == this.USERID);
        }
        
        private void AttachSINGNINS(SINGNIN entity)
        {
            entity.USER = this;
        }
        
        private void DetachSINGNINS(SINGNIN entity)
        {
            entity.USER = null;
        }
        
        private bool FilterSINGNINS(SINGNIN entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private void AttachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.USER = this;
        }
        
        private void DetachSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            entity.USER = null;
        }
        
        private bool FilterSPECIALACTIVITICES(SPECIALACTIVITICE entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private void AttachSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            entity.USER = this;
        }
        
        private void DetachSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            entity.USER = null;
        }
        
        private bool FilterSPECIALTOZFSJS(SPECIALTOZFSJ entity)
        {
            return (entity.CREATEUSERID == this.USERID);
        }
        
        private void AttachSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            entity.USER = this;
        }
        
        private void DetachSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            entity.USER = null;
        }
        
        private bool FilterSPECIALWORKFLOWINSTANCES(SPECIALWORKFLOWINSTANCE entity)
        {
            return (entity.CREATEUSERID == this.USERID);
        }
        
        private void AttachSTREETUSERS(STREETUSER entity)
        {
            entity.USER = this;
        }
        
        private void DetachSTREETUSERS(STREETUSER entity)
        {
            entity.USER = null;
        }
        
        private bool FilterSTREETUSERS(STREETUSER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private bool FilterUSERARCHIVE(USERARCHIVE entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterUSERCATEGORy(USERCATEGORy entity)
        {
            return (entity.USERCATEGORYID == this.USERCATEGORYID);
        }
        
        private void AttachUSERONDUTIES(USERONDUTy entity)
        {
            entity.USER = this;
        }
        
        private void DetachUSERONDUTIES(USERONDUTy entity)
        {
            entity.USER = null;
        }
        
        private bool FilterUSERONDUTIES(USERONDUTy entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterUSERPOSITION(USERPOSITION entity)
        {
            return (entity.USERPOSITIONID == this.USERPOSITIONID);
        }
        
        private void AttachUSERROLES(USERROLE entity)
        {
            entity.USER = this;
        }
        
        private void DetachUSERROLES(USERROLE entity)
        {
            entity.USER = null;
        }
        
        private bool FilterUSERROLES(USERROLE entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterWTUSERRELATION(WTUSERRELATION entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private void AttachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.USER = this;
        }
        
        private void DetachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.USER = null;
        }
        
        private bool FilterXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private void AttachZFGKUSERHISTORYPOSITIONS(ZFGKUSERHISTORYPOSITION entity)
        {
            entity.USER = this;
        }
        
        private void DetachZFGKUSERHISTORYPOSITIONS(ZFGKUSERHISTORYPOSITION entity)
        {
            entity.USER = null;
        }
        
        private bool FilterZFGKUSERHISTORYPOSITIONS(ZFGKUSERHISTORYPOSITION entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterZFGKUSERLATESTPOSITION(ZFGKUSERLATESTPOSITION entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userid;
        }
    }
    
    /// <summary>
    /// “USERARCHIVE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERARCHIVE : Entity
    {
        
        private string _avatar;
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAVATARChanging(string value);
        partial void OnAVATARChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERARCHIVE"/> 类的新实例。
        /// </summary>
        public USERARCHIVE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AVATAR”值。
        /// </summary>
        [DataMember()]
        public string AVATAR
        {
            get
            {
                return this._avatar;
            }
            set
            {
                if ((this._avatar != value))
                {
                    this.OnAVATARChanging(value);
                    this.RaiseDataMemberChanging("AVATAR");
                    this.ValidateProperty("AVATAR", value);
                    this._avatar = value;
                    this.RaiseDataMemberChanged("AVATAR");
                    this.OnAVATARChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_USERARCHIVE", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.USERARCHIVE = null;
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.USERARCHIVE = this;
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userid;
        }
    }
    
    /// <summary>
    /// “USERCATEGORy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERCATEGORy : Entity
    {
        
        private decimal _usercategoryid;
        
        private string _usercategoryname;
        
        private EntityCollection<USER> _users;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnUSERCATEGORYIDChanging(decimal value);
        partial void OnUSERCATEGORYIDChanged();
        partial void OnUSERCATEGORYNAMEChanging(string value);
        partial void OnUSERCATEGORYNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERCATEGORy"/> 类的新实例。
        /// </summary>
        public USERCATEGORy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“USERCATEGORYID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERCATEGORYID
        {
            get
            {
                return this._usercategoryid;
            }
            set
            {
                if ((this._usercategoryid != value))
                {
                    this.OnUSERCATEGORYIDChanging(value);
                    this.ValidateProperty("USERCATEGORYID", value);
                    this._usercategoryid = value;
                    this.RaisePropertyChanged("USERCATEGORYID");
                    this.OnUSERCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERCATEGORYNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string USERCATEGORYNAME
        {
            get
            {
                return this._usercategoryname;
            }
            set
            {
                if ((this._usercategoryname != value))
                {
                    this.OnUSERCATEGORYNAMEChanging(value);
                    this.RaiseDataMemberChanging("USERCATEGORYNAME");
                    this.ValidateProperty("USERCATEGORYNAME", value);
                    this._usercategoryname = value;
                    this.RaiseDataMemberChanged("USERCATEGORYNAME");
                    this.OnUSERCATEGORYNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USER"/> 实体实例的集合。
        /// </summary>
        [Association("USERCATEGORy_USER", "USERCATEGORYID", "USERCATEGORYID")]
        [XmlIgnore()]
        public EntityCollection<USER> USERS
        {
            get
            {
                if ((this._users == null))
                {
                    this._users = new EntityCollection<USER>(this, "USERS", this.FilterUSERS, this.AttachUSERS, this.DetachUSERS);
                }
                return this._users;
            }
        }
        
        private void AttachUSERS(USER entity)
        {
            entity.USERCATEGORy = this;
        }
        
        private void DetachUSERS(USER entity)
        {
            entity.USERCATEGORy = null;
        }
        
        private bool FilterUSERS(USER entity)
        {
            return (entity.USERCATEGORYID == this.USERCATEGORYID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._usercategoryid;
        }
    }
    
    /// <summary>
    /// “USERGROUP”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERGROUP : Entity
    {
        
        private decimal _groupid;
        
        private string _redundancy;
        
        private decimal _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnGROUPIDChanging(decimal value);
        partial void OnGROUPIDChanged();
        partial void OnREDUNDANCYChanging(string value);
        partial void OnREDUNDANCYChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERGROUP"/> 类的新实例。
        /// </summary>
        public USERGROUP()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“GROUPID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal GROUPID
        {
            get
            {
                return this._groupid;
            }
            set
            {
                if ((this._groupid != value))
                {
                    this.OnGROUPIDChanging(value);
                    this.ValidateProperty("GROUPID", value);
                    this._groupid = value;
                    this.RaisePropertyChanged("GROUPID");
                    this.OnGROUPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REDUNDANCY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string REDUNDANCY
        {
            get
            {
                return this._redundancy;
            }
            set
            {
                if ((this._redundancy != value))
                {
                    this.OnREDUNDANCYChanging(value);
                    this.RaiseDataMemberChanging("REDUNDANCY");
                    this.ValidateProperty("REDUNDANCY", value);
                    this._redundancy = value;
                    this.RaiseDataMemberChanged("REDUNDANCY");
                    this.OnREDUNDANCYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaisePropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._groupid, this._userid);
        }
    }
    
    /// <summary>
    /// “USERONDUTy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERONDUTy : Entity
    {
        
        private Nullable<DateTime> _createtime;
        
        private Nullable<decimal> _createuserid;
        
        private decimal _id;
        
        private EntityRef<ONDUTy> _onduTy;
        
        private Nullable<decimal> _ondutyid;
        
        private EntityRef<USER> _user;
        
        private Nullable<decimal> _userid;
        
        private EntityRef<USERPOSITION> _userposition;
        
        private Nullable<decimal> _userpositionid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCREATEUSERIDChanging(Nullable<decimal> value);
        partial void OnCREATEUSERIDChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnONDUTYIDChanging(Nullable<decimal> value);
        partial void OnONDUTYIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnUSERPOSITIONIDChanging(Nullable<decimal> value);
        partial void OnUSERPOSITIONIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERONDUTy"/> 类的新实例。
        /// </summary>
        public USERONDUTy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEUSERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CREATEUSERID
        {
            get
            {
                return this._createuserid;
            }
            set
            {
                if ((this._createuserid != value))
                {
                    this.OnCREATEUSERIDChanging(value);
                    this.RaiseDataMemberChanging("CREATEUSERID");
                    this.ValidateProperty("CREATEUSERID", value);
                    this._createuserid = value;
                    this.RaiseDataMemberChanged("CREATEUSERID");
                    this.OnCREATEUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ONDUTy"/> 实体。
        /// </summary>
        [Association("ONDUTy_USERONDUTy", "ONDUTYID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public ONDUTy ONDUTy
        {
            get
            {
                if ((this._onduTy == null))
                {
                    this._onduTy = new EntityRef<ONDUTy>(this, "ONDUTy", this.FilterONDUTy);
                }
                return this._onduTy.Entity;
            }
            set
            {
                ONDUTy previous = this.ONDUTy;
                if ((previous != value))
                {
                    this.ValidateProperty("ONDUTy", value);
                    if ((previous != null))
                    {
                        this._onduTy.Entity = null;
                        previous.USERONDUTIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ONDUTYID = value.ID;
                    }
                    else
                    {
                        this.ONDUTYID = default(Nullable<decimal>);
                    }
                    this._onduTy.Entity = value;
                    if ((value != null))
                    {
                        value.USERONDUTIES.Add(this);
                    }
                    this.RaisePropertyChanged("ONDUTy");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ONDUTYID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ONDUTYID
        {
            get
            {
                return this._ondutyid;
            }
            set
            {
                if ((this._ondutyid != value))
                {
                    this.OnONDUTYIDChanging(value);
                    this.RaiseDataMemberChanging("ONDUTYID");
                    this.ValidateProperty("ONDUTYID", value);
                    this._ondutyid = value;
                    this.RaiseDataMemberChanged("ONDUTYID");
                    this.OnONDUTYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_USERONDUTy", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.USERONDUTIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(Nullable<decimal>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.USERONDUTIES.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USERPOSITION"/> 实体。
        /// </summary>
        [Association("USERPOSITION_USERONDUTy", "USERPOSITIONID", "USERPOSITIONID", IsForeignKey=true)]
        [XmlIgnore()]
        public USERPOSITION USERPOSITION
        {
            get
            {
                if ((this._userposition == null))
                {
                    this._userposition = new EntityRef<USERPOSITION>(this, "USERPOSITION", this.FilterUSERPOSITION);
                }
                return this._userposition.Entity;
            }
            set
            {
                USERPOSITION previous = this.USERPOSITION;
                if ((previous != value))
                {
                    this.ValidateProperty("USERPOSITION", value);
                    if ((previous != null))
                    {
                        this._userposition.Entity = null;
                        previous.USERONDUTIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERPOSITIONID = value.USERPOSITIONID;
                    }
                    else
                    {
                        this.USERPOSITIONID = default(Nullable<decimal>);
                    }
                    this._userposition.Entity = value;
                    if ((value != null))
                    {
                        value.USERONDUTIES.Add(this);
                    }
                    this.RaisePropertyChanged("USERPOSITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> USERPOSITIONID
        {
            get
            {
                return this._userpositionid;
            }
            set
            {
                if ((this._userpositionid != value))
                {
                    this.OnUSERPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("USERPOSITIONID");
                    this.ValidateProperty("USERPOSITIONID", value);
                    this._userpositionid = value;
                    this.RaiseDataMemberChanged("USERPOSITIONID");
                    this.OnUSERPOSITIONIDChanged();
                }
            }
        }
        
        private bool FilterONDUTy(ONDUTy entity)
        {
            return (entity.ID == this.ONDUTYID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterUSERPOSITION(USERPOSITION entity)
        {
            return (entity.USERPOSITIONID == this.USERPOSITIONID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “USERPHONESIGNIN”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERPHONESIGNIN : Entity
    {
        
        private string _id;
        
        private string _imeinum;
        
        private string _latandlong;
        
        private string _phonetime;
        
        private Nullable<DateTime> _signtime;
        
        private Nullable<decimal> _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnIMEINUMChanging(string value);
        partial void OnIMEINUMChanged();
        partial void OnLATANDLONGChanging(string value);
        partial void OnLATANDLONGChanged();
        partial void OnPHONETIMEChanging(string value);
        partial void OnPHONETIMEChanged();
        partial void OnSIGNTIMEChanging(Nullable<DateTime> value);
        partial void OnSIGNTIMEChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERPHONESIGNIN"/> 类的新实例。
        /// </summary>
        public USERPHONESIGNIN()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IMEINUM”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string IMEINUM
        {
            get
            {
                return this._imeinum;
            }
            set
            {
                if ((this._imeinum != value))
                {
                    this.OnIMEINUMChanging(value);
                    this.RaiseDataMemberChanging("IMEINUM");
                    this.ValidateProperty("IMEINUM", value);
                    this._imeinum = value;
                    this.RaiseDataMemberChanged("IMEINUM");
                    this.OnIMEINUMChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LATANDLONG”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string LATANDLONG
        {
            get
            {
                return this._latandlong;
            }
            set
            {
                if ((this._latandlong != value))
                {
                    this.OnLATANDLONGChanging(value);
                    this.RaiseDataMemberChanging("LATANDLONG");
                    this.ValidateProperty("LATANDLONG", value);
                    this._latandlong = value;
                    this.RaiseDataMemberChanged("LATANDLONG");
                    this.OnLATANDLONGChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONETIME”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PHONETIME
        {
            get
            {
                return this._phonetime;
            }
            set
            {
                if ((this._phonetime != value))
                {
                    this.OnPHONETIMEChanging(value);
                    this.RaiseDataMemberChanging("PHONETIME");
                    this.ValidateProperty("PHONETIME", value);
                    this._phonetime = value;
                    this.RaiseDataMemberChanged("PHONETIME");
                    this.OnPHONETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIGNTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> SIGNTIME
        {
            get
            {
                return this._signtime;
            }
            set
            {
                if ((this._signtime != value))
                {
                    this.OnSIGNTIMEChanging(value);
                    this.RaiseDataMemberChanging("SIGNTIME");
                    this.ValidateProperty("SIGNTIME", value);
                    this._signtime = value;
                    this.RaiseDataMemberChanged("SIGNTIME");
                    this.OnSIGNTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “USERPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERPOSITION : Entity
    {
        
        private EntityCollection<USERONDUTy> _useronduties;
        
        private decimal _userpositionid;
        
        private string _userpositionname;
        
        private EntityCollection<USER> _users;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnUSERPOSITIONIDChanging(decimal value);
        partial void OnUSERPOSITIONIDChanged();
        partial void OnUSERPOSITIONNAMEChanging(string value);
        partial void OnUSERPOSITIONNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERPOSITION"/> 类的新实例。
        /// </summary>
        public USERPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="USERONDUTy"/> 实体实例的集合。
        /// </summary>
        [Association("USERPOSITION_USERONDUTy", "USERPOSITIONID", "USERPOSITIONID")]
        [XmlIgnore()]
        public EntityCollection<USERONDUTy> USERONDUTIES
        {
            get
            {
                if ((this._useronduties == null))
                {
                    this._useronduties = new EntityCollection<USERONDUTy>(this, "USERONDUTIES", this.FilterUSERONDUTIES, this.AttachUSERONDUTIES, this.DetachUSERONDUTIES);
                }
                return this._useronduties;
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERPOSITIONID
        {
            get
            {
                return this._userpositionid;
            }
            set
            {
                if ((this._userpositionid != value))
                {
                    this.OnUSERPOSITIONIDChanging(value);
                    this.ValidateProperty("USERPOSITIONID", value);
                    this._userpositionid = value;
                    this.RaisePropertyChanged("USERPOSITIONID");
                    this.OnUSERPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPOSITIONNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string USERPOSITIONNAME
        {
            get
            {
                return this._userpositionname;
            }
            set
            {
                if ((this._userpositionname != value))
                {
                    this.OnUSERPOSITIONNAMEChanging(value);
                    this.RaiseDataMemberChanging("USERPOSITIONNAME");
                    this.ValidateProperty("USERPOSITIONNAME", value);
                    this._userpositionname = value;
                    this.RaiseDataMemberChanged("USERPOSITIONNAME");
                    this.OnUSERPOSITIONNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="USER"/> 实体实例的集合。
        /// </summary>
        [Association("USERPOSITION_USER", "USERPOSITIONID", "USERPOSITIONID")]
        [XmlIgnore()]
        public EntityCollection<USER> USERS
        {
            get
            {
                if ((this._users == null))
                {
                    this._users = new EntityCollection<USER>(this, "USERS", this.FilterUSERS, this.AttachUSERS, this.DetachUSERS);
                }
                return this._users;
            }
        }
        
        private void AttachUSERONDUTIES(USERONDUTy entity)
        {
            entity.USERPOSITION = this;
        }
        
        private void DetachUSERONDUTIES(USERONDUTy entity)
        {
            entity.USERPOSITION = null;
        }
        
        private bool FilterUSERONDUTIES(USERONDUTy entity)
        {
            return (entity.USERPOSITIONID == this.USERPOSITIONID);
        }
        
        private void AttachUSERS(USER entity)
        {
            entity.USERPOSITION = this;
        }
        
        private void DetachUSERS(USER entity)
        {
            entity.USERPOSITION = null;
        }
        
        private bool FilterUSERS(USER entity)
        {
            return (entity.USERPOSITIONID == this.USERPOSITIONID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userpositionid;
        }
    }
    
    /// <summary>
    /// “USERROLE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERROLE : Entity
    {
        
        private string _redundancy;
        
        private EntityRef<ROLE> _role;
        
        private decimal _roleid;
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnREDUNDANCYChanging(string value);
        partial void OnREDUNDANCYChanged();
        partial void OnROLEIDChanging(decimal value);
        partial void OnROLEIDChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERROLE"/> 类的新实例。
        /// </summary>
        public USERROLE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“REDUNDANCY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string REDUNDANCY
        {
            get
            {
                return this._redundancy;
            }
            set
            {
                if ((this._redundancy != value))
                {
                    this.OnREDUNDANCYChanging(value);
                    this.RaiseDataMemberChanging("REDUNDANCY");
                    this.ValidateProperty("REDUNDANCY", value);
                    this._redundancy = value;
                    this.RaiseDataMemberChanged("REDUNDANCY");
                    this.OnREDUNDANCYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ROLE"/> 实体。
        /// </summary>
        [Association("ROLE_USERROLE", "ROLEID", "ROLEID", IsForeignKey=true)]
        [XmlIgnore()]
        public ROLE ROLE
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<ROLE>(this, "ROLE", this.FilterROLE);
                }
                return this._role.Entity;
            }
            set
            {
                ROLE previous = this.ROLE;
                if ((previous != value))
                {
                    this.ValidateProperty("ROLE", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.USERROLES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ROLEID = value.ROLEID;
                    }
                    else
                    {
                        this.ROLEID = default(decimal);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.USERROLES.Add(this);
                    }
                    this.RaisePropertyChanged("ROLE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROLEID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal ROLEID
        {
            get
            {
                return this._roleid;
            }
            set
            {
                if ((this._roleid != value))
                {
                    this.OnROLEIDChanging(value);
                    this.RaiseDataMemberChanging("ROLEID");
                    this.ValidateProperty("ROLEID", value);
                    this._roleid = value;
                    this.RaiseDataMemberChanged("ROLEID");
                    this.OnROLEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_USERROLE", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.USERROLES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.USERROLES.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterROLE(ROLE entity)
        {
            return (entity.ROLEID == this.ROLEID);
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._roleid, this._userid);
        }
    }
    
    /// <summary>
    /// “USERS_DEL”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class USERS_DEL : Entity
    {
        
        private string _account;
        
        private Nullable<decimal> _categoryid;
        
        private string _password;
        
        private Nullable<decimal> _regionid;
        
        private string _rtxaccount;
        
        private Nullable<decimal> _seqno;
        
        private string _smsnumbers;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _usercategoryid;
        
        private decimal _userid;
        
        private string _username;
        
        private Nullable<decimal> _userpositionid;
        
        private string _zfzbh;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnACCOUNTChanging(string value);
        partial void OnACCOUNTChanged();
        partial void OnCATEGORYIDChanging(Nullable<decimal> value);
        partial void OnCATEGORYIDChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnREGIONIDChanging(Nullable<decimal> value);
        partial void OnREGIONIDChanged();
        partial void OnRTXACCOUNTChanging(string value);
        partial void OnRTXACCOUNTChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnSMSNUMBERSChanging(string value);
        partial void OnSMSNUMBERSChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERCATEGORYIDChanging(Nullable<decimal> value);
        partial void OnUSERCATEGORYIDChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnUSERPOSITIONIDChanging(Nullable<decimal> value);
        partial void OnUSERPOSITIONIDChanged();
        partial void OnZFZBHChanging(string value);
        partial void OnZFZBHChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="USERS_DEL"/> 类的新实例。
        /// </summary>
        public USERS_DEL()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ACCOUNT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ACCOUNT
        {
            get
            {
                return this._account;
            }
            set
            {
                if ((this._account != value))
                {
                    this.OnACCOUNTChanging(value);
                    this.RaiseDataMemberChanging("ACCOUNT");
                    this.ValidateProperty("ACCOUNT", value);
                    this._account = value;
                    this.RaiseDataMemberChanged("ACCOUNT");
                    this.OnACCOUNTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CATEGORYID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CATEGORYID
        {
            get
            {
                return this._categoryid;
            }
            set
            {
                if ((this._categoryid != value))
                {
                    this.OnCATEGORYIDChanging(value);
                    this.RaiseDataMemberChanging("CATEGORYID");
                    this.ValidateProperty("CATEGORYID", value);
                    this._categoryid = value;
                    this.RaiseDataMemberChanged("CATEGORYID");
                    this.OnCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PASSWORD”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string PASSWORD
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPASSWORDChanging(value);
                    this.RaiseDataMemberChanging("PASSWORD");
                    this.ValidateProperty("PASSWORD", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REGIONID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> REGIONID
        {
            get
            {
                return this._regionid;
            }
            set
            {
                if ((this._regionid != value))
                {
                    this.OnREGIONIDChanging(value);
                    this.RaiseDataMemberChanging("REGIONID");
                    this.ValidateProperty("REGIONID", value);
                    this._regionid = value;
                    this.RaiseDataMemberChanged("REGIONID");
                    this.OnREGIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RTXACCOUNT”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string RTXACCOUNT
        {
            get
            {
                return this._rtxaccount;
            }
            set
            {
                if ((this._rtxaccount != value))
                {
                    this.OnRTXACCOUNTChanging(value);
                    this.RaiseDataMemberChanging("RTXACCOUNT");
                    this.ValidateProperty("RTXACCOUNT", value);
                    this._rtxaccount = value;
                    this.RaiseDataMemberChanged("RTXACCOUNT");
                    this.OnRTXACCOUNTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SMSNUMBERS”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SMSNUMBERS
        {
            get
            {
                return this._smsnumbers;
            }
            set
            {
                if ((this._smsnumbers != value))
                {
                    this.OnSMSNUMBERSChanging(value);
                    this.RaiseDataMemberChanging("SMSNUMBERS");
                    this.ValidateProperty("SMSNUMBERS", value);
                    this._smsnumbers = value;
                    this.RaiseDataMemberChanged("SMSNUMBERS");
                    this.OnSMSNUMBERSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERCATEGORYID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERCATEGORYID
        {
            get
            {
                return this._usercategoryid;
            }
            set
            {
                if ((this._usercategoryid != value))
                {
                    this.OnUSERCATEGORYIDChanging(value);
                    this.RaiseDataMemberChanging("USERCATEGORYID");
                    this.ValidateProperty("USERCATEGORYID", value);
                    this._usercategoryid = value;
                    this.RaiseDataMemberChanged("USERCATEGORYID");
                    this.OnUSERCATEGORYIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaisePropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string USERNAME
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUSERNAMEChanging(value);
                    this.RaiseDataMemberChanging("USERNAME");
                    this.ValidateProperty("USERNAME", value);
                    this._username = value;
                    this.RaiseDataMemberChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPOSITIONID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERPOSITIONID
        {
            get
            {
                return this._userpositionid;
            }
            set
            {
                if ((this._userpositionid != value))
                {
                    this.OnUSERPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("USERPOSITIONID");
                    this.ValidateProperty("USERPOSITIONID", value);
                    this._userpositionid = value;
                    this.RaiseDataMemberChanged("USERPOSITIONID");
                    this.OnUSERPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFZBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ZFZBH
        {
            get
            {
                return this._zfzbh;
            }
            set
            {
                if ((this._zfzbh != value))
                {
                    this.OnZFZBHChanging(value);
                    this.RaiseDataMemberChanging("ZFZBH");
                    this.ValidateProperty("ZFZBH", value);
                    this._zfzbh = value;
                    this.RaiseDataMemberChanged("ZFZBH");
                    this.OnZFZBHChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userid;
        }
    }
    
    /// <summary>
    /// “WORKFLOWDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class WORKFLOWDEFINITION : Entity
    {
        
        private EntityCollection<ACITIVITYDEFINITION> _acitivitydefinitions;
        
        private string _wddesc;
        
        private decimal _wdid;
        
        private string _wdname;
        
        private EntityCollection<WORKFLOWINSTANCE> _workflowinstances;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnWDDESCChanging(string value);
        partial void OnWDDESCChanged();
        partial void OnWDIDChanging(decimal value);
        partial void OnWDIDChanged();
        partial void OnWDNAMEChanging(string value);
        partial void OnWDNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WORKFLOWDEFINITION"/> 类的新实例。
        /// </summary>
        public WORKFLOWDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACITIVITYDEFINITION"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWDEFINITION_ACITIVITYDEFINITION", "WDID", "WDID")]
        [XmlIgnore()]
        public EntityCollection<ACITIVITYDEFINITION> ACITIVITYDEFINITIONS
        {
            get
            {
                if ((this._acitivitydefinitions == null))
                {
                    this._acitivitydefinitions = new EntityCollection<ACITIVITYDEFINITION>(this, "ACITIVITYDEFINITIONS", this.FilterACITIVITYDEFINITIONS, this.AttachACITIVITYDEFINITIONS, this.DetachACITIVITYDEFINITIONS);
                }
                return this._acitivitydefinitions;
            }
        }
        
        /// <summary>
        /// 获取或设置“WDDESC”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string WDDESC
        {
            get
            {
                return this._wddesc;
            }
            set
            {
                if ((this._wddesc != value))
                {
                    this.OnWDDESCChanging(value);
                    this.RaiseDataMemberChanging("WDDESC");
                    this.ValidateProperty("WDDESC", value);
                    this._wddesc = value;
                    this.RaiseDataMemberChanged("WDDESC");
                    this.OnWDDESCChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaisePropertyChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WDNAME
        {
            get
            {
                return this._wdname;
            }
            set
            {
                if ((this._wdname != value))
                {
                    this.OnWDNAMEChanging(value);
                    this.RaiseDataMemberChanging("WDNAME");
                    this.ValidateProperty("WDNAME", value);
                    this._wdname = value;
                    this.RaiseDataMemberChanged("WDNAME");
                    this.OnWDNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="WORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWDEFINITION_WORKFLOWINSTANCE", "WDID", "WDID")]
        [XmlIgnore()]
        public EntityCollection<WORKFLOWINSTANCE> WORKFLOWINSTANCES
        {
            get
            {
                if ((this._workflowinstances == null))
                {
                    this._workflowinstances = new EntityCollection<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCES", this.FilterWORKFLOWINSTANCES, this.AttachWORKFLOWINSTANCES, this.DetachWORKFLOWINSTANCES);
                }
                return this._workflowinstances;
            }
        }
        
        private void AttachACITIVITYDEFINITIONS(ACITIVITYDEFINITION entity)
        {
            entity.WORKFLOWDEFINITION = this;
        }
        
        private void DetachACITIVITYDEFINITIONS(ACITIVITYDEFINITION entity)
        {
            entity.WORKFLOWDEFINITION = null;
        }
        
        private bool FilterACITIVITYDEFINITIONS(ACITIVITYDEFINITION entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        private void AttachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.WORKFLOWDEFINITION = this;
        }
        
        private void DetachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.WORKFLOWDEFINITION = null;
        }
        
        private bool FilterWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wdid;
        }
    }
    
    /// <summary>
    /// “WORKFLOWINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class WORKFLOWINSTANCE : Entity
    {
        
        private EntityCollection<ACTIVITYINSTANCE> _activityinstances;
        
        private Nullable<decimal> _casesourceid;
        
        private Nullable<DateTime> _createdtime;
        
        private EntityCollection<DOCINSTANCE> _docinstances;
        
        private Nullable<decimal> _illegalitemid;
        
        private string _parentwiid;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _userid;
        
        private Nullable<decimal> _wdid;
        
        private string _wicode;
        
        private string _wiid;
        
        private string _winame;
        
        private EntityRef<WORKFLOWDEFINITION> _workflowdefinition;
        
        private EntityCollection<WORKFLOWPEROPERTy> _workflowperoperties;
        
        private EntityRef<WORKFLOWSTATUS> _workflowstatus;
        
        private Nullable<decimal> _workflowstatusid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCASESOURCEIDChanging(Nullable<decimal> value);
        partial void OnCASESOURCEIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnILLEGALITEMIDChanging(Nullable<decimal> value);
        partial void OnILLEGALITEMIDChanged();
        partial void OnPARENTWIIDChanging(string value);
        partial void OnPARENTWIIDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();
        partial void OnWICODEChanging(string value);
        partial void OnWICODEChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnWINAMEChanging(string value);
        partial void OnWINAMEChanged();
        partial void OnWORKFLOWSTATUSIDChanging(Nullable<decimal> value);
        partial void OnWORKFLOWSTATUSIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WORKFLOWINSTANCE"/> 类的新实例。
        /// </summary>
        public WORKFLOWINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="ACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWINSTANCE_ACTIVITYINSTANCE", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<ACTIVITYINSTANCE> ACTIVITYINSTANCES
        {
            get
            {
                if ((this._activityinstances == null))
                {
                    this._activityinstances = new EntityCollection<ACTIVITYINSTANCE>(this, "ACTIVITYINSTANCES", this.FilterACTIVITYINSTANCES, this.AttachACTIVITYINSTANCES, this.DetachACTIVITYINSTANCES);
                }
                return this._activityinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“CASESOURCEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASESOURCEID
        {
            get
            {
                return this._casesourceid;
            }
            set
            {
                if ((this._casesourceid != value))
                {
                    this.OnCASESOURCEIDChanging(value);
                    this.RaiseDataMemberChanging("CASESOURCEID");
                    this.ValidateProperty("CASESOURCEID", value);
                    this._casesourceid = value;
                    this.RaiseDataMemberChanged("CASESOURCEID");
                    this.OnCASESOURCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="DOCINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWINSTANCE_DOCINSTANCE", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<DOCINSTANCE> DOCINSTANCES
        {
            get
            {
                if ((this._docinstances == null))
                {
                    this._docinstances = new EntityCollection<DOCINSTANCE>(this, "DOCINSTANCES", this.FilterDOCINSTANCES, this.AttachDOCINSTANCES, this.DetachDOCINSTANCES);
                }
                return this._docinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“ILLEGALITEMID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ILLEGALITEMID
        {
            get
            {
                return this._illegalitemid;
            }
            set
            {
                if ((this._illegalitemid != value))
                {
                    this.OnILLEGALITEMIDChanging(value);
                    this.RaiseDataMemberChanging("ILLEGALITEMID");
                    this.ValidateProperty("ILLEGALITEMID", value);
                    this._illegalitemid = value;
                    this.RaiseDataMemberChanged("ILLEGALITEMID");
                    this.OnILLEGALITEMIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTWIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PARENTWIID
        {
            get
            {
                return this._parentwiid;
            }
            set
            {
                if ((this._parentwiid != value))
                {
                    this.OnPARENTWIIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTWIID");
                    this.ValidateProperty("PARENTWIID", value);
                    this._parentwiid = value;
                    this.RaiseDataMemberChanged("PARENTWIID");
                    this.OnPARENTWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_WORKFLOWINSTANCE", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.WORKFLOWINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.WORKFLOWINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WICODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string WICODE
        {
            get
            {
                return this._wicode;
            }
            set
            {
                if ((this._wicode != value))
                {
                    this.OnWICODEChanging(value);
                    this.RaiseDataMemberChanging("WICODE");
                    this.ValidateProperty("WICODE", value);
                    this._wicode = value;
                    this.RaiseDataMemberChanged("WICODE");
                    this.OnWICODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WINAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string WINAME
        {
            get
            {
                return this._winame;
            }
            set
            {
                if ((this._winame != value))
                {
                    this.OnWINAMEChanging(value);
                    this.RaiseDataMemberChanging("WINAME");
                    this.ValidateProperty("WINAME", value);
                    this._winame = value;
                    this.RaiseDataMemberChanged("WINAME");
                    this.OnWINAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWDEFINITION"/> 实体。
        /// </summary>
        [Association("WORKFLOWDEFINITION_WORKFLOWINSTANCE", "WDID", "WDID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWDEFINITION WORKFLOWDEFINITION
        {
            get
            {
                if ((this._workflowdefinition == null))
                {
                    this._workflowdefinition = new EntityRef<WORKFLOWDEFINITION>(this, "WORKFLOWDEFINITION", this.FilterWORKFLOWDEFINITION);
                }
                return this._workflowdefinition.Entity;
            }
            set
            {
                WORKFLOWDEFINITION previous = this.WORKFLOWDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWDEFINITION", value);
                    if ((previous != null))
                    {
                        this._workflowdefinition.Entity = null;
                        previous.WORKFLOWINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WDID = value.WDID;
                    }
                    else
                    {
                        this.WDID = default(Nullable<decimal>);
                    }
                    this._workflowdefinition.Entity = value;
                    if ((value != null))
                    {
                        value.WORKFLOWINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="WORKFLOWPEROPERTy"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWINSTANCE_WORKFLOWPEROPERTy", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<WORKFLOWPEROPERTy> WORKFLOWPEROPERTIES
        {
            get
            {
                if ((this._workflowperoperties == null))
                {
                    this._workflowperoperties = new EntityCollection<WORKFLOWPEROPERTy>(this, "WORKFLOWPEROPERTIES", this.FilterWORKFLOWPEROPERTIES, this.AttachWORKFLOWPEROPERTIES, this.DetachWORKFLOWPEROPERTIES);
                }
                return this._workflowperoperties;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWSTATUS"/> 实体。
        /// </summary>
        [Association("WORKFLOWSTATUS_WORKFLOWINSTANCE", "WORKFLOWSTATUSID", "WORKFLOWSTATUSID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWSTATUS WORKFLOWSTATUS
        {
            get
            {
                if ((this._workflowstatus == null))
                {
                    this._workflowstatus = new EntityRef<WORKFLOWSTATUS>(this, "WORKFLOWSTATUS", this.FilterWORKFLOWSTATUS);
                }
                return this._workflowstatus.Entity;
            }
            set
            {
                WORKFLOWSTATUS previous = this.WORKFLOWSTATUS;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWSTATUS", value);
                    if ((previous != null))
                    {
                        this._workflowstatus.Entity = null;
                        previous.WORKFLOWINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WORKFLOWSTATUSID = value.WORKFLOWSTATUSID;
                    }
                    else
                    {
                        this.WORKFLOWSTATUSID = default(Nullable<decimal>);
                    }
                    this._workflowstatus.Entity = value;
                    if ((value != null))
                    {
                        value.WORKFLOWINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWSTATUS");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WORKFLOWSTATUSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> WORKFLOWSTATUSID
        {
            get
            {
                return this._workflowstatusid;
            }
            set
            {
                if ((this._workflowstatusid != value))
                {
                    this.OnWORKFLOWSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("WORKFLOWSTATUSID");
                    this.ValidateProperty("WORKFLOWSTATUSID", value);
                    this._workflowstatusid = value;
                    this.RaiseDataMemberChanged("WORKFLOWSTATUSID");
                    this.OnWORKFLOWSTATUSIDChanged();
                }
            }
        }
        
        private void AttachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.WORKFLOWINSTANCE = this;
        }
        
        private void DetachACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            entity.WORKFLOWINSTANCE = null;
        }
        
        private bool FilterACTIVITYINSTANCES(ACTIVITYINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private void AttachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.WORKFLOWINSTANCE = this;
        }
        
        private void DetachDOCINSTANCES(DOCINSTANCE entity)
        {
            entity.WORKFLOWINSTANCE = null;
        }
        
        private bool FilterDOCINSTANCES(DOCINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private bool FilterWORKFLOWDEFINITION(WORKFLOWDEFINITION entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        private void AttachWORKFLOWPEROPERTIES(WORKFLOWPEROPERTy entity)
        {
            entity.WORKFLOWINSTANCE = this;
        }
        
        private void DetachWORKFLOWPEROPERTIES(WORKFLOWPEROPERTy entity)
        {
            entity.WORKFLOWINSTANCE = null;
        }
        
        private bool FilterWORKFLOWPEROPERTIES(WORKFLOWPEROPERTy entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private bool FilterWORKFLOWSTATUS(WORKFLOWSTATUS entity)
        {
            return (entity.WORKFLOWSTATUSID == this.WORKFLOWSTATUSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
    
    /// <summary>
    /// “WORKFLOWPEROPERTy”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class WORKFLOWPEROPERTy : Entity
    {
        
        private string _assemblyname;
        
        private string _key;
        
        private string _typename;
        
        private string _value;
        
        private string _wiid;
        
        private EntityRef<WORKFLOWINSTANCE> _workflowinstance;
        
        private string _wpid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnASSEMBLYNAMEChanging(string value);
        partial void OnASSEMBLYNAMEChanged();
        partial void OnKEYChanging(string value);
        partial void OnKEYChanged();
        partial void OnTYPENAMEChanging(string value);
        partial void OnTYPENAMEChanged();
        partial void OnVALUEChanging(string value);
        partial void OnVALUEChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnWPIDChanging(string value);
        partial void OnWPIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WORKFLOWPEROPERTy"/> 类的新实例。
        /// </summary>
        public WORKFLOWPEROPERTy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ASSEMBLYNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ASSEMBLYNAME
        {
            get
            {
                return this._assemblyname;
            }
            set
            {
                if ((this._assemblyname != value))
                {
                    this.OnASSEMBLYNAMEChanging(value);
                    this.RaiseDataMemberChanging("ASSEMBLYNAME");
                    this.ValidateProperty("ASSEMBLYNAME", value);
                    this._assemblyname = value;
                    this.RaiseDataMemberChanged("ASSEMBLYNAME");
                    this.OnASSEMBLYNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“KEY”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string KEY
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKEYChanging(value);
                    this.RaiseDataMemberChanging("KEY");
                    this.ValidateProperty("KEY", value);
                    this._key = value;
                    this.RaiseDataMemberChanged("KEY");
                    this.OnKEYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string TYPENAME
        {
            get
            {
                return this._typename;
            }
            set
            {
                if ((this._typename != value))
                {
                    this.OnTYPENAMEChanging(value);
                    this.RaiseDataMemberChanging("TYPENAME");
                    this.ValidateProperty("TYPENAME", value);
                    this._typename = value;
                    this.RaiseDataMemberChanged("TYPENAME");
                    this.OnTYPENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“VALUE”值。
        /// </summary>
        [DataMember()]
        public string VALUE
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnVALUEChanging(value);
                    this.RaiseDataMemberChanging("VALUE");
                    this.ValidateProperty("VALUE", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("VALUE");
                    this.OnVALUEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="WORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("WORKFLOWINSTANCE_WORKFLOWPEROPERTy", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public WORKFLOWINSTANCE WORKFLOWINSTANCE
        {
            get
            {
                if ((this._workflowinstance == null))
                {
                    this._workflowinstance = new EntityRef<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCE", this.FilterWORKFLOWINSTANCE);
                }
                return this._workflowinstance.Entity;
            }
            set
            {
                WORKFLOWINSTANCE previous = this.WORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("WORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._workflowinstance.Entity = null;
                        previous.WORKFLOWPEROPERTIES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._workflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.WORKFLOWPEROPERTIES.Add(this);
                    }
                    this.RaisePropertyChanged("WORKFLOWINSTANCE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WPID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WPID
        {
            get
            {
                return this._wpid;
            }
            set
            {
                if ((this._wpid != value))
                {
                    this.OnWPIDChanging(value);
                    this.ValidateProperty("WPID", value);
                    this._wpid = value;
                    this.RaisePropertyChanged("WPID");
                    this.OnWPIDChanged();
                }
            }
        }
        
        private bool FilterWORKFLOWINSTANCE(WORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wpid;
        }
    }
    
    /// <summary>
    /// “WORKFLOWSTATUS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class WORKFLOWSTATUS : Entity
    {
        
        private EntityCollection<WORKFLOWINSTANCE> _workflowinstances;
        
        private decimal _workflowstatusid;
        
        private string _workflowstatusname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnWORKFLOWSTATUSIDChanging(decimal value);
        partial void OnWORKFLOWSTATUSIDChanged();
        partial void OnWORKFLOWSTATUSNAMEChanging(string value);
        partial void OnWORKFLOWSTATUSNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WORKFLOWSTATUS"/> 类的新实例。
        /// </summary>
        public WORKFLOWSTATUS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取关联 <see cref="WORKFLOWINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("WORKFLOWSTATUS_WORKFLOWINSTANCE", "WORKFLOWSTATUSID", "WORKFLOWSTATUSID")]
        [XmlIgnore()]
        public EntityCollection<WORKFLOWINSTANCE> WORKFLOWINSTANCES
        {
            get
            {
                if ((this._workflowinstances == null))
                {
                    this._workflowinstances = new EntityCollection<WORKFLOWINSTANCE>(this, "WORKFLOWINSTANCES", this.FilterWORKFLOWINSTANCES, this.AttachWORKFLOWINSTANCES, this.DetachWORKFLOWINSTANCES);
                }
                return this._workflowinstances;
            }
        }
        
        /// <summary>
        /// 获取或设置“WORKFLOWSTATUSID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal WORKFLOWSTATUSID
        {
            get
            {
                return this._workflowstatusid;
            }
            set
            {
                if ((this._workflowstatusid != value))
                {
                    this.OnWORKFLOWSTATUSIDChanging(value);
                    this.ValidateProperty("WORKFLOWSTATUSID", value);
                    this._workflowstatusid = value;
                    this.RaisePropertyChanged("WORKFLOWSTATUSID");
                    this.OnWORKFLOWSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WORKFLOWSTATUSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WORKFLOWSTATUSNAME
        {
            get
            {
                return this._workflowstatusname;
            }
            set
            {
                if ((this._workflowstatusname != value))
                {
                    this.OnWORKFLOWSTATUSNAMEChanging(value);
                    this.RaiseDataMemberChanging("WORKFLOWSTATUSNAME");
                    this.ValidateProperty("WORKFLOWSTATUSNAME", value);
                    this._workflowstatusname = value;
                    this.RaiseDataMemberChanged("WORKFLOWSTATUSNAME");
                    this.OnWORKFLOWSTATUSNAMEChanged();
                }
            }
        }
        
        private void AttachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.WORKFLOWSTATUS = this;
        }
        
        private void DetachWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            entity.WORKFLOWSTATUS = null;
        }
        
        private bool FilterWORKFLOWINSTANCES(WORKFLOWINSTANCE entity)
        {
            return (entity.WORKFLOWSTATUSID == this.WORKFLOWSTATUSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._workflowstatusid;
        }
    }
    
    /// <summary>
    /// “WTUSERRELATION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class WTUSERRELATION : Entity
    {
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        private string _wtunitid;
        
        private string _wtuserid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();
        partial void OnWTUNITIDChanging(string value);
        partial void OnWTUNITIDChanged();
        partial void OnWTUSERIDChanging(string value);
        partial void OnWTUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WTUSERRELATION"/> 类的新实例。
        /// </summary>
        public WTUSERRELATION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_WTUSERRELATION", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.WTUSERRELATION = null;
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.WTUSERRELATION = this;
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WTUNITID”值。
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string WTUNITID
        {
            get
            {
                return this._wtunitid;
            }
            set
            {
                if ((this._wtunitid != value))
                {
                    this.OnWTUNITIDChanging(value);
                    this.RaiseDataMemberChanging("WTUNITID");
                    this.ValidateProperty("WTUNITID", value);
                    this._wtunitid = value;
                    this.RaiseDataMemberChanged("WTUNITID");
                    this.OnWTUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WTUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string WTUSERID
        {
            get
            {
                return this._wtuserid;
            }
            set
            {
                if ((this._wtuserid != value))
                {
                    this.OnWTUSERIDChanging(value);
                    this.RaiseDataMemberChanging("WTUSERID");
                    this.ValidateProperty("WTUSERID", value);
                    this._wtuserid = value;
                    this.RaiseDataMemberChanged("WTUSERID");
                    this.OnWTUSERIDChanged();
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userid;
        }
    }
    
    /// <summary>
    /// “XCJGAREA”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XCJGAREA : Entity
    {
        
        private string _areadescription;
        
        private decimal _areaid;
        
        private string _areaname;
        
        private Nullable<decimal> _areaownertype;
        
        private string _geometry;
        
        private Nullable<decimal> _ssddid;
        
        private Nullable<decimal> _sszdid;
        
        private EntityCollection<XCJGCARTASK> _xcjgcartasks;
        
        private EntityCollection<XCJGUSERTASK> _xcjgusertasks;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAREADESCRIPTIONChanging(string value);
        partial void OnAREADESCRIPTIONChanged();
        partial void OnAREAIDChanging(decimal value);
        partial void OnAREAIDChanged();
        partial void OnAREANAMEChanging(string value);
        partial void OnAREANAMEChanged();
        partial void OnAREAOWNERTYPEChanging(Nullable<decimal> value);
        partial void OnAREAOWNERTYPEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnSSDDIDChanging(Nullable<decimal> value);
        partial void OnSSDDIDChanged();
        partial void OnSSZDIDChanging(Nullable<decimal> value);
        partial void OnSSZDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XCJGAREA"/> 类的新实例。
        /// </summary>
        public XCJGAREA()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AREADESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string AREADESCRIPTION
        {
            get
            {
                return this._areadescription;
            }
            set
            {
                if ((this._areadescription != value))
                {
                    this.OnAREADESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("AREADESCRIPTION");
                    this.ValidateProperty("AREADESCRIPTION", value);
                    this._areadescription = value;
                    this.RaiseDataMemberChanged("AREADESCRIPTION");
                    this.OnAREADESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AREAID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal AREAID
        {
            get
            {
                return this._areaid;
            }
            set
            {
                if ((this._areaid != value))
                {
                    this.OnAREAIDChanging(value);
                    this.ValidateProperty("AREAID", value);
                    this._areaid = value;
                    this.RaisePropertyChanged("AREAID");
                    this.OnAREAIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AREANAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string AREANAME
        {
            get
            {
                return this._areaname;
            }
            set
            {
                if ((this._areaname != value))
                {
                    this.OnAREANAMEChanging(value);
                    this.RaiseDataMemberChanging("AREANAME");
                    this.ValidateProperty("AREANAME", value);
                    this._areaname = value;
                    this.RaiseDataMemberChanged("AREANAME");
                    this.OnAREANAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AREAOWNERTYPE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> AREAOWNERTYPE
        {
            get
            {
                return this._areaownertype;
            }
            set
            {
                if ((this._areaownertype != value))
                {
                    this.OnAREAOWNERTYPEChanging(value);
                    this.RaiseDataMemberChanging("AREAOWNERTYPE");
                    this.ValidateProperty("AREAOWNERTYPE", value);
                    this._areaownertype = value;
                    this.RaiseDataMemberChanged("AREAOWNERTYPE");
                    this.OnAREAOWNERTYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSDDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSDDID
        {
            get
            {
                return this._ssddid;
            }
            set
            {
                if ((this._ssddid != value))
                {
                    this.OnSSDDIDChanging(value);
                    this.RaiseDataMemberChanging("SSDDID");
                    this.ValidateProperty("SSDDID", value);
                    this._ssddid = value;
                    this.RaiseDataMemberChanged("SSDDID");
                    this.OnSSDDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSZDID
        {
            get
            {
                return this._sszdid;
            }
            set
            {
                if ((this._sszdid != value))
                {
                    this.OnSSZDIDChanging(value);
                    this.RaiseDataMemberChanging("SSZDID");
                    this.ValidateProperty("SSZDID", value);
                    this._sszdid = value;
                    this.RaiseDataMemberChanged("SSZDID");
                    this.OnSSZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGCARTASK"/> 实体实例的集合。
        /// </summary>
        [Association("XCJGAREA_XCJGCARTASK", "AREAID", "AREAID")]
        [XmlIgnore()]
        public EntityCollection<XCJGCARTASK> XCJGCARTASKS
        {
            get
            {
                if ((this._xcjgcartasks == null))
                {
                    this._xcjgcartasks = new EntityCollection<XCJGCARTASK>(this, "XCJGCARTASKS", this.FilterXCJGCARTASKS, this.AttachXCJGCARTASKS, this.DetachXCJGCARTASKS);
                }
                return this._xcjgcartasks;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGUSERTASK"/> 实体实例的集合。
        /// </summary>
        [Association("XCJGAREA_XCJGUSERTASK", "AREAID", "AREAID")]
        [XmlIgnore()]
        public EntityCollection<XCJGUSERTASK> XCJGUSERTASKS
        {
            get
            {
                if ((this._xcjgusertasks == null))
                {
                    this._xcjgusertasks = new EntityCollection<XCJGUSERTASK>(this, "XCJGUSERTASKS", this.FilterXCJGUSERTASKS, this.AttachXCJGUSERTASKS, this.DetachXCJGUSERTASKS);
                }
                return this._xcjgusertasks;
            }
        }
        
        private void AttachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.XCJGAREA = this;
        }
        
        private void DetachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.XCJGAREA = null;
        }
        
        private bool FilterXCJGCARTASKS(XCJGCARTASK entity)
        {
            return (entity.AREAID == this.AREAID);
        }
        
        private void AttachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.XCJGAREA = this;
        }
        
        private void DetachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.XCJGAREA = null;
        }
        
        private bool FilterXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            return (entity.AREAID == this.AREAID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._areaid;
        }
    }
    
    /// <summary>
    /// “XCJGCARTASK”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XCJGCARTASK : Entity
    {
        
        private Nullable<decimal> _areaid;
        
        private decimal _carid;
        
        private Nullable<DateTime> _createdtime;
        
        private Nullable<decimal> _endhour;
        
        private Nullable<decimal> _endminute;
        
        private string _jobcontent;
        
        private Nullable<decimal> _routeid;
        
        private Nullable<decimal> _ssqjid;
        
        private Nullable<decimal> _sszdid;
        
        private Nullable<decimal> _starthour;
        
        private Nullable<decimal> _startminute;
        
        private DateTime _taskdate;
        
        private EntityRef<XCJGAREA> _xcjgarea;
        
        private EntityRef<XCJGROUTE> _xcjgroute;
        
        private EntityRef<ZFGKCAR> _zfgkcar;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAREAIDChanging(Nullable<decimal> value);
        partial void OnAREAIDChanged();
        partial void OnCARIDChanging(decimal value);
        partial void OnCARIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnENDHOURChanging(Nullable<decimal> value);
        partial void OnENDHOURChanged();
        partial void OnENDMINUTEChanging(Nullable<decimal> value);
        partial void OnENDMINUTEChanged();
        partial void OnJOBCONTENTChanging(string value);
        partial void OnJOBCONTENTChanged();
        partial void OnROUTEIDChanging(Nullable<decimal> value);
        partial void OnROUTEIDChanged();
        partial void OnSSQJIDChanging(Nullable<decimal> value);
        partial void OnSSQJIDChanged();
        partial void OnSSZDIDChanging(Nullable<decimal> value);
        partial void OnSSZDIDChanged();
        partial void OnSTARTHOURChanging(Nullable<decimal> value);
        partial void OnSTARTHOURChanged();
        partial void OnSTARTMINUTEChanging(Nullable<decimal> value);
        partial void OnSTARTMINUTEChanged();
        partial void OnTASKDATEChanging(DateTime value);
        partial void OnTASKDATEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XCJGCARTASK"/> 类的新实例。
        /// </summary>
        public XCJGCARTASK()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AREAID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> AREAID
        {
            get
            {
                return this._areaid;
            }
            set
            {
                if ((this._areaid != value))
                {
                    this.OnAREAIDChanging(value);
                    this.RaiseDataMemberChanging("AREAID");
                    this.ValidateProperty("AREAID", value);
                    this._areaid = value;
                    this.RaiseDataMemberChanged("AREAID");
                    this.OnAREAIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.RaiseDataMemberChanging("CARID");
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaiseDataMemberChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDHOUR
        {
            get
            {
                return this._endhour;
            }
            set
            {
                if ((this._endhour != value))
                {
                    this.OnENDHOURChanging(value);
                    this.RaiseDataMemberChanging("ENDHOUR");
                    this.ValidateProperty("ENDHOUR", value);
                    this._endhour = value;
                    this.RaiseDataMemberChanged("ENDHOUR");
                    this.OnENDHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDMINUTE
        {
            get
            {
                return this._endminute;
            }
            set
            {
                if ((this._endminute != value))
                {
                    this.OnENDMINUTEChanging(value);
                    this.RaiseDataMemberChanging("ENDMINUTE");
                    this.ValidateProperty("ENDMINUTE", value);
                    this._endminute = value;
                    this.RaiseDataMemberChanged("ENDMINUTE");
                    this.OnENDMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JOBCONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string JOBCONTENT
        {
            get
            {
                return this._jobcontent;
            }
            set
            {
                if ((this._jobcontent != value))
                {
                    this.OnJOBCONTENTChanging(value);
                    this.RaiseDataMemberChanging("JOBCONTENT");
                    this.ValidateProperty("JOBCONTENT", value);
                    this._jobcontent = value;
                    this.RaiseDataMemberChanged("JOBCONTENT");
                    this.OnJOBCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ROUTEID
        {
            get
            {
                return this._routeid;
            }
            set
            {
                if ((this._routeid != value))
                {
                    this.OnROUTEIDChanging(value);
                    this.RaiseDataMemberChanging("ROUTEID");
                    this.ValidateProperty("ROUTEID", value);
                    this._routeid = value;
                    this.RaiseDataMemberChanged("ROUTEID");
                    this.OnROUTEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSQJID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSQJID
        {
            get
            {
                return this._ssqjid;
            }
            set
            {
                if ((this._ssqjid != value))
                {
                    this.OnSSQJIDChanging(value);
                    this.RaiseDataMemberChanging("SSQJID");
                    this.ValidateProperty("SSQJID", value);
                    this._ssqjid = value;
                    this.RaiseDataMemberChanged("SSQJID");
                    this.OnSSQJIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSZDID
        {
            get
            {
                return this._sszdid;
            }
            set
            {
                if ((this._sszdid != value))
                {
                    this.OnSSZDIDChanging(value);
                    this.RaiseDataMemberChanging("SSZDID");
                    this.ValidateProperty("SSZDID", value);
                    this._sszdid = value;
                    this.RaiseDataMemberChanged("SSZDID");
                    this.OnSSZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTHOUR
        {
            get
            {
                return this._starthour;
            }
            set
            {
                if ((this._starthour != value))
                {
                    this.OnSTARTHOURChanging(value);
                    this.RaiseDataMemberChanging("STARTHOUR");
                    this.ValidateProperty("STARTHOUR", value);
                    this._starthour = value;
                    this.RaiseDataMemberChanged("STARTHOUR");
                    this.OnSTARTHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTMINUTE
        {
            get
            {
                return this._startminute;
            }
            set
            {
                if ((this._startminute != value))
                {
                    this.OnSTARTMINUTEChanging(value);
                    this.RaiseDataMemberChanging("STARTMINUTE");
                    this.ValidateProperty("STARTMINUTE", value);
                    this._startminute = value;
                    this.RaiseDataMemberChanged("STARTMINUTE");
                    this.OnSTARTMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TASKDATE”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime TASKDATE
        {
            get
            {
                return this._taskdate;
            }
            set
            {
                if ((this._taskdate != value))
                {
                    this.OnTASKDATEChanging(value);
                    this.RaiseDataMemberChanging("TASKDATE");
                    this.ValidateProperty("TASKDATE", value);
                    this._taskdate = value;
                    this.RaiseDataMemberChanged("TASKDATE");
                    this.OnTASKDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XCJGAREA"/> 实体。
        /// </summary>
        [Association("XCJGAREA_XCJGCARTASK", "AREAID", "AREAID", IsForeignKey=true)]
        [XmlIgnore()]
        public XCJGAREA XCJGAREA
        {
            get
            {
                if ((this._xcjgarea == null))
                {
                    this._xcjgarea = new EntityRef<XCJGAREA>(this, "XCJGAREA", this.FilterXCJGAREA);
                }
                return this._xcjgarea.Entity;
            }
            set
            {
                XCJGAREA previous = this.XCJGAREA;
                if ((previous != value))
                {
                    this.ValidateProperty("XCJGAREA", value);
                    if ((previous != null))
                    {
                        this._xcjgarea.Entity = null;
                        previous.XCJGCARTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AREAID = value.AREAID;
                    }
                    else
                    {
                        this.AREAID = default(Nullable<decimal>);
                    }
                    this._xcjgarea.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGCARTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("XCJGAREA");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XCJGROUTE"/> 实体。
        /// </summary>
        [Association("XCJGROUTE_XCJGCARTASK", "ROUTEID", "ROUTEID", IsForeignKey=true)]
        [XmlIgnore()]
        public XCJGROUTE XCJGROUTE
        {
            get
            {
                if ((this._xcjgroute == null))
                {
                    this._xcjgroute = new EntityRef<XCJGROUTE>(this, "XCJGROUTE", this.FilterXCJGROUTE);
                }
                return this._xcjgroute.Entity;
            }
            set
            {
                XCJGROUTE previous = this.XCJGROUTE;
                if ((previous != value))
                {
                    this.ValidateProperty("XCJGROUTE", value);
                    if ((previous != null))
                    {
                        this._xcjgroute.Entity = null;
                        previous.XCJGCARTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ROUTEID = value.ROUTEID;
                    }
                    else
                    {
                        this.ROUTEID = default(Nullable<decimal>);
                    }
                    this._xcjgroute.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGCARTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("XCJGROUTE");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFGKCAR"/> 实体。
        /// </summary>
        [Association("ZFGKCAR_XCJGCARTASK", "CARID", "CARID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFGKCAR ZFGKCAR
        {
            get
            {
                if ((this._zfgkcar == null))
                {
                    this._zfgkcar = new EntityRef<ZFGKCAR>(this, "ZFGKCAR", this.FilterZFGKCAR);
                }
                return this._zfgkcar.Entity;
            }
            set
            {
                ZFGKCAR previous = this.ZFGKCAR;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFGKCAR", value);
                    if ((previous != null))
                    {
                        this._zfgkcar.Entity = null;
                        previous.XCJGCARTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CARID = value.CARID;
                    }
                    else
                    {
                        this.CARID = default(decimal);
                    }
                    this._zfgkcar.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGCARTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("ZFGKCAR");
                }
            }
        }
        
        private bool FilterXCJGAREA(XCJGAREA entity)
        {
            return (entity.AREAID == this.AREAID);
        }
        
        private bool FilterXCJGROUTE(XCJGROUTE entity)
        {
            return (entity.ROUTEID == this.ROUTEID);
        }
        
        private bool FilterZFGKCAR(ZFGKCAR entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._carid, this._taskdate);
        }
    }
    
    /// <summary>
    /// “XCJGROUTE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XCJGROUTE : Entity
    {
        
        private string _geometry;
        
        private string _routedescription;
        
        private decimal _routeid;
        
        private string _routename;
        
        private Nullable<decimal> _routeownertype;
        
        private Nullable<decimal> _ssddid;
        
        private Nullable<decimal> _sszdid;
        
        private EntityCollection<XCJGCARTASK> _xcjgcartasks;
        
        private EntityCollection<XCJGUSERTASK> _xcjgusertasks;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnROUTEDESCRIPTIONChanging(string value);
        partial void OnROUTEDESCRIPTIONChanged();
        partial void OnROUTEIDChanging(decimal value);
        partial void OnROUTEIDChanged();
        partial void OnROUTENAMEChanging(string value);
        partial void OnROUTENAMEChanged();
        partial void OnROUTEOWNERTYPEChanging(Nullable<decimal> value);
        partial void OnROUTEOWNERTYPEChanged();
        partial void OnSSDDIDChanging(Nullable<decimal> value);
        partial void OnSSDDIDChanged();
        partial void OnSSZDIDChanging(Nullable<decimal> value);
        partial void OnSSZDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XCJGROUTE"/> 类的新实例。
        /// </summary>
        public XCJGROUTE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTEDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string ROUTEDESCRIPTION
        {
            get
            {
                return this._routedescription;
            }
            set
            {
                if ((this._routedescription != value))
                {
                    this.OnROUTEDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("ROUTEDESCRIPTION");
                    this.ValidateProperty("ROUTEDESCRIPTION", value);
                    this._routedescription = value;
                    this.RaiseDataMemberChanged("ROUTEDESCRIPTION");
                    this.OnROUTEDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTEID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ROUTEID
        {
            get
            {
                return this._routeid;
            }
            set
            {
                if ((this._routeid != value))
                {
                    this.OnROUTEIDChanging(value);
                    this.ValidateProperty("ROUTEID", value);
                    this._routeid = value;
                    this.RaisePropertyChanged("ROUTEID");
                    this.OnROUTEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ROUTENAME
        {
            get
            {
                return this._routename;
            }
            set
            {
                if ((this._routename != value))
                {
                    this.OnROUTENAMEChanging(value);
                    this.RaiseDataMemberChanging("ROUTENAME");
                    this.ValidateProperty("ROUTENAME", value);
                    this._routename = value;
                    this.RaiseDataMemberChanged("ROUTENAME");
                    this.OnROUTENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTEOWNERTYPE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ROUTEOWNERTYPE
        {
            get
            {
                return this._routeownertype;
            }
            set
            {
                if ((this._routeownertype != value))
                {
                    this.OnROUTEOWNERTYPEChanging(value);
                    this.RaiseDataMemberChanging("ROUTEOWNERTYPE");
                    this.ValidateProperty("ROUTEOWNERTYPE", value);
                    this._routeownertype = value;
                    this.RaiseDataMemberChanged("ROUTEOWNERTYPE");
                    this.OnROUTEOWNERTYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSDDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSDDID
        {
            get
            {
                return this._ssddid;
            }
            set
            {
                if ((this._ssddid != value))
                {
                    this.OnSSDDIDChanging(value);
                    this.RaiseDataMemberChanging("SSDDID");
                    this.ValidateProperty("SSDDID", value);
                    this._ssddid = value;
                    this.RaiseDataMemberChanged("SSDDID");
                    this.OnSSDDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSZDID
        {
            get
            {
                return this._sszdid;
            }
            set
            {
                if ((this._sszdid != value))
                {
                    this.OnSSZDIDChanging(value);
                    this.RaiseDataMemberChanging("SSZDID");
                    this.ValidateProperty("SSZDID", value);
                    this._sszdid = value;
                    this.RaiseDataMemberChanged("SSZDID");
                    this.OnSSZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGCARTASK"/> 实体实例的集合。
        /// </summary>
        [Association("XCJGROUTE_XCJGCARTASK", "ROUTEID", "ROUTEID")]
        [XmlIgnore()]
        public EntityCollection<XCJGCARTASK> XCJGCARTASKS
        {
            get
            {
                if ((this._xcjgcartasks == null))
                {
                    this._xcjgcartasks = new EntityCollection<XCJGCARTASK>(this, "XCJGCARTASKS", this.FilterXCJGCARTASKS, this.AttachXCJGCARTASKS, this.DetachXCJGCARTASKS);
                }
                return this._xcjgcartasks;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGUSERTASK"/> 实体实例的集合。
        /// </summary>
        [Association("XCJGROUTE_XCJGUSERTASK", "ROUTEID", "ROUTEID")]
        [XmlIgnore()]
        public EntityCollection<XCJGUSERTASK> XCJGUSERTASKS
        {
            get
            {
                if ((this._xcjgusertasks == null))
                {
                    this._xcjgusertasks = new EntityCollection<XCJGUSERTASK>(this, "XCJGUSERTASKS", this.FilterXCJGUSERTASKS, this.AttachXCJGUSERTASKS, this.DetachXCJGUSERTASKS);
                }
                return this._xcjgusertasks;
            }
        }
        
        private void AttachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.XCJGROUTE = this;
        }
        
        private void DetachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.XCJGROUTE = null;
        }
        
        private bool FilterXCJGCARTASKS(XCJGCARTASK entity)
        {
            return (entity.ROUTEID == this.ROUTEID);
        }
        
        private void AttachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.XCJGROUTE = this;
        }
        
        private void DetachXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            entity.XCJGROUTE = null;
        }
        
        private bool FilterXCJGUSERTASKS(XCJGUSERTASK entity)
        {
            return (entity.ROUTEID == this.ROUTEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._routeid;
        }
    }
    
    /// <summary>
    /// “XCJGSIGNIN”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XCJGSIGNIN : Entity
    {
        
        private string _addressname;
        
        private Nullable<decimal> _endhour;
        
        private Nullable<decimal> _endminute;
        
        private string _geometry;
        
        private Nullable<DateTime> _signindate;
        
        private decimal _signinid;
        
        private Nullable<decimal> _sszdid;
        
        private Nullable<decimal> _starthour;
        
        private Nullable<decimal> _startminute;
        
        private EntityRef<UNIT> _unit;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADDRESSNAMEChanging(string value);
        partial void OnADDRESSNAMEChanged();
        partial void OnENDHOURChanging(Nullable<decimal> value);
        partial void OnENDHOURChanged();
        partial void OnENDMINUTEChanging(Nullable<decimal> value);
        partial void OnENDMINUTEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnSIGNINDATEChanging(Nullable<DateTime> value);
        partial void OnSIGNINDATEChanged();
        partial void OnSIGNINIDChanging(decimal value);
        partial void OnSIGNINIDChanged();
        partial void OnSSZDIDChanging(Nullable<decimal> value);
        partial void OnSSZDIDChanged();
        partial void OnSTARTHOURChanging(Nullable<decimal> value);
        partial void OnSTARTHOURChanged();
        partial void OnSTARTMINUTEChanging(Nullable<decimal> value);
        partial void OnSTARTMINUTEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XCJGSIGNIN"/> 类的新实例。
        /// </summary>
        public XCJGSIGNIN()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADDRESSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ADDRESSNAME
        {
            get
            {
                return this._addressname;
            }
            set
            {
                if ((this._addressname != value))
                {
                    this.OnADDRESSNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADDRESSNAME");
                    this.ValidateProperty("ADDRESSNAME", value);
                    this._addressname = value;
                    this.RaiseDataMemberChanged("ADDRESSNAME");
                    this.OnADDRESSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDHOUR
        {
            get
            {
                return this._endhour;
            }
            set
            {
                if ((this._endhour != value))
                {
                    this.OnENDHOURChanging(value);
                    this.RaiseDataMemberChanging("ENDHOUR");
                    this.ValidateProperty("ENDHOUR", value);
                    this._endhour = value;
                    this.RaiseDataMemberChanged("ENDHOUR");
                    this.OnENDHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDMINUTE
        {
            get
            {
                return this._endminute;
            }
            set
            {
                if ((this._endminute != value))
                {
                    this.OnENDMINUTEChanging(value);
                    this.RaiseDataMemberChanging("ENDMINUTE");
                    this.ValidateProperty("ENDMINUTE", value);
                    this._endminute = value;
                    this.RaiseDataMemberChanged("ENDMINUTE");
                    this.OnENDMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIGNINDATE”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> SIGNINDATE
        {
            get
            {
                return this._signindate;
            }
            set
            {
                if ((this._signindate != value))
                {
                    this.OnSIGNINDATEChanging(value);
                    this.RaiseDataMemberChanging("SIGNINDATE");
                    this.ValidateProperty("SIGNINDATE", value);
                    this._signindate = value;
                    this.RaiseDataMemberChanged("SIGNINDATE");
                    this.OnSIGNINDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIGNINID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SIGNINID
        {
            get
            {
                return this._signinid;
            }
            set
            {
                if ((this._signinid != value))
                {
                    this.OnSIGNINIDChanging(value);
                    this.ValidateProperty("SIGNINID", value);
                    this._signinid = value;
                    this.RaisePropertyChanged("SIGNINID");
                    this.OnSIGNINIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> SSZDID
        {
            get
            {
                return this._sszdid;
            }
            set
            {
                if ((this._sszdid != value))
                {
                    this.OnSSZDIDChanging(value);
                    this.RaiseDataMemberChanging("SSZDID");
                    this.ValidateProperty("SSZDID", value);
                    this._sszdid = value;
                    this.RaiseDataMemberChanged("SSZDID");
                    this.OnSSZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTHOUR
        {
            get
            {
                return this._starthour;
            }
            set
            {
                if ((this._starthour != value))
                {
                    this.OnSTARTHOURChanging(value);
                    this.RaiseDataMemberChanging("STARTHOUR");
                    this.ValidateProperty("STARTHOUR", value);
                    this._starthour = value;
                    this.RaiseDataMemberChanged("STARTHOUR");
                    this.OnSTARTHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTMINUTE
        {
            get
            {
                return this._startminute;
            }
            set
            {
                if ((this._startminute != value))
                {
                    this.OnSTARTMINUTEChanging(value);
                    this.RaiseDataMemberChanging("STARTMINUTE");
                    this.ValidateProperty("STARTMINUTE", value);
                    this._startminute = value;
                    this.RaiseDataMemberChanged("STARTMINUTE");
                    this.OnSTARTMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_XCJGSIGNIN", "SSZDID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.XCJGSIGNINS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SSZDID = value.UNITID;
                    }
                    else
                    {
                        this.SSZDID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGSIGNINS.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.SSZDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._signinid;
        }
    }
    
    /// <summary>
    /// “XCJGUSERTASK”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XCJGUSERTASK : Entity
    {
        
        private Nullable<decimal> _areaid;
        
        private Nullable<DateTime> _createdtime;
        
        private Nullable<decimal> _endhour;
        
        private Nullable<decimal> _endminute;
        
        private string _jobcontent;
        
        private Nullable<decimal> _routeid;
        
        private Nullable<decimal> _ssqjid;
        
        private Nullable<decimal> _sszdid;
        
        private Nullable<decimal> _starthour;
        
        private Nullable<decimal> _startminute;
        
        private DateTime _taskdate;
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        private EntityRef<XCJGAREA> _xcjgarea;
        
        private EntityRef<XCJGROUTE> _xcjgroute;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAREAIDChanging(Nullable<decimal> value);
        partial void OnAREAIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnENDHOURChanging(Nullable<decimal> value);
        partial void OnENDHOURChanged();
        partial void OnENDMINUTEChanging(Nullable<decimal> value);
        partial void OnENDMINUTEChanged();
        partial void OnJOBCONTENTChanging(string value);
        partial void OnJOBCONTENTChanged();
        partial void OnROUTEIDChanging(Nullable<decimal> value);
        partial void OnROUTEIDChanged();
        partial void OnSSQJIDChanging(Nullable<decimal> value);
        partial void OnSSQJIDChanged();
        partial void OnSSZDIDChanging(Nullable<decimal> value);
        partial void OnSSZDIDChanged();
        partial void OnSTARTHOURChanging(Nullable<decimal> value);
        partial void OnSTARTHOURChanged();
        partial void OnSTARTMINUTEChanging(Nullable<decimal> value);
        partial void OnSTARTMINUTEChanged();
        partial void OnTASKDATEChanging(DateTime value);
        partial void OnTASKDATEChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XCJGUSERTASK"/> 类的新实例。
        /// </summary>
        public XCJGUSERTASK()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AREAID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> AREAID
        {
            get
            {
                return this._areaid;
            }
            set
            {
                if ((this._areaid != value))
                {
                    this.OnAREAIDChanging(value);
                    this.RaiseDataMemberChanging("AREAID");
                    this.ValidateProperty("AREAID", value);
                    this._areaid = value;
                    this.RaiseDataMemberChanged("AREAID");
                    this.OnAREAIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDHOUR
        {
            get
            {
                return this._endhour;
            }
            set
            {
                if ((this._endhour != value))
                {
                    this.OnENDHOURChanging(value);
                    this.RaiseDataMemberChanging("ENDHOUR");
                    this.ValidateProperty("ENDHOUR", value);
                    this._endhour = value;
                    this.RaiseDataMemberChanged("ENDHOUR");
                    this.OnENDHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ENDMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ENDMINUTE
        {
            get
            {
                return this._endminute;
            }
            set
            {
                if ((this._endminute != value))
                {
                    this.OnENDMINUTEChanging(value);
                    this.RaiseDataMemberChanging("ENDMINUTE");
                    this.ValidateProperty("ENDMINUTE", value);
                    this._endminute = value;
                    this.RaiseDataMemberChanged("ENDMINUTE");
                    this.OnENDMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JOBCONTENT”值。
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string JOBCONTENT
        {
            get
            {
                return this._jobcontent;
            }
            set
            {
                if ((this._jobcontent != value))
                {
                    this.OnJOBCONTENTChanging(value);
                    this.RaiseDataMemberChanging("JOBCONTENT");
                    this.ValidateProperty("JOBCONTENT", value);
                    this._jobcontent = value;
                    this.RaiseDataMemberChanged("JOBCONTENT");
                    this.OnJOBCONTENTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ROUTEID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ROUTEID
        {
            get
            {
                return this._routeid;
            }
            set
            {
                if ((this._routeid != value))
                {
                    this.OnROUTEIDChanging(value);
                    this.RaiseDataMemberChanging("ROUTEID");
                    this.ValidateProperty("ROUTEID", value);
                    this._routeid = value;
                    this.RaiseDataMemberChanged("ROUTEID");
                    this.OnROUTEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSQJID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSQJID
        {
            get
            {
                return this._ssqjid;
            }
            set
            {
                if ((this._ssqjid != value))
                {
                    this.OnSSQJIDChanging(value);
                    this.RaiseDataMemberChanging("SSQJID");
                    this.ValidateProperty("SSQJID", value);
                    this._ssqjid = value;
                    this.RaiseDataMemberChanged("SSQJID");
                    this.OnSSQJIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SSZDID
        {
            get
            {
                return this._sszdid;
            }
            set
            {
                if ((this._sszdid != value))
                {
                    this.OnSSZDIDChanging(value);
                    this.RaiseDataMemberChanging("SSZDID");
                    this.ValidateProperty("SSZDID", value);
                    this._sszdid = value;
                    this.RaiseDataMemberChanged("SSZDID");
                    this.OnSSZDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTHOUR”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTHOUR
        {
            get
            {
                return this._starthour;
            }
            set
            {
                if ((this._starthour != value))
                {
                    this.OnSTARTHOURChanging(value);
                    this.RaiseDataMemberChanging("STARTHOUR");
                    this.ValidateProperty("STARTHOUR", value);
                    this._starthour = value;
                    this.RaiseDataMemberChanged("STARTHOUR");
                    this.OnSTARTHOURChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STARTMINUTE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STARTMINUTE
        {
            get
            {
                return this._startminute;
            }
            set
            {
                if ((this._startminute != value))
                {
                    this.OnSTARTMINUTEChanging(value);
                    this.RaiseDataMemberChanging("STARTMINUTE");
                    this.ValidateProperty("STARTMINUTE", value);
                    this._startminute = value;
                    this.RaiseDataMemberChanged("STARTMINUTE");
                    this.OnSTARTMINUTEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TASKDATE”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime TASKDATE
        {
            get
            {
                return this._taskdate;
            }
            set
            {
                if ((this._taskdate != value))
                {
                    this.OnTASKDATEChanging(value);
                    this.RaiseDataMemberChanging("TASKDATE");
                    this.ValidateProperty("TASKDATE", value);
                    this._taskdate = value;
                    this.RaiseDataMemberChanged("TASKDATE");
                    this.OnTASKDATEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_XCJGUSERTASK", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.XCJGUSERTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGUSERTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XCJGAREA"/> 实体。
        /// </summary>
        [Association("XCJGAREA_XCJGUSERTASK", "AREAID", "AREAID", IsForeignKey=true)]
        [XmlIgnore()]
        public XCJGAREA XCJGAREA
        {
            get
            {
                if ((this._xcjgarea == null))
                {
                    this._xcjgarea = new EntityRef<XCJGAREA>(this, "XCJGAREA", this.FilterXCJGAREA);
                }
                return this._xcjgarea.Entity;
            }
            set
            {
                XCJGAREA previous = this.XCJGAREA;
                if ((previous != value))
                {
                    this.ValidateProperty("XCJGAREA", value);
                    if ((previous != null))
                    {
                        this._xcjgarea.Entity = null;
                        previous.XCJGUSERTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AREAID = value.AREAID;
                    }
                    else
                    {
                        this.AREAID = default(Nullable<decimal>);
                    }
                    this._xcjgarea.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGUSERTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("XCJGAREA");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XCJGROUTE"/> 实体。
        /// </summary>
        [Association("XCJGROUTE_XCJGUSERTASK", "ROUTEID", "ROUTEID", IsForeignKey=true)]
        [XmlIgnore()]
        public XCJGROUTE XCJGROUTE
        {
            get
            {
                if ((this._xcjgroute == null))
                {
                    this._xcjgroute = new EntityRef<XCJGROUTE>(this, "XCJGROUTE", this.FilterXCJGROUTE);
                }
                return this._xcjgroute.Entity;
            }
            set
            {
                XCJGROUTE previous = this.XCJGROUTE;
                if ((previous != value))
                {
                    this.ValidateProperty("XCJGROUTE", value);
                    if ((previous != null))
                    {
                        this._xcjgroute.Entity = null;
                        previous.XCJGUSERTASKS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ROUTEID = value.ROUTEID;
                    }
                    else
                    {
                        this.ROUTEID = default(Nullable<decimal>);
                    }
                    this._xcjgroute.Entity = value;
                    if ((value != null))
                    {
                        value.XCJGUSERTASKS.Add(this);
                    }
                    this.RaisePropertyChanged("XCJGROUTE");
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        private bool FilterXCJGAREA(XCJGAREA entity)
        {
            return (entity.AREAID == this.AREAID);
        }
        
        private bool FilterXCJGROUTE(XCJGROUTE entity)
        {
            return (entity.ROUTEID == this.ROUTEID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._taskdate, this._userid);
        }
    }
    
    /// <summary>
    /// “XZSPACTDEF”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPACTDEF : Entity
    {
        
        private string _adcode;
        
        private string _addescription;
        
        private decimal _adid;
        
        private string _adname;
        
        private string _defaultpositionid;
        
        private Nullable<decimal> _nextadid;
        
        private Nullable<decimal> _seqno;
        
        private Nullable<decimal> _timelimit;
        
        private Nullable<decimal> _wdid;
        
        private EntityCollection<XZSPACTIST> _xzspactists;
        
        private EntityRef<XZSPWFDEF> _xzspwfdef;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADCODEChanging(string value);
        partial void OnADCODEChanged();
        partial void OnADDESCRIPTIONChanging(string value);
        partial void OnADDESCRIPTIONChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnADNAMEChanging(string value);
        partial void OnADNAMEChanged();
        partial void OnDEFAULTPOSITIONIDChanging(string value);
        partial void OnDEFAULTPOSITIONIDChanged();
        partial void OnNEXTADIDChanging(Nullable<decimal> value);
        partial void OnNEXTADIDChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPACTDEF"/> 类的新实例。
        /// </summary>
        public XZSPACTDEF()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADCODE
        {
            get
            {
                return this._adcode;
            }
            set
            {
                if ((this._adcode != value))
                {
                    this.OnADCODEChanging(value);
                    this.RaiseDataMemberChanging("ADCODE");
                    this.ValidateProperty("ADCODE", value);
                    this._adcode = value;
                    this.RaiseDataMemberChanged("ADCODE");
                    this.OnADCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ADDESCRIPTION
        {
            get
            {
                return this._addescription;
            }
            set
            {
                if ((this._addescription != value))
                {
                    this.OnADDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("ADDESCRIPTION");
                    this.ValidateProperty("ADDESCRIPTION", value);
                    this._addescription = value;
                    this.RaiseDataMemberChanged("ADDESCRIPTION");
                    this.OnADDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADNAME
        {
            get
            {
                return this._adname;
            }
            set
            {
                if ((this._adname != value))
                {
                    this.OnADNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADNAME");
                    this.ValidateProperty("ADNAME", value);
                    this._adname = value;
                    this.RaiseDataMemberChanged("ADNAME");
                    this.OnADNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DEFAULTPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DEFAULTPOSITIONID
        {
            get
            {
                return this._defaultpositionid;
            }
            set
            {
                if ((this._defaultpositionid != value))
                {
                    this.OnDEFAULTPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("DEFAULTPOSITIONID");
                    this.ValidateProperty("DEFAULTPOSITIONID", value);
                    this._defaultpositionid = value;
                    this.RaiseDataMemberChanged("DEFAULTPOSITIONID");
                    this.OnDEFAULTPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NEXTADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NEXTADID
        {
            get
            {
                return this._nextadid;
            }
            set
            {
                if ((this._nextadid != value))
                {
                    this.OnNEXTADIDChanging(value);
                    this.RaiseDataMemberChanging("NEXTADID");
                    this.ValidateProperty("NEXTADID", value);
                    this._nextadid = value;
                    this.RaiseDataMemberChanged("NEXTADID");
                    this.OnNEXTADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPACTIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPACTDEF_XZSPACTIST", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<XZSPACTIST> XZSPACTISTS
        {
            get
            {
                if ((this._xzspactists == null))
                {
                    this._xzspactists = new EntityCollection<XZSPACTIST>(this, "XZSPACTISTS", this.FilterXZSPACTISTS, this.AttachXZSPACTISTS, this.DetachXZSPACTISTS);
                }
                return this._xzspactists;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPWFDEF"/> 实体。
        /// </summary>
        [Association("XZSPWFDEF_XZSPACTDEF", "WDID", "WDID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPWFDEF XZSPWFDEF
        {
            get
            {
                if ((this._xzspwfdef == null))
                {
                    this._xzspwfdef = new EntityRef<XZSPWFDEF>(this, "XZSPWFDEF", this.FilterXZSPWFDEF);
                }
                return this._xzspwfdef.Entity;
            }
            set
            {
                XZSPWFDEF previous = this.XZSPWFDEF;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPWFDEF", value);
                    if ((previous != null))
                    {
                        this._xzspwfdef.Entity = null;
                        previous.XZSPACTDEFS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WDID = value.WDID;
                    }
                    else
                    {
                        this.WDID = default(Nullable<decimal>);
                    }
                    this._xzspwfdef.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPACTDEFS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPWFDEF");
                }
            }
        }
        
        private void AttachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPACTDEF = this;
        }
        
        private void DetachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPACTDEF = null;
        }
        
        private bool FilterXZSPACTISTS(XZSPACTIST entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterXZSPWFDEF(XZSPWFDEF entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “XZSPACTIST”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPACTIST : Entity
    {
        
        private string _adata;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<decimal> _apid;
        
        private Nullable<DateTime> _createdtime;
        
        private string _previonsaiid;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _timelimit;
        
        private string _todeptid;
        
        private string _topositionid;
        
        private string _touserid;
        
        private string _wiid;
        
        private EntityRef<XZSPACTDEF> _xzspactdef;
        
        private EntityRef<XZSPSTU> _xzspstu;
        
        private EntityRef<XZSPWFIST> _xzspwfist;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADATAChanging(string value);
        partial void OnADATAChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnAPIDChanging(Nullable<decimal> value);
        partial void OnAPIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnPREVIONSAIIDChanging(string value);
        partial void OnPREVIONSAIIDChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnTODEPTIDChanging(string value);
        partial void OnTODEPTIDChanged();
        partial void OnTOPOSITIONIDChanging(string value);
        partial void OnTOPOSITIONIDChanged();
        partial void OnTOUSERIDChanging(string value);
        partial void OnTOUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPACTIST"/> 类的新实例。
        /// </summary>
        public XZSPACTIST()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADATA”值。
        /// </summary>
        [DataMember()]
        public string ADATA
        {
            get
            {
                return this._adata;
            }
            set
            {
                if ((this._adata != value))
                {
                    this.OnADATAChanging(value);
                    this.RaiseDataMemberChanging("ADATA");
                    this.ValidateProperty("ADATA", value);
                    this._adata = value;
                    this.RaiseDataMemberChanged("ADATA");
                    this.OnADATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APID
        {
            get
            {
                return this._apid;
            }
            set
            {
                if ((this._apid != value))
                {
                    this.OnAPIDChanging(value);
                    this.RaiseDataMemberChanging("APID");
                    this.ValidateProperty("APID", value);
                    this._apid = value;
                    this.RaiseDataMemberChanged("APID");
                    this.OnAPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PREVIONSAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PREVIONSAIID
        {
            get
            {
                return this._previonsaiid;
            }
            set
            {
                if ((this._previonsaiid != value))
                {
                    this.OnPREVIONSAIIDChanging(value);
                    this.RaiseDataMemberChanging("PREVIONSAIID");
                    this.ValidateProperty("PREVIONSAIID", value);
                    this._previonsaiid = value;
                    this.RaiseDataMemberChanged("PREVIONSAIID");
                    this.OnPREVIONSAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TODEPTID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TODEPTID
        {
            get
            {
                return this._todeptid;
            }
            set
            {
                if ((this._todeptid != value))
                {
                    this.OnTODEPTIDChanging(value);
                    this.RaiseDataMemberChanging("TODEPTID");
                    this.ValidateProperty("TODEPTID", value);
                    this._todeptid = value;
                    this.RaiseDataMemberChanged("TODEPTID");
                    this.OnTODEPTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOPOSITIONID
        {
            get
            {
                return this._topositionid;
            }
            set
            {
                if ((this._topositionid != value))
                {
                    this.OnTOPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("TOPOSITIONID");
                    this.ValidateProperty("TOPOSITIONID", value);
                    this._topositionid = value;
                    this.RaiseDataMemberChanged("TOPOSITIONID");
                    this.OnTOPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOUSERID
        {
            get
            {
                return this._touserid;
            }
            set
            {
                if ((this._touserid != value))
                {
                    this.OnTOUSERIDChanging(value);
                    this.RaiseDataMemberChanging("TOUSERID");
                    this.ValidateProperty("TOUSERID", value);
                    this._touserid = value;
                    this.RaiseDataMemberChanged("TOUSERID");
                    this.OnTOUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPACTDEF"/> 实体。
        /// </summary>
        [Association("XZSPACTDEF_XZSPACTIST", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPACTDEF XZSPACTDEF
        {
            get
            {
                if ((this._xzspactdef == null))
                {
                    this._xzspactdef = new EntityRef<XZSPACTDEF>(this, "XZSPACTDEF", this.FilterXZSPACTDEF);
                }
                return this._xzspactdef.Entity;
            }
            set
            {
                XZSPACTDEF previous = this.XZSPACTDEF;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPACTDEF", value);
                    if ((previous != null))
                    {
                        this._xzspactdef.Entity = null;
                        previous.XZSPACTISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(Nullable<decimal>);
                    }
                    this._xzspactdef.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPACTISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPACTDEF");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPSTU"/> 实体。
        /// </summary>
        [Association("XZSPSTU_XZSPACTIST", "STATUSID", "SID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPSTU XZSPSTU
        {
            get
            {
                if ((this._xzspstu == null))
                {
                    this._xzspstu = new EntityRef<XZSPSTU>(this, "XZSPSTU", this.FilterXZSPSTU);
                }
                return this._xzspstu.Entity;
            }
            set
            {
                XZSPSTU previous = this.XZSPSTU;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPSTU", value);
                    if ((previous != null))
                    {
                        this._xzspstu.Entity = null;
                        previous.XZSPACTISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STATUSID = value.SID;
                    }
                    else
                    {
                        this.STATUSID = default(Nullable<decimal>);
                    }
                    this._xzspstu.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPACTISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPSTU");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPWFIST"/> 实体。
        /// </summary>
        [Association("XZSPWFIST_XZSPACTIST", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPWFIST XZSPWFIST
        {
            get
            {
                if ((this._xzspwfist == null))
                {
                    this._xzspwfist = new EntityRef<XZSPWFIST>(this, "XZSPWFIST", this.FilterXZSPWFIST);
                }
                return this._xzspwfist.Entity;
            }
            set
            {
                XZSPWFIST previous = this.XZSPWFIST;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPWFIST", value);
                    if ((previous != null))
                    {
                        this._xzspwfist.Entity = null;
                        previous.XZSPACTISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._xzspwfist.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPACTISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPWFIST");
                }
            }
        }
        
        private bool FilterXZSPACTDEF(XZSPACTDEF entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterXZSPSTU(XZSPSTU entity)
        {
            return (entity.SID == this.STATUSID);
        }
        
        private bool FilterXZSPWFIST(XZSPWFIST entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “XZSPACTISTS_DELETE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPACTISTS_DELETE : Entity
    {
        
        private string _adata;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<decimal> _apid;
        
        private Nullable<DateTime> _createdtime;
        
        private string _previonsaiid;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _timelimit;
        
        private string _todeptid;
        
        private string _topositionid;
        
        private string _touserid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADATAChanging(string value);
        partial void OnADATAChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnAPIDChanging(Nullable<decimal> value);
        partial void OnAPIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnPREVIONSAIIDChanging(string value);
        partial void OnPREVIONSAIIDChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnTODEPTIDChanging(string value);
        partial void OnTODEPTIDChanged();
        partial void OnTOPOSITIONIDChanging(string value);
        partial void OnTOPOSITIONIDChanged();
        partial void OnTOUSERIDChanging(string value);
        partial void OnTOUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPACTISTS_DELETE"/> 类的新实例。
        /// </summary>
        public XZSPACTISTS_DELETE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADATA”值。
        /// </summary>
        [DataMember()]
        public string ADATA
        {
            get
            {
                return this._adata;
            }
            set
            {
                if ((this._adata != value))
                {
                    this.OnADATAChanging(value);
                    this.RaiseDataMemberChanging("ADATA");
                    this.ValidateProperty("ADATA", value);
                    this._adata = value;
                    this.RaiseDataMemberChanged("ADATA");
                    this.OnADATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APID
        {
            get
            {
                return this._apid;
            }
            set
            {
                if ((this._apid != value))
                {
                    this.OnAPIDChanging(value);
                    this.RaiseDataMemberChanging("APID");
                    this.ValidateProperty("APID", value);
                    this._apid = value;
                    this.RaiseDataMemberChanged("APID");
                    this.OnAPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PREVIONSAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PREVIONSAIID
        {
            get
            {
                return this._previonsaiid;
            }
            set
            {
                if ((this._previonsaiid != value))
                {
                    this.OnPREVIONSAIIDChanging(value);
                    this.RaiseDataMemberChanging("PREVIONSAIID");
                    this.ValidateProperty("PREVIONSAIID", value);
                    this._previonsaiid = value;
                    this.RaiseDataMemberChanged("PREVIONSAIID");
                    this.OnPREVIONSAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TODEPTID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TODEPTID
        {
            get
            {
                return this._todeptid;
            }
            set
            {
                if ((this._todeptid != value))
                {
                    this.OnTODEPTIDChanging(value);
                    this.RaiseDataMemberChanging("TODEPTID");
                    this.ValidateProperty("TODEPTID", value);
                    this._todeptid = value;
                    this.RaiseDataMemberChanged("TODEPTID");
                    this.OnTODEPTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOPOSITIONID
        {
            get
            {
                return this._topositionid;
            }
            set
            {
                if ((this._topositionid != value))
                {
                    this.OnTOPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("TOPOSITIONID");
                    this.ValidateProperty("TOPOSITIONID", value);
                    this._topositionid = value;
                    this.RaiseDataMemberChanged("TOPOSITIONID");
                    this.OnTOPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOUSERID
        {
            get
            {
                return this._touserid;
            }
            set
            {
                if ((this._touserid != value))
                {
                    this.OnTOUSERIDChanging(value);
                    this.RaiseDataMemberChanging("TOUSERID");
                    this.ValidateProperty("TOUSERID", value);
                    this._touserid = value;
                    this.RaiseDataMemberChanged("TOUSERID");
                    this.OnTOUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “XZSPACTISTS_DELETE1”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPACTISTS_DELETE1 : Entity
    {
        
        private string _adata;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<decimal> _apid;
        
        private Nullable<DateTime> _createdtime;
        
        private string _previonsaiid;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _timelimit;
        
        private string _todeptid;
        
        private string _topositionid;
        
        private string _touserid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADATAChanging(string value);
        partial void OnADATAChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnAPIDChanging(Nullable<decimal> value);
        partial void OnAPIDChanged();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnPREVIONSAIIDChanging(string value);
        partial void OnPREVIONSAIIDChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnTODEPTIDChanging(string value);
        partial void OnTODEPTIDChanged();
        partial void OnTOPOSITIONIDChanging(string value);
        partial void OnTOPOSITIONIDChanged();
        partial void OnTOUSERIDChanging(string value);
        partial void OnTOUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPACTISTS_DELETE1"/> 类的新实例。
        /// </summary>
        public XZSPACTISTS_DELETE1()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADATA”值。
        /// </summary>
        [DataMember()]
        public string ADATA
        {
            get
            {
                return this._adata;
            }
            set
            {
                if ((this._adata != value))
                {
                    this.OnADATAChanging(value);
                    this.RaiseDataMemberChanging("ADATA");
                    this.ValidateProperty("ADATA", value);
                    this._adata = value;
                    this.RaiseDataMemberChanged("ADATA");
                    this.OnADATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APID
        {
            get
            {
                return this._apid;
            }
            set
            {
                if ((this._apid != value))
                {
                    this.OnAPIDChanging(value);
                    this.RaiseDataMemberChanging("APID");
                    this.ValidateProperty("APID", value);
                    this._apid = value;
                    this.RaiseDataMemberChanged("APID");
                    this.OnAPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PREVIONSAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PREVIONSAIID
        {
            get
            {
                return this._previonsaiid;
            }
            set
            {
                if ((this._previonsaiid != value))
                {
                    this.OnPREVIONSAIIDChanging(value);
                    this.RaiseDataMemberChanging("PREVIONSAIID");
                    this.ValidateProperty("PREVIONSAIID", value);
                    this._previonsaiid = value;
                    this.RaiseDataMemberChanged("PREVIONSAIID");
                    this.OnPREVIONSAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TODEPTID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TODEPTID
        {
            get
            {
                return this._todeptid;
            }
            set
            {
                if ((this._todeptid != value))
                {
                    this.OnTODEPTIDChanging(value);
                    this.RaiseDataMemberChanging("TODEPTID");
                    this.ValidateProperty("TODEPTID", value);
                    this._todeptid = value;
                    this.RaiseDataMemberChanged("TODEPTID");
                    this.OnTODEPTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOPOSITIONID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOPOSITIONID
        {
            get
            {
                return this._topositionid;
            }
            set
            {
                if ((this._topositionid != value))
                {
                    this.OnTOPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("TOPOSITIONID");
                    this.ValidateProperty("TOPOSITIONID", value);
                    this._topositionid = value;
                    this.RaiseDataMemberChanged("TOPOSITIONID");
                    this.OnTOPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TOUSERID
        {
            get
            {
                return this._touserid;
            }
            set
            {
                if ((this._touserid != value))
                {
                    this.OnTOUSERIDChanging(value);
                    this.RaiseDataMemberChanging("TOUSERID");
                    this.ValidateProperty("TOUSERID", value);
                    this._touserid = value;
                    this.RaiseDataMemberChanged("TOUSERID");
                    this.OnTOUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “XZSPACTIVITYDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPACTIVITYDEFINITION : Entity
    {
        
        private string _adcode;
        
        private string _addescription;
        
        private decimal _adid;
        
        private string _adname;
        
        private Nullable<decimal> _defaulpositionid;
        
        private Nullable<decimal> _nextadid;
        
        private decimal _seqno;
        
        private Nullable<decimal> _timelimit;
        
        private Nullable<decimal> _wdid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADCODEChanging(string value);
        partial void OnADCODEChanged();
        partial void OnADDESCRIPTIONChanging(string value);
        partial void OnADDESCRIPTIONChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnADNAMEChanging(string value);
        partial void OnADNAMEChanged();
        partial void OnDEFAULPOSITIONIDChanging(Nullable<decimal> value);
        partial void OnDEFAULPOSITIONIDChanged();
        partial void OnNEXTADIDChanging(Nullable<decimal> value);
        partial void OnNEXTADIDChanged();
        partial void OnSEQNOChanging(decimal value);
        partial void OnSEQNOChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPACTIVITYDEFINITION"/> 类的新实例。
        /// </summary>
        public XZSPACTIVITYDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ADCODE
        {
            get
            {
                return this._adcode;
            }
            set
            {
                if ((this._adcode != value))
                {
                    this.OnADCODEChanging(value);
                    this.RaiseDataMemberChanging("ADCODE");
                    this.ValidateProperty("ADCODE", value);
                    this._adcode = value;
                    this.RaiseDataMemberChanged("ADCODE");
                    this.OnADCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string ADDESCRIPTION
        {
            get
            {
                return this._addescription;
            }
            set
            {
                if ((this._addescription != value))
                {
                    this.OnADDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("ADDESCRIPTION");
                    this.ValidateProperty("ADDESCRIPTION", value);
                    this._addescription = value;
                    this.RaiseDataMemberChanged("ADDESCRIPTION");
                    this.OnADDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ADNAME
        {
            get
            {
                return this._adname;
            }
            set
            {
                if ((this._adname != value))
                {
                    this.OnADNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADNAME");
                    this.ValidateProperty("ADNAME", value);
                    this._adname = value;
                    this.RaiseDataMemberChanged("ADNAME");
                    this.OnADNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DEFAULPOSITIONID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DEFAULPOSITIONID
        {
            get
            {
                return this._defaulpositionid;
            }
            set
            {
                if ((this._defaulpositionid != value))
                {
                    this.OnDEFAULPOSITIONIDChanging(value);
                    this.RaiseDataMemberChanging("DEFAULPOSITIONID");
                    this.ValidateProperty("DEFAULPOSITIONID", value);
                    this._defaulpositionid = value;
                    this.RaiseDataMemberChanged("DEFAULPOSITIONID");
                    this.OnDEFAULPOSITIONIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NEXTADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NEXTADID
        {
            get
            {
                return this._nextadid;
            }
            set
            {
                if ((this._nextadid != value))
                {
                    this.OnNEXTADIDChanging(value);
                    this.RaiseDataMemberChanging("NEXTADID");
                    this.ValidateProperty("NEXTADID", value);
                    this._nextadid = value;
                    this.RaiseDataMemberChanged("NEXTADID");
                    this.OnNEXTADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public decimal SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “XZSPAPPROVALPROJECT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPAPPROVALPROJECT : Entity
    {
        
        private string _apdescription;
        
        private decimal _apid;
        
        private string _apname;
        
        private string _kzxx;
        
        private Nullable<decimal> _projectid;
        
        private Nullable<decimal> _wdid;
        
        private string _xchcqk;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAPDESCRIPTIONChanging(string value);
        partial void OnAPDESCRIPTIONChanged();
        partial void OnAPIDChanging(decimal value);
        partial void OnAPIDChanged();
        partial void OnAPNAMEChanging(string value);
        partial void OnAPNAMEChanged();
        partial void OnKZXXChanging(string value);
        partial void OnKZXXChanged();
        partial void OnPROJECTIDChanging(Nullable<decimal> value);
        partial void OnPROJECTIDChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();
        partial void OnXCHCQKChanging(string value);
        partial void OnXCHCQKChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPAPPROVALPROJECT"/> 类的新实例。
        /// </summary>
        public XZSPAPPROVALPROJECT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“APDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string APDESCRIPTION
        {
            get
            {
                return this._apdescription;
            }
            set
            {
                if ((this._apdescription != value))
                {
                    this.OnAPDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("APDESCRIPTION");
                    this.ValidateProperty("APDESCRIPTION", value);
                    this._apdescription = value;
                    this.RaiseDataMemberChanged("APDESCRIPTION");
                    this.OnAPDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal APID
        {
            get
            {
                return this._apid;
            }
            set
            {
                if ((this._apid != value))
                {
                    this.OnAPIDChanging(value);
                    this.ValidateProperty("APID", value);
                    this._apid = value;
                    this.RaisePropertyChanged("APID");
                    this.OnAPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“APNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string APNAME
        {
            get
            {
                return this._apname;
            }
            set
            {
                if ((this._apname != value))
                {
                    this.OnAPNAMEChanging(value);
                    this.RaiseDataMemberChanging("APNAME");
                    this.ValidateProperty("APNAME", value);
                    this._apname = value;
                    this.RaiseDataMemberChanged("APNAME");
                    this.OnAPNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“KZXX”值。
        /// </summary>
        [DataMember()]
        public string KZXX
        {
            get
            {
                return this._kzxx;
            }
            set
            {
                if ((this._kzxx != value))
                {
                    this.OnKZXXChanging(value);
                    this.RaiseDataMemberChanging("KZXX");
                    this.ValidateProperty("KZXX", value);
                    this._kzxx = value;
                    this.RaiseDataMemberChanged("KZXX");
                    this.OnKZXXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PROJECTID
        {
            get
            {
                return this._projectid;
            }
            set
            {
                if ((this._projectid != value))
                {
                    this.OnPROJECTIDChanging(value);
                    this.RaiseDataMemberChanging("PROJECTID");
                    this.ValidateProperty("PROJECTID", value);
                    this._projectid = value;
                    this.RaiseDataMemberChanged("PROJECTID");
                    this.OnPROJECTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“XCHCQK”值。
        /// </summary>
        [DataMember()]
        public string XCHCQK
        {
            get
            {
                return this._xchcqk;
            }
            set
            {
                if ((this._xchcqk != value))
                {
                    this.OnXCHCQKChanging(value);
                    this.RaiseDataMemberChanging("XCHCQK");
                    this.ValidateProperty("XCHCQK", value);
                    this._xchcqk = value;
                    this.RaiseDataMemberChanged("XCHCQK");
                    this.OnXCHCQKChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._apid;
        }
    }
    
    /// <summary>
    /// “XZSPKZHC”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPKZHC : Entity
    {
        
        private Nullable<decimal> _apid;
        
        private string _hcxxmodel;
        
        private string _id;
        
        private string _kzxxmodel;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAPIDChanging(Nullable<decimal> value);
        partial void OnAPIDChanged();
        partial void OnHCXXMODELChanging(string value);
        partial void OnHCXXMODELChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnKZXXMODELChanging(string value);
        partial void OnKZXXMODELChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPKZHC"/> 类的新实例。
        /// </summary>
        public XZSPKZHC()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“APID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> APID
        {
            get
            {
                return this._apid;
            }
            set
            {
                if ((this._apid != value))
                {
                    this.OnAPIDChanging(value);
                    this.RaiseDataMemberChanging("APID");
                    this.ValidateProperty("APID", value);
                    this._apid = value;
                    this.RaiseDataMemberChanged("APID");
                    this.OnAPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“HCXXMODEL”值。
        /// </summary>
        [DataMember()]
        public string HCXXMODEL
        {
            get
            {
                return this._hcxxmodel;
            }
            set
            {
                if ((this._hcxxmodel != value))
                {
                    this.OnHCXXMODELChanging(value);
                    this.RaiseDataMemberChanging("HCXXMODEL");
                    this.ValidateProperty("HCXXMODEL", value);
                    this._hcxxmodel = value;
                    this.RaiseDataMemberChanged("HCXXMODEL");
                    this.OnHCXXMODELChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“KZXXMODEL”值。
        /// </summary>
        [DataMember()]
        public string KZXXMODEL
        {
            get
            {
                return this._kzxxmodel;
            }
            set
            {
                if ((this._kzxxmodel != value))
                {
                    this.OnKZXXMODELChanging(value);
                    this.RaiseDataMemberChanging("KZXXMODEL");
                    this.ValidateProperty("KZXXMODEL", value);
                    this._kzxxmodel = value;
                    this.RaiseDataMemberChanged("KZXXMODEL");
                    this.OnKZXXMODELChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “XZSPNEWACTIVITYDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPNEWACTIVITYDEFINITION : Entity
    {
        
        private string _adaname;
        
        private decimal _adid;
        
        private Nullable<decimal> _nextadid;
        
        private Nullable<decimal> _seqno;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADANAMEChanging(string value);
        partial void OnADANAMEChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnNEXTADIDChanging(Nullable<decimal> value);
        partial void OnNEXTADIDChanged();
        partial void OnSEQNOChanging(Nullable<decimal> value);
        partial void OnSEQNOChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPNEWACTIVITYDEFINITION"/> 类的新实例。
        /// </summary>
        public XZSPNEWACTIVITYDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADANAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADANAME
        {
            get
            {
                return this._adaname;
            }
            set
            {
                if ((this._adaname != value))
                {
                    this.OnADANAMEChanging(value);
                    this.RaiseDataMemberChanging("ADANAME");
                    this.ValidateProperty("ADANAME", value);
                    this._adaname = value;
                    this.RaiseDataMemberChanged("ADANAME");
                    this.OnADANAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NEXTADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NEXTADID
        {
            get
            {
                return this._nextadid;
            }
            set
            {
                if ((this._nextadid != value))
                {
                    this.OnNEXTADIDChanging(value);
                    this.RaiseDataMemberChanging("NEXTADID");
                    this.ValidateProperty("NEXTADID", value);
                    this._nextadid = value;
                    this.RaiseDataMemberChanged("NEXTADID");
                    this.OnNEXTADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “XZSPNEWTAB”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPNEWTAB : Entity
    {
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private string _attachment1;
        
        private string _attachment2;
        
        private string _attachment3;
        
        private string _id;
        
        private string _pqr;
        
        private Nullable<DateTime> _pqsj;
        
        private string _pqyj;
        
        private Nullable<decimal> _pqzd;
        
        private Nullable<decimal> _stutasid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnATTACHMENT1Changing(string value);
        partial void OnATTACHMENT1Changed();
        partial void OnATTACHMENT2Changing(string value);
        partial void OnATTACHMENT2Changed();
        partial void OnATTACHMENT3Changing(string value);
        partial void OnATTACHMENT3Changed();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnPQRChanging(string value);
        partial void OnPQRChanged();
        partial void OnPQSJChanging(Nullable<DateTime> value);
        partial void OnPQSJChanged();
        partial void OnPQYJChanging(string value);
        partial void OnPQYJChanged();
        partial void OnPQZDChanging(Nullable<decimal> value);
        partial void OnPQZDChanged();
        partial void OnSTUTASIDChanging(Nullable<decimal> value);
        partial void OnSTUTASIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPNEWTAB"/> 类的新实例。
        /// </summary>
        public XZSPNEWTAB()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.RaiseDataMemberChanging("AIID");
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaiseDataMemberChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ATTACHMENT1”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ATTACHMENT1
        {
            get
            {
                return this._attachment1;
            }
            set
            {
                if ((this._attachment1 != value))
                {
                    this.OnATTACHMENT1Changing(value);
                    this.RaiseDataMemberChanging("ATTACHMENT1");
                    this.ValidateProperty("ATTACHMENT1", value);
                    this._attachment1 = value;
                    this.RaiseDataMemberChanged("ATTACHMENT1");
                    this.OnATTACHMENT1Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ATTACHMENT2”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ATTACHMENT2
        {
            get
            {
                return this._attachment2;
            }
            set
            {
                if ((this._attachment2 != value))
                {
                    this.OnATTACHMENT2Changing(value);
                    this.RaiseDataMemberChanging("ATTACHMENT2");
                    this.ValidateProperty("ATTACHMENT2", value);
                    this._attachment2 = value;
                    this.RaiseDataMemberChanged("ATTACHMENT2");
                    this.OnATTACHMENT2Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ATTACHMENT3”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ATTACHMENT3
        {
            get
            {
                return this._attachment3;
            }
            set
            {
                if ((this._attachment3 != value))
                {
                    this.OnATTACHMENT3Changing(value);
                    this.RaiseDataMemberChanging("ATTACHMENT3");
                    this.ValidateProperty("ATTACHMENT3", value);
                    this._attachment3 = value;
                    this.RaiseDataMemberChanged("ATTACHMENT3");
                    this.OnATTACHMENT3Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(100)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PQR”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PQR
        {
            get
            {
                return this._pqr;
            }
            set
            {
                if ((this._pqr != value))
                {
                    this.OnPQRChanging(value);
                    this.RaiseDataMemberChanging("PQR");
                    this.ValidateProperty("PQR", value);
                    this._pqr = value;
                    this.RaiseDataMemberChanged("PQR");
                    this.OnPQRChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PQSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PQSJ
        {
            get
            {
                return this._pqsj;
            }
            set
            {
                if ((this._pqsj != value))
                {
                    this.OnPQSJChanging(value);
                    this.RaiseDataMemberChanging("PQSJ");
                    this.ValidateProperty("PQSJ", value);
                    this._pqsj = value;
                    this.RaiseDataMemberChanged("PQSJ");
                    this.OnPQSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PQYJ”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PQYJ
        {
            get
            {
                return this._pqyj;
            }
            set
            {
                if ((this._pqyj != value))
                {
                    this.OnPQYJChanging(value);
                    this.RaiseDataMemberChanging("PQYJ");
                    this.ValidateProperty("PQYJ", value);
                    this._pqyj = value;
                    this.RaiseDataMemberChanged("PQYJ");
                    this.OnPQYJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PQZD”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PQZD
        {
            get
            {
                return this._pqzd;
            }
            set
            {
                if ((this._pqzd != value))
                {
                    this.OnPQZDChanging(value);
                    this.RaiseDataMemberChanging("PQZD");
                    this.ValidateProperty("PQZD", value);
                    this._pqzd = value;
                    this.RaiseDataMemberChanged("PQZD");
                    this.OnPQZDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STUTASID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STUTASID
        {
            get
            {
                return this._stutasid;
            }
            set
            {
                if ((this._stutasid != value))
                {
                    this.OnSTUTASIDChanging(value);
                    this.RaiseDataMemberChanging("STUTASID");
                    this.ValidateProperty("STUTASID", value);
                    this._stutasid = value;
                    this.RaiseDataMemberChanged("STUTASID");
                    this.OnSTUTASIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “XZSPNEWWORKFLOWINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPNEWWORKFLOWINSTANCE : Entity
    {
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<DateTime> _createtime;
        
        private string _eventdescription;
        
        private string _eventtitle;
        
        private Nullable<decimal> _statusid;
        
        private string _touser;
        
        private Nullable<DateTime> _updatetime;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnEVENTDESCRIPTIONChanging(string value);
        partial void OnEVENTDESCRIPTIONChanged();
        partial void OnEVENTTITLEChanging(string value);
        partial void OnEVENTTITLEChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTOUSERChanging(string value);
        partial void OnTOUSERChanged();
        partial void OnUPDATETIMEChanging(Nullable<DateTime> value);
        partial void OnUPDATETIMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPNEWWORKFLOWINSTANCE"/> 类的新实例。
        /// </summary>
        public XZSPNEWWORKFLOWINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(200)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string EVENTDESCRIPTION
        {
            get
            {
                return this._eventdescription;
            }
            set
            {
                if ((this._eventdescription != value))
                {
                    this.OnEVENTDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("EVENTDESCRIPTION");
                    this.ValidateProperty("EVENTDESCRIPTION", value);
                    this._eventdescription = value;
                    this.RaiseDataMemberChanged("EVENTDESCRIPTION");
                    this.OnEVENTDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EVENTTITLE
        {
            get
            {
                return this._eventtitle;
            }
            set
            {
                if ((this._eventtitle != value))
                {
                    this.OnEVENTTITLEChanging(value);
                    this.RaiseDataMemberChanging("EVENTTITLE");
                    this.ValidateProperty("EVENTTITLE", value);
                    this._eventtitle = value;
                    this.RaiseDataMemberChanged("EVENTTITLE");
                    this.OnEVENTTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TOUSER
        {
            get
            {
                return this._touser;
            }
            set
            {
                if ((this._touser != value))
                {
                    this.OnTOUSERChanging(value);
                    this.RaiseDataMemberChanging("TOUSER");
                    this.ValidateProperty("TOUSER", value);
                    this._touser = value;
                    this.RaiseDataMemberChanged("TOUSER");
                    this.OnTOUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UPDATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> UPDATETIME
        {
            get
            {
                return this._updatetime;
            }
            set
            {
                if ((this._updatetime != value))
                {
                    this.OnUPDATETIMEChanging(value);
                    this.RaiseDataMemberChanging("UPDATETIME");
                    this.ValidateProperty("UPDATETIME", value);
                    this._updatetime = value;
                    this.RaiseDataMemberChanged("UPDATETIME");
                    this.OnUPDATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “XZSPPROJECTNAME”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPPROJECTNAME : Entity
    {
        
        private string _description;
        
        private decimal _projectid;
        
        private string _projectname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnPROJECTIDChanging(decimal value);
        partial void OnPROJECTIDChanged();
        partial void OnPROJECTNAMEChanging(string value);
        partial void OnPROJECTNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPPROJECTNAME"/> 类的新实例。
        /// </summary>
        public XZSPPROJECTNAME()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal PROJECTID
        {
            get
            {
                return this._projectid;
            }
            set
            {
                if ((this._projectid != value))
                {
                    this.OnPROJECTIDChanging(value);
                    this.ValidateProperty("PROJECTID", value);
                    this._projectid = value;
                    this.RaisePropertyChanged("PROJECTID");
                    this.OnPROJECTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROJECTNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PROJECTNAME
        {
            get
            {
                return this._projectname;
            }
            set
            {
                if ((this._projectname != value))
                {
                    this.OnPROJECTNAMEChanging(value);
                    this.RaiseDataMemberChanging("PROJECTNAME");
                    this.ValidateProperty("PROJECTNAME", value);
                    this._projectname = value;
                    this.RaiseDataMemberChanged("PROJECTNAME");
                    this.OnPROJECTNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._projectid;
        }
    }
    
    /// <summary>
    /// “XZSPSTU”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPSTU : Entity
    {
        
        private decimal _sid;
        
        private string _wscode;
        
        private string _wsdescription;
        
        private string _wsname;
        
        private EntityCollection<XZSPACTIST> _xzspactists;
        
        private EntityCollection<XZSPWFIST> _xzspwfists;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnSIDChanging(decimal value);
        partial void OnSIDChanged();
        partial void OnWSCODEChanging(string value);
        partial void OnWSCODEChanged();
        partial void OnWSDESCRIPTIONChanging(string value);
        partial void OnWSDESCRIPTIONChanged();
        partial void OnWSNAMEChanging(string value);
        partial void OnWSNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPSTU"/> 类的新实例。
        /// </summary>
        public XZSPSTU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“SID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SID
        {
            get
            {
                return this._sid;
            }
            set
            {
                if ((this._sid != value))
                {
                    this.OnSIDChanging(value);
                    this.ValidateProperty("SID", value);
                    this._sid = value;
                    this.RaisePropertyChanged("SID");
                    this.OnSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSCODE
        {
            get
            {
                return this._wscode;
            }
            set
            {
                if ((this._wscode != value))
                {
                    this.OnWSCODEChanging(value);
                    this.RaiseDataMemberChanging("WSCODE");
                    this.ValidateProperty("WSCODE", value);
                    this._wscode = value;
                    this.RaiseDataMemberChanged("WSCODE");
                    this.OnWSCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSDESCRIPTION
        {
            get
            {
                return this._wsdescription;
            }
            set
            {
                if ((this._wsdescription != value))
                {
                    this.OnWSDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("WSDESCRIPTION");
                    this.ValidateProperty("WSDESCRIPTION", value);
                    this._wsdescription = value;
                    this.RaiseDataMemberChanged("WSDESCRIPTION");
                    this.OnWSDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSNAME
        {
            get
            {
                return this._wsname;
            }
            set
            {
                if ((this._wsname != value))
                {
                    this.OnWSNAMEChanging(value);
                    this.RaiseDataMemberChanging("WSNAME");
                    this.ValidateProperty("WSNAME", value);
                    this._wsname = value;
                    this.RaiseDataMemberChanged("WSNAME");
                    this.OnWSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPACTIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPSTU_XZSPACTIST", "SID", "STATUSID")]
        [XmlIgnore()]
        public EntityCollection<XZSPACTIST> XZSPACTISTS
        {
            get
            {
                if ((this._xzspactists == null))
                {
                    this._xzspactists = new EntityCollection<XZSPACTIST>(this, "XZSPACTISTS", this.FilterXZSPACTISTS, this.AttachXZSPACTISTS, this.DetachXZSPACTISTS);
                }
                return this._xzspactists;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPWFIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPSTU_XZSPWFIST", "SID", "STATUSID")]
        [XmlIgnore()]
        public EntityCollection<XZSPWFIST> XZSPWFISTS
        {
            get
            {
                if ((this._xzspwfists == null))
                {
                    this._xzspwfists = new EntityCollection<XZSPWFIST>(this, "XZSPWFISTS", this.FilterXZSPWFISTS, this.AttachXZSPWFISTS, this.DetachXZSPWFISTS);
                }
                return this._xzspwfists;
            }
        }
        
        private void AttachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPSTU = this;
        }
        
        private void DetachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPSTU = null;
        }
        
        private bool FilterXZSPACTISTS(XZSPACTIST entity)
        {
            return (entity.STATUSID == this.SID);
        }
        
        private void AttachXZSPWFISTS(XZSPWFIST entity)
        {
            entity.XZSPSTU = this;
        }
        
        private void DetachXZSPWFISTS(XZSPWFIST entity)
        {
            entity.XZSPSTU = null;
        }
        
        private bool FilterXZSPWFISTS(XZSPWFIST entity)
        {
            return (entity.STATUSID == this.SID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._sid;
        }
    }
    
    /// <summary>
    /// “XZSPWFDEF”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPWFDEF : Entity
    {
        
        private string _wdcode;
        
        private string _wddescription;
        
        private decimal _wdid;
        
        private string _wdname;
        
        private EntityCollection<XZSPACTDEF> _xzspactdefs;
        
        private EntityCollection<XZSPWFIST> _xzspwfists;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnWDCODEChanging(string value);
        partial void OnWDCODEChanged();
        partial void OnWDDESCRIPTIONChanging(string value);
        partial void OnWDDESCRIPTIONChanged();
        partial void OnWDIDChanging(decimal value);
        partial void OnWDIDChanged();
        partial void OnWDNAMEChanging(string value);
        partial void OnWDNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPWFDEF"/> 类的新实例。
        /// </summary>
        public XZSPWFDEF()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“WDCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WDCODE
        {
            get
            {
                return this._wdcode;
            }
            set
            {
                if ((this._wdcode != value))
                {
                    this.OnWDCODEChanging(value);
                    this.RaiseDataMemberChanging("WDCODE");
                    this.ValidateProperty("WDCODE", value);
                    this._wdcode = value;
                    this.RaiseDataMemberChanged("WDCODE");
                    this.OnWDCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WDDESCRIPTION
        {
            get
            {
                return this._wddescription;
            }
            set
            {
                if ((this._wddescription != value))
                {
                    this.OnWDDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("WDDESCRIPTION");
                    this.ValidateProperty("WDDESCRIPTION", value);
                    this._wddescription = value;
                    this.RaiseDataMemberChanged("WDDESCRIPTION");
                    this.OnWDDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaisePropertyChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WDNAME
        {
            get
            {
                return this._wdname;
            }
            set
            {
                if ((this._wdname != value))
                {
                    this.OnWDNAMEChanging(value);
                    this.RaiseDataMemberChanging("WDNAME");
                    this.ValidateProperty("WDNAME", value);
                    this._wdname = value;
                    this.RaiseDataMemberChanged("WDNAME");
                    this.OnWDNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPACTDEF"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPWFDEF_XZSPACTDEF", "WDID", "WDID")]
        [XmlIgnore()]
        public EntityCollection<XZSPACTDEF> XZSPACTDEFS
        {
            get
            {
                if ((this._xzspactdefs == null))
                {
                    this._xzspactdefs = new EntityCollection<XZSPACTDEF>(this, "XZSPACTDEFS", this.FilterXZSPACTDEFS, this.AttachXZSPACTDEFS, this.DetachXZSPACTDEFS);
                }
                return this._xzspactdefs;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPWFIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPWFDEF_XZSPWFIST", "WDID", "WDID")]
        [XmlIgnore()]
        public EntityCollection<XZSPWFIST> XZSPWFISTS
        {
            get
            {
                if ((this._xzspwfists == null))
                {
                    this._xzspwfists = new EntityCollection<XZSPWFIST>(this, "XZSPWFISTS", this.FilterXZSPWFISTS, this.AttachXZSPWFISTS, this.DetachXZSPWFISTS);
                }
                return this._xzspwfists;
            }
        }
        
        private void AttachXZSPACTDEFS(XZSPACTDEF entity)
        {
            entity.XZSPWFDEF = this;
        }
        
        private void DetachXZSPACTDEFS(XZSPACTDEF entity)
        {
            entity.XZSPWFDEF = null;
        }
        
        private bool FilterXZSPACTDEFS(XZSPACTDEF entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        private void AttachXZSPWFISTS(XZSPWFIST entity)
        {
            entity.XZSPWFDEF = this;
        }
        
        private void DetachXZSPWFISTS(XZSPWFIST entity)
        {
            entity.XZSPWFDEF = null;
        }
        
        private bool FilterXZSPWFISTS(XZSPWFIST entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wdid;
        }
    }
    
    /// <summary>
    /// “XZSPWFIST”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPWFIST : Entity
    {
        
        private Nullable<DateTime> _createdtime;
        
        private string _currentaiid;
        
        private string _dtwz;
        
        private Nullable<decimal> _statusid;
        
        private string _wdata;
        
        private Nullable<decimal> _wdid;
        
        private string _wiid;
        
        private EntityCollection<XZSPACTIST> _xzspactists;
        
        private EntityRef<XZSPSTU> _xzspstu;
        
        private EntityRef<XZSPWFDEF> _xzspwfdef;
        
        private string _xzspwsbh;
        
        private string _zfzdname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnCURRENTAIIDChanging(string value);
        partial void OnCURRENTAIIDChanged();
        partial void OnDTWZChanging(string value);
        partial void OnDTWZChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnWDATAChanging(string value);
        partial void OnWDATAChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnXZSPWSBHChanging(string value);
        partial void OnXZSPWSBHChanged();
        partial void OnZFZDNAMEChanging(string value);
        partial void OnZFZDNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPWFIST"/> 类的新实例。
        /// </summary>
        public XZSPWFIST()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CURRENTAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string CURRENTAIID
        {
            get
            {
                return this._currentaiid;
            }
            set
            {
                if ((this._currentaiid != value))
                {
                    this.OnCURRENTAIIDChanging(value);
                    this.RaiseDataMemberChanging("CURRENTAIID");
                    this.ValidateProperty("CURRENTAIID", value);
                    this._currentaiid = value;
                    this.RaiseDataMemberChanged("CURRENTAIID");
                    this.OnCURRENTAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DTWZ”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DTWZ
        {
            get
            {
                return this._dtwz;
            }
            set
            {
                if ((this._dtwz != value))
                {
                    this.OnDTWZChanging(value);
                    this.RaiseDataMemberChanging("DTWZ");
                    this.ValidateProperty("DTWZ", value);
                    this._dtwz = value;
                    this.RaiseDataMemberChanged("DTWZ");
                    this.OnDTWZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDATA”值。
        /// </summary>
        [DataMember()]
        public string WDATA
        {
            get
            {
                return this._wdata;
            }
            set
            {
                if ((this._wdata != value))
                {
                    this.OnWDATAChanging(value);
                    this.RaiseDataMemberChanging("WDATA");
                    this.ValidateProperty("WDATA", value);
                    this._wdata = value;
                    this.RaiseDataMemberChanged("WDATA");
                    this.OnWDATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZSPACTIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZSPWFIST_XZSPACTIST", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<XZSPACTIST> XZSPACTISTS
        {
            get
            {
                if ((this._xzspactists == null))
                {
                    this._xzspactists = new EntityCollection<XZSPACTIST>(this, "XZSPACTISTS", this.FilterXZSPACTISTS, this.AttachXZSPACTISTS, this.DetachXZSPACTISTS);
                }
                return this._xzspactists;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPSTU"/> 实体。
        /// </summary>
        [Association("XZSPSTU_XZSPWFIST", "STATUSID", "SID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPSTU XZSPSTU
        {
            get
            {
                if ((this._xzspstu == null))
                {
                    this._xzspstu = new EntityRef<XZSPSTU>(this, "XZSPSTU", this.FilterXZSPSTU);
                }
                return this._xzspstu.Entity;
            }
            set
            {
                XZSPSTU previous = this.XZSPSTU;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPSTU", value);
                    if ((previous != null))
                    {
                        this._xzspstu.Entity = null;
                        previous.XZSPWFISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.STATUSID = value.SID;
                    }
                    else
                    {
                        this.STATUSID = default(Nullable<decimal>);
                    }
                    this._xzspstu.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPWFISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPSTU");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZSPWFDEF"/> 实体。
        /// </summary>
        [Association("XZSPWFDEF_XZSPWFIST", "WDID", "WDID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZSPWFDEF XZSPWFDEF
        {
            get
            {
                if ((this._xzspwfdef == null))
                {
                    this._xzspwfdef = new EntityRef<XZSPWFDEF>(this, "XZSPWFDEF", this.FilterXZSPWFDEF);
                }
                return this._xzspwfdef.Entity;
            }
            set
            {
                XZSPWFDEF previous = this.XZSPWFDEF;
                if ((previous != value))
                {
                    this.ValidateProperty("XZSPWFDEF", value);
                    if ((previous != null))
                    {
                        this._xzspwfdef.Entity = null;
                        previous.XZSPWFISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WDID = value.WDID;
                    }
                    else
                    {
                        this.WDID = default(Nullable<decimal>);
                    }
                    this._xzspwfdef.Entity = value;
                    if ((value != null))
                    {
                        value.XZSPWFISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZSPWFDEF");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“XZSPWSBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string XZSPWSBH
        {
            get
            {
                return this._xzspwsbh;
            }
            set
            {
                if ((this._xzspwsbh != value))
                {
                    this.OnXZSPWSBHChanging(value);
                    this.RaiseDataMemberChanging("XZSPWSBH");
                    this.ValidateProperty("XZSPWSBH", value);
                    this._xzspwsbh = value;
                    this.RaiseDataMemberChanged("XZSPWSBH");
                    this.OnXZSPWSBHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFZDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ZFZDNAME
        {
            get
            {
                return this._zfzdname;
            }
            set
            {
                if ((this._zfzdname != value))
                {
                    this.OnZFZDNAMEChanging(value);
                    this.RaiseDataMemberChanging("ZFZDNAME");
                    this.ValidateProperty("ZFZDNAME", value);
                    this._zfzdname = value;
                    this.RaiseDataMemberChanged("ZFZDNAME");
                    this.OnZFZDNAMEChanged();
                }
            }
        }
        
        private void AttachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPWFIST = this;
        }
        
        private void DetachXZSPACTISTS(XZSPACTIST entity)
        {
            entity.XZSPWFIST = null;
        }
        
        private bool FilterXZSPACTISTS(XZSPACTIST entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private bool FilterXZSPSTU(XZSPSTU entity)
        {
            return (entity.SID == this.STATUSID);
        }
        
        private bool FilterXZSPWFDEF(XZSPWFDEF entity)
        {
            return (entity.WDID == this.WDID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
    
    /// <summary>
    /// “XZSPWFISTS_DELETE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZSPWFISTS_DELETE : Entity
    {
        
        private Nullable<DateTime> _createdtime;
        
        private string _currentaiid;
        
        private string _dtwz;
        
        private Nullable<decimal> _statusid;
        
        private string _wdata;
        
        private Nullable<decimal> _wdid;
        
        private string _wiid;
        
        private string _xzspwsbh;
        
        private string _zfzdname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATEDTIMEChanging(Nullable<DateTime> value);
        partial void OnCREATEDTIMEChanged();
        partial void OnCURRENTAIIDChanging(string value);
        partial void OnCURRENTAIIDChanged();
        partial void OnDTWZChanging(string value);
        partial void OnDTWZChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnWDATAChanging(string value);
        partial void OnWDATAChanged();
        partial void OnWDIDChanging(Nullable<decimal> value);
        partial void OnWDIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();
        partial void OnXZSPWSBHChanging(string value);
        partial void OnXZSPWSBHChanged();
        partial void OnZFZDNAMEChanging(string value);
        partial void OnZFZDNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZSPWFISTS_DELETE"/> 类的新实例。
        /// </summary>
        public XZSPWFISTS_DELETE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATEDTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATEDTIME
        {
            get
            {
                return this._createdtime;
            }
            set
            {
                if ((this._createdtime != value))
                {
                    this.OnCREATEDTIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATEDTIME");
                    this.ValidateProperty("CREATEDTIME", value);
                    this._createdtime = value;
                    this.RaiseDataMemberChanged("CREATEDTIME");
                    this.OnCREATEDTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CURRENTAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string CURRENTAIID
        {
            get
            {
                return this._currentaiid;
            }
            set
            {
                if ((this._currentaiid != value))
                {
                    this.OnCURRENTAIIDChanging(value);
                    this.RaiseDataMemberChanging("CURRENTAIID");
                    this.ValidateProperty("CURRENTAIID", value);
                    this._currentaiid = value;
                    this.RaiseDataMemberChanged("CURRENTAIID");
                    this.OnCURRENTAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DTWZ”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DTWZ
        {
            get
            {
                return this._dtwz;
            }
            set
            {
                if ((this._dtwz != value))
                {
                    this.OnDTWZChanging(value);
                    this.RaiseDataMemberChanging("DTWZ");
                    this.ValidateProperty("DTWZ", value);
                    this._dtwz = value;
                    this.RaiseDataMemberChanged("DTWZ");
                    this.OnDTWZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDATA”值。
        /// </summary>
        [DataMember()]
        public string WDATA
        {
            get
            {
                return this._wdata;
            }
            set
            {
                if ((this._wdata != value))
                {
                    this.OnWDATAChanging(value);
                    this.RaiseDataMemberChanging("WDATA");
                    this.ValidateProperty("WDATA", value);
                    this._wdata = value;
                    this.RaiseDataMemberChanged("WDATA");
                    this.OnWDATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> WDID
        {
            get
            {
                return this._wdid;
            }
            set
            {
                if ((this._wdid != value))
                {
                    this.OnWDIDChanging(value);
                    this.RaiseDataMemberChanging("WDID");
                    this.ValidateProperty("WDID", value);
                    this._wdid = value;
                    this.RaiseDataMemberChanged("WDID");
                    this.OnWDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“XZSPWSBH”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string XZSPWSBH
        {
            get
            {
                return this._xzspwsbh;
            }
            set
            {
                if ((this._xzspwsbh != value))
                {
                    this.OnXZSPWSBHChanging(value);
                    this.RaiseDataMemberChanging("XZSPWSBH");
                    this.ValidateProperty("XZSPWSBH", value);
                    this._xzspwsbh = value;
                    this.RaiseDataMemberChanged("XZSPWSBH");
                    this.OnXZSPWSBHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFZDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ZFZDNAME
        {
            get
            {
                return this._zfzdname;
            }
            set
            {
                if ((this._zfzdname != value))
                {
                    this.OnZFZDNAMEChanging(value);
                    this.RaiseDataMemberChanging("ZFZDNAME");
                    this.ValidateProperty("ZFZDNAME", value);
                    this._zfzdname = value;
                    this.RaiseDataMemberChanged("ZFZDNAME");
                    this.OnZFZDNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
    
    /// <summary>
    /// “XZZFLISTSH”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZZFLISTSH : Entity
    {
        
        private string _classid;
        
        private Nullable<DateTime> _dttime;
        
        private string _shuseer;
        
        private decimal _sid;
        
        private string _tbuser;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCLASSIDChanging(string value);
        partial void OnCLASSIDChanged();
        partial void OnDTTIMEChanging(Nullable<DateTime> value);
        partial void OnDTTIMEChanged();
        partial void OnSHUSEERChanging(string value);
        partial void OnSHUSEERChanged();
        partial void OnSIDChanging(decimal value);
        partial void OnSIDChanged();
        partial void OnTBUSERChanging(string value);
        partial void OnTBUSERChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZZFLISTSH"/> 类的新实例。
        /// </summary>
        public XZZFLISTSH()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CLASSID”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CLASSID
        {
            get
            {
                return this._classid;
            }
            set
            {
                if ((this._classid != value))
                {
                    this.OnCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSID");
                    this.ValidateProperty("CLASSID", value);
                    this._classid = value;
                    this.RaiseDataMemberChanged("CLASSID");
                    this.OnCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DTTIME
        {
            get
            {
                return this._dttime;
            }
            set
            {
                if ((this._dttime != value))
                {
                    this.OnDTTIMEChanging(value);
                    this.RaiseDataMemberChanging("DTTIME");
                    this.ValidateProperty("DTTIME", value);
                    this._dttime = value;
                    this.RaiseDataMemberChanged("DTTIME");
                    this.OnDTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHUSEER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SHUSEER
        {
            get
            {
                return this._shuseer;
            }
            set
            {
                if ((this._shuseer != value))
                {
                    this.OnSHUSEERChanging(value);
                    this.RaiseDataMemberChanging("SHUSEER");
                    this.ValidateProperty("SHUSEER", value);
                    this._shuseer = value;
                    this.RaiseDataMemberChanged("SHUSEER");
                    this.OnSHUSEERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SID
        {
            get
            {
                return this._sid;
            }
            set
            {
                if ((this._sid != value))
                {
                    this.OnSIDChanging(value);
                    this.ValidateProperty("SID", value);
                    this._sid = value;
                    this.RaisePropertyChanged("SID");
                    this.OnSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TBUSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TBUSER
        {
            get
            {
                return this._tbuser;
            }
            set
            {
                if ((this._tbuser != value))
                {
                    this.OnTBUSERChanging(value);
                    this.RaiseDataMemberChanging("TBUSER");
                    this.ValidateProperty("TBUSER", value);
                    this._tbuser = value;
                    this.RaiseDataMemberChanged("TBUSER");
                    this.OnTBUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._sid;
        }
    }
    
    /// <summary>
    /// “XZZFQUESTIONCLASS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZZFQUESTIONCLASS : Entity
    {
        
        private decimal _classid;
        
        private string _classname;
        
        private Nullable<decimal> _parentid;
        
        private decimal _typecode;
        
        private Nullable<decimal> _typeid;
        
        private EntityCollection<XZZFTABLIST> _xzzftablists;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCLASSIDChanging(decimal value);
        partial void OnCLASSIDChanged();
        partial void OnCLASSNAMEChanging(string value);
        partial void OnCLASSNAMEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnTYPECODEChanging(decimal value);
        partial void OnTYPECODEChanged();
        partial void OnTYPEIDChanging(Nullable<decimal> value);
        partial void OnTYPEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZZFQUESTIONCLASS"/> 类的新实例。
        /// </summary>
        public XZZFQUESTIONCLASS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CLASSID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CLASSID
        {
            get
            {
                return this._classid;
            }
            set
            {
                if ((this._classid != value))
                {
                    this.OnCLASSIDChanging(value);
                    this.ValidateProperty("CLASSID", value);
                    this._classid = value;
                    this.RaisePropertyChanged("CLASSID");
                    this.OnCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CLASSNAME
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    this.OnCLASSNAMEChanging(value);
                    this.RaiseDataMemberChanging("CLASSNAME");
                    this.ValidateProperty("CLASSNAME", value);
                    this._classname = value;
                    this.RaiseDataMemberChanged("CLASSNAME");
                    this.OnCLASSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPECODE”值。
        /// </summary>
        [DataMember()]
        public decimal TYPECODE
        {
            get
            {
                return this._typecode;
            }
            set
            {
                if ((this._typecode != value))
                {
                    this.OnTYPECODEChanging(value);
                    this.RaiseDataMemberChanging("TYPECODE");
                    this.ValidateProperty("TYPECODE", value);
                    this._typecode = value;
                    this.RaiseDataMemberChanged("TYPECODE");
                    this.OnTYPECODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TYPEID
        {
            get
            {
                return this._typeid;
            }
            set
            {
                if ((this._typeid != value))
                {
                    this.OnTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("TYPEID");
                    this.ValidateProperty("TYPEID", value);
                    this._typeid = value;
                    this.RaiseDataMemberChanged("TYPEID");
                    this.OnTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XZZFTABLIST"/> 实体实例的集合。
        /// </summary>
        [Association("XZZFQUESTIONCLASS_XZZFTABLIST", "CLASSID", "CLASSID")]
        [XmlIgnore()]
        public EntityCollection<XZZFTABLIST> XZZFTABLISTS
        {
            get
            {
                if ((this._xzzftablists == null))
                {
                    this._xzzftablists = new EntityCollection<XZZFTABLIST>(this, "XZZFTABLISTS", this.FilterXZZFTABLISTS, this.AttachXZZFTABLISTS, this.DetachXZZFTABLISTS);
                }
                return this._xzzftablists;
            }
        }
        
        private void AttachXZZFTABLISTS(XZZFTABLIST entity)
        {
            entity.XZZFQUESTIONCLASS = this;
        }
        
        private void DetachXZZFTABLISTS(XZZFTABLIST entity)
        {
            entity.XZZFQUESTIONCLASS = null;
        }
        
        private bool FilterXZZFTABLISTS(XZZFTABLIST entity)
        {
            return (entity.CLASSID == this.CLASSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._classid;
        }
    }
    
    /// <summary>
    /// “XZZFTABLIST”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class XZZFTABLIST : Entity
    {
        
        private Nullable<decimal> _anyother;
        
        private Nullable<decimal> _ayxcfx;
        
        private Nullable<decimal> _casebj;
        
        private Nullable<decimal> _casefaky;
        
        private Nullable<decimal> _casela;
        
        private Nullable<decimal> _casemswfcwy;
        
        private Nullable<decimal> _casemswfsdy;
        
        private Nullable<decimal> _caseother;
        
        private Nullable<decimal> _caseqzcsj;
        
        private Nullable<decimal> _casesqfyzx;
        
        private Nullable<decimal> _casezltyj;
        
        private Nullable<decimal> _casezztz;
        
        private Nullable<decimal> _classid;
        
        private Nullable<DateTime> _dttime;
        
        private decimal _id;
        
        private string _shuser;
        
        private Nullable<decimal> _simplefkj;
        
        private Nullable<decimal> _simplefky;
        
        private string _tbuser;
        
        private Nullable<decimal> _unitnameid;
        
        private EntityRef<XZZFQUESTIONCLASS> _xzzfquestionclass;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnANYOTHERChanging(Nullable<decimal> value);
        partial void OnANYOTHERChanged();
        partial void OnAYXCFXChanging(Nullable<decimal> value);
        partial void OnAYXCFXChanged();
        partial void OnCASEBJChanging(Nullable<decimal> value);
        partial void OnCASEBJChanged();
        partial void OnCASEFAKYChanging(Nullable<decimal> value);
        partial void OnCASEFAKYChanged();
        partial void OnCASELAChanging(Nullable<decimal> value);
        partial void OnCASELAChanged();
        partial void OnCASEMSWFCWYChanging(Nullable<decimal> value);
        partial void OnCASEMSWFCWYChanged();
        partial void OnCASEMSWFSDYChanging(Nullable<decimal> value);
        partial void OnCASEMSWFSDYChanged();
        partial void OnCASEOTHERChanging(Nullable<decimal> value);
        partial void OnCASEOTHERChanged();
        partial void OnCASEQZCSJChanging(Nullable<decimal> value);
        partial void OnCASEQZCSJChanged();
        partial void OnCASESQFYZXChanging(Nullable<decimal> value);
        partial void OnCASESQFYZXChanged();
        partial void OnCASEZLTYJChanging(Nullable<decimal> value);
        partial void OnCASEZLTYJChanged();
        partial void OnCASEZZTZChanging(Nullable<decimal> value);
        partial void OnCASEZZTZChanged();
        partial void OnCLASSIDChanging(Nullable<decimal> value);
        partial void OnCLASSIDChanged();
        partial void OnDTTIMEChanging(Nullable<DateTime> value);
        partial void OnDTTIMEChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnSHUSERChanging(string value);
        partial void OnSHUSERChanged();
        partial void OnSIMPLEFKJChanging(Nullable<decimal> value);
        partial void OnSIMPLEFKJChanged();
        partial void OnSIMPLEFKYChanging(Nullable<decimal> value);
        partial void OnSIMPLEFKYChanged();
        partial void OnTBUSERChanging(string value);
        partial void OnTBUSERChanged();
        partial void OnUNITNAMEIDChanging(Nullable<decimal> value);
        partial void OnUNITNAMEIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="XZZFTABLIST"/> 类的新实例。
        /// </summary>
        public XZZFTABLIST()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ANYOTHER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ANYOTHER
        {
            get
            {
                return this._anyother;
            }
            set
            {
                if ((this._anyother != value))
                {
                    this.OnANYOTHERChanging(value);
                    this.RaiseDataMemberChanging("ANYOTHER");
                    this.ValidateProperty("ANYOTHER", value);
                    this._anyother = value;
                    this.RaiseDataMemberChanged("ANYOTHER");
                    this.OnANYOTHERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AYXCFX”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> AYXCFX
        {
            get
            {
                return this._ayxcfx;
            }
            set
            {
                if ((this._ayxcfx != value))
                {
                    this.OnAYXCFXChanging(value);
                    this.RaiseDataMemberChanging("AYXCFX");
                    this.ValidateProperty("AYXCFX", value);
                    this._ayxcfx = value;
                    this.RaiseDataMemberChanged("AYXCFX");
                    this.OnAYXCFXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEBJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEBJ
        {
            get
            {
                return this._casebj;
            }
            set
            {
                if ((this._casebj != value))
                {
                    this.OnCASEBJChanging(value);
                    this.RaiseDataMemberChanging("CASEBJ");
                    this.ValidateProperty("CASEBJ", value);
                    this._casebj = value;
                    this.RaiseDataMemberChanged("CASEBJ");
                    this.OnCASEBJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEFAKY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEFAKY
        {
            get
            {
                return this._casefaky;
            }
            set
            {
                if ((this._casefaky != value))
                {
                    this.OnCASEFAKYChanging(value);
                    this.RaiseDataMemberChanging("CASEFAKY");
                    this.ValidateProperty("CASEFAKY", value);
                    this._casefaky = value;
                    this.RaiseDataMemberChanged("CASEFAKY");
                    this.OnCASEFAKYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASELA”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASELA
        {
            get
            {
                return this._casela;
            }
            set
            {
                if ((this._casela != value))
                {
                    this.OnCASELAChanging(value);
                    this.RaiseDataMemberChanging("CASELA");
                    this.ValidateProperty("CASELA", value);
                    this._casela = value;
                    this.RaiseDataMemberChanged("CASELA");
                    this.OnCASELAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEMSWFCWY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEMSWFCWY
        {
            get
            {
                return this._casemswfcwy;
            }
            set
            {
                if ((this._casemswfcwy != value))
                {
                    this.OnCASEMSWFCWYChanging(value);
                    this.RaiseDataMemberChanging("CASEMSWFCWY");
                    this.ValidateProperty("CASEMSWFCWY", value);
                    this._casemswfcwy = value;
                    this.RaiseDataMemberChanged("CASEMSWFCWY");
                    this.OnCASEMSWFCWYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEMSWFSDY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEMSWFSDY
        {
            get
            {
                return this._casemswfsdy;
            }
            set
            {
                if ((this._casemswfsdy != value))
                {
                    this.OnCASEMSWFSDYChanging(value);
                    this.RaiseDataMemberChanging("CASEMSWFSDY");
                    this.ValidateProperty("CASEMSWFSDY", value);
                    this._casemswfsdy = value;
                    this.RaiseDataMemberChanged("CASEMSWFSDY");
                    this.OnCASEMSWFSDYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEOTHER”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEOTHER
        {
            get
            {
                return this._caseother;
            }
            set
            {
                if ((this._caseother != value))
                {
                    this.OnCASEOTHERChanging(value);
                    this.RaiseDataMemberChanging("CASEOTHER");
                    this.ValidateProperty("CASEOTHER", value);
                    this._caseother = value;
                    this.RaiseDataMemberChanged("CASEOTHER");
                    this.OnCASEOTHERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEQZCSJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEQZCSJ
        {
            get
            {
                return this._caseqzcsj;
            }
            set
            {
                if ((this._caseqzcsj != value))
                {
                    this.OnCASEQZCSJChanging(value);
                    this.RaiseDataMemberChanging("CASEQZCSJ");
                    this.ValidateProperty("CASEQZCSJ", value);
                    this._caseqzcsj = value;
                    this.RaiseDataMemberChanged("CASEQZCSJ");
                    this.OnCASEQZCSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASESQFYZX”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASESQFYZX
        {
            get
            {
                return this._casesqfyzx;
            }
            set
            {
                if ((this._casesqfyzx != value))
                {
                    this.OnCASESQFYZXChanging(value);
                    this.RaiseDataMemberChanging("CASESQFYZX");
                    this.ValidateProperty("CASESQFYZX", value);
                    this._casesqfyzx = value;
                    this.RaiseDataMemberChanged("CASESQFYZX");
                    this.OnCASESQFYZXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEZLTYJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEZLTYJ
        {
            get
            {
                return this._casezltyj;
            }
            set
            {
                if ((this._casezltyj != value))
                {
                    this.OnCASEZLTYJChanging(value);
                    this.RaiseDataMemberChanging("CASEZLTYJ");
                    this.ValidateProperty("CASEZLTYJ", value);
                    this._casezltyj = value;
                    this.RaiseDataMemberChanged("CASEZLTYJ");
                    this.OnCASEZLTYJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CASEZZTZ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CASEZZTZ
        {
            get
            {
                return this._casezztz;
            }
            set
            {
                if ((this._casezztz != value))
                {
                    this.OnCASEZZTZChanging(value);
                    this.RaiseDataMemberChanging("CASEZZTZ");
                    this.ValidateProperty("CASEZZTZ", value);
                    this._casezztz = value;
                    this.RaiseDataMemberChanged("CASEZZTZ");
                    this.OnCASEZZTZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> CLASSID
        {
            get
            {
                return this._classid;
            }
            set
            {
                if ((this._classid != value))
                {
                    this.OnCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSID");
                    this.ValidateProperty("CLASSID", value);
                    this._classid = value;
                    this.RaiseDataMemberChanged("CLASSID");
                    this.OnCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DTTIME
        {
            get
            {
                return this._dttime;
            }
            set
            {
                if ((this._dttime != value))
                {
                    this.OnDTTIMEChanging(value);
                    this.RaiseDataMemberChanging("DTTIME");
                    this.ValidateProperty("DTTIME", value);
                    this._dttime = value;
                    this.RaiseDataMemberChanged("DTTIME");
                    this.OnDTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SHUSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string SHUSER
        {
            get
            {
                return this._shuser;
            }
            set
            {
                if ((this._shuser != value))
                {
                    this.OnSHUSERChanging(value);
                    this.RaiseDataMemberChanging("SHUSER");
                    this.ValidateProperty("SHUSER", value);
                    this._shuser = value;
                    this.RaiseDataMemberChanged("SHUSER");
                    this.OnSHUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIMPLEFKJ”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SIMPLEFKJ
        {
            get
            {
                return this._simplefkj;
            }
            set
            {
                if ((this._simplefkj != value))
                {
                    this.OnSIMPLEFKJChanging(value);
                    this.RaiseDataMemberChanging("SIMPLEFKJ");
                    this.ValidateProperty("SIMPLEFKJ", value);
                    this._simplefkj = value;
                    this.RaiseDataMemberChanged("SIMPLEFKJ");
                    this.OnSIMPLEFKJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SIMPLEFKY”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SIMPLEFKY
        {
            get
            {
                return this._simplefky;
            }
            set
            {
                if ((this._simplefky != value))
                {
                    this.OnSIMPLEFKYChanging(value);
                    this.RaiseDataMemberChanging("SIMPLEFKY");
                    this.ValidateProperty("SIMPLEFKY", value);
                    this._simplefky = value;
                    this.RaiseDataMemberChanged("SIMPLEFKY");
                    this.OnSIMPLEFKYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TBUSER”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TBUSER
        {
            get
            {
                return this._tbuser;
            }
            set
            {
                if ((this._tbuser != value))
                {
                    this.OnTBUSERChanging(value);
                    this.RaiseDataMemberChanging("TBUSER");
                    this.ValidateProperty("TBUSER", value);
                    this._tbuser = value;
                    this.RaiseDataMemberChanged("TBUSER");
                    this.OnTBUSERChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITNAMEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITNAMEID
        {
            get
            {
                return this._unitnameid;
            }
            set
            {
                if ((this._unitnameid != value))
                {
                    this.OnUNITNAMEIDChanging(value);
                    this.RaiseDataMemberChanging("UNITNAMEID");
                    this.ValidateProperty("UNITNAMEID", value);
                    this._unitnameid = value;
                    this.RaiseDataMemberChanged("UNITNAMEID");
                    this.OnUNITNAMEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="XZZFQUESTIONCLASS"/> 实体。
        /// </summary>
        [Association("XZZFQUESTIONCLASS_XZZFTABLIST", "CLASSID", "CLASSID", IsForeignKey=true)]
        [XmlIgnore()]
        public XZZFQUESTIONCLASS XZZFQUESTIONCLASS
        {
            get
            {
                if ((this._xzzfquestionclass == null))
                {
                    this._xzzfquestionclass = new EntityRef<XZZFQUESTIONCLASS>(this, "XZZFQUESTIONCLASS", this.FilterXZZFQUESTIONCLASS);
                }
                return this._xzzfquestionclass.Entity;
            }
            set
            {
                XZZFQUESTIONCLASS previous = this.XZZFQUESTIONCLASS;
                if ((previous != value))
                {
                    this.ValidateProperty("XZZFQUESTIONCLASS", value);
                    if ((previous != null))
                    {
                        this._xzzfquestionclass.Entity = null;
                        previous.XZZFTABLISTS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CLASSID = value.CLASSID;
                    }
                    else
                    {
                        this.CLASSID = default(Nullable<decimal>);
                    }
                    this._xzzfquestionclass.Entity = value;
                    if ((value != null))
                    {
                        value.XZZFTABLISTS.Add(this);
                    }
                    this.RaisePropertyChanged("XZZFQUESTIONCLASS");
                }
            }
        }
        
        private bool FilterXZZFQUESTIONCLASS(XZZFQUESTIONCLASS entity)
        {
            return (entity.CLASSID == this.CLASSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “ZBRZLIST”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZBRZLIST : Entity
    {
        
        private string _column1dtwz;
        
        private Nullable<DateTime> _cqdt;
        
        private string _id;
        
        private string _sbsj;
        
        private string _singqk;
        
        private string _zbry;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCOLUMN1DTWZChanging(string value);
        partial void OnCOLUMN1DTWZChanged();
        partial void OnCQDTChanging(Nullable<DateTime> value);
        partial void OnCQDTChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnSBSJChanging(string value);
        partial void OnSBSJChanged();
        partial void OnSINGQKChanging(string value);
        partial void OnSINGQKChanged();
        partial void OnZBRYChanging(string value);
        partial void OnZBRYChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZBRZLIST"/> 类的新实例。
        /// </summary>
        public ZBRZLIST()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“COLUMN1DTWZ”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string COLUMN1DTWZ
        {
            get
            {
                return this._column1dtwz;
            }
            set
            {
                if ((this._column1dtwz != value))
                {
                    this.OnCOLUMN1DTWZChanging(value);
                    this.RaiseDataMemberChanging("COLUMN1DTWZ");
                    this.ValidateProperty("COLUMN1DTWZ", value);
                    this._column1dtwz = value;
                    this.RaiseDataMemberChanged("COLUMN1DTWZ");
                    this.OnCOLUMN1DTWZChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CQDT”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CQDT
        {
            get
            {
                return this._cqdt;
            }
            set
            {
                if ((this._cqdt != value))
                {
                    this.OnCQDTChanging(value);
                    this.RaiseDataMemberChanging("CQDT");
                    this.ValidateProperty("CQDT", value);
                    this._cqdt = value;
                    this.RaiseDataMemberChanged("CQDT");
                    this.OnCQDTChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SBSJ”值。
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string SBSJ
        {
            get
            {
                return this._sbsj;
            }
            set
            {
                if ((this._sbsj != value))
                {
                    this.OnSBSJChanging(value);
                    this.RaiseDataMemberChanging("SBSJ");
                    this.ValidateProperty("SBSJ", value);
                    this._sbsj = value;
                    this.RaiseDataMemberChanged("SBSJ");
                    this.OnSBSJChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SINGQK”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string SINGQK
        {
            get
            {
                return this._singqk;
            }
            set
            {
                if ((this._singqk != value))
                {
                    this.OnSINGQKChanging(value);
                    this.RaiseDataMemberChanging("SINGQK");
                    this.ValidateProperty("SINGQK", value);
                    this._singqk = value;
                    this.RaiseDataMemberChanged("SINGQK");
                    this.OnSINGQKChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZBRY”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ZBRY
        {
            get
            {
                return this._zbry;
            }
            set
            {
                if ((this._zbry != value))
                {
                    this.OnZBRYChanging(value);
                    this.RaiseDataMemberChanging("ZBRY");
                    this.ValidateProperty("ZBRY", value);
                    this._zbry = value;
                    this.RaiseDataMemberChanged("ZBRY");
                    this.OnZBRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “ZFGKCAR”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFGKCAR : Entity
    {
        
        private decimal _carid;
        
        private string _carno;
        
        private EntityRef<UNIT> _unit;
        
        private Nullable<decimal> _unitid;
        
        private EntityCollection<XCJGCARTASK> _xcjgcartasks;
        
        private EntityCollection<ZFGKCARHISTORYPOSITION> _zfgkcarhistorypositions;
        
        private EntityRef<ZFGKCARLATESTPOSITION> _zfgkcarlatestposition;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARIDChanging(decimal value);
        partial void OnCARIDChanged();
        partial void OnCARNOChanging(string value);
        partial void OnCARNOChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFGKCAR"/> 类的新实例。
        /// </summary>
        public ZFGKCAR()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaisePropertyChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CARNO”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CARNO
        {
            get
            {
                return this._carno;
            }
            set
            {
                if ((this._carno != value))
                {
                    this.OnCARNOChanging(value);
                    this.RaiseDataMemberChanging("CARNO");
                    this.ValidateProperty("CARNO", value);
                    this._carno = value;
                    this.RaiseDataMemberChanged("CARNO");
                    this.OnCARNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="UNIT"/> 实体。
        /// </summary>
        [Association("UNIT_ZFGKCAR", "UNITID", "UNITID", IsForeignKey=true)]
        [XmlIgnore()]
        public UNIT UNIT
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<UNIT>(this, "UNIT", this.FilterUNIT);
                }
                return this._unit.Entity;
            }
            set
            {
                UNIT previous = this.UNIT;
                if ((previous != value))
                {
                    this.ValidateProperty("UNIT", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.ZFGKCARS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UNITID = value.UNITID;
                    }
                    else
                    {
                        this.UNITID = default(Nullable<decimal>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKCARS.Add(this);
                    }
                    this.RaisePropertyChanged("UNIT");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="XCJGCARTASK"/> 实体实例的集合。
        /// </summary>
        [Association("ZFGKCAR_XCJGCARTASK", "CARID", "CARID")]
        [XmlIgnore()]
        public EntityCollection<XCJGCARTASK> XCJGCARTASKS
        {
            get
            {
                if ((this._xcjgcartasks == null))
                {
                    this._xcjgcartasks = new EntityCollection<XCJGCARTASK>(this, "XCJGCARTASKS", this.FilterXCJGCARTASKS, this.AttachXCJGCARTASKS, this.DetachXCJGCARTASKS);
                }
                return this._xcjgcartasks;
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFGKCARHISTORYPOSITION"/> 实体实例的集合。
        /// </summary>
        [Association("ZFGKCAR_ZFGKCARHISTORYPOSITION", "CARID", "CARID")]
        [XmlIgnore()]
        public EntityCollection<ZFGKCARHISTORYPOSITION> ZFGKCARHISTORYPOSITIONS
        {
            get
            {
                if ((this._zfgkcarhistorypositions == null))
                {
                    this._zfgkcarhistorypositions = new EntityCollection<ZFGKCARHISTORYPOSITION>(this, "ZFGKCARHISTORYPOSITIONS", this.FilterZFGKCARHISTORYPOSITIONS, this.AttachZFGKCARHISTORYPOSITIONS, this.DetachZFGKCARHISTORYPOSITIONS);
                }
                return this._zfgkcarhistorypositions;
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFGKCARLATESTPOSITION"/> 实体。
        /// </summary>
        [Association("ZFGKCAR_ZFGKCARLATESTPOSITION", "CARID", "CARID")]
        [XmlIgnore()]
        public ZFGKCARLATESTPOSITION ZFGKCARLATESTPOSITION
        {
            get
            {
                if ((this._zfgkcarlatestposition == null))
                {
                    this._zfgkcarlatestposition = new EntityRef<ZFGKCARLATESTPOSITION>(this, "ZFGKCARLATESTPOSITION", this.FilterZFGKCARLATESTPOSITION);
                }
                return this._zfgkcarlatestposition.Entity;
            }
            set
            {
                ZFGKCARLATESTPOSITION previous = this.ZFGKCARLATESTPOSITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFGKCARLATESTPOSITION", value);
                    if ((previous != null))
                    {
                        this._zfgkcarlatestposition.Entity = null;
                        previous.ZFGKCAR = null;
                    }
                    this._zfgkcarlatestposition.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKCAR = this;
                    }
                    this.RaisePropertyChanged("ZFGKCARLATESTPOSITION");
                }
            }
        }
        
        private bool FilterUNIT(UNIT entity)
        {
            return (entity.UNITID == this.UNITID);
        }
        
        private void AttachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.ZFGKCAR = this;
        }
        
        private void DetachXCJGCARTASKS(XCJGCARTASK entity)
        {
            entity.ZFGKCAR = null;
        }
        
        private bool FilterXCJGCARTASKS(XCJGCARTASK entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        private void AttachZFGKCARHISTORYPOSITIONS(ZFGKCARHISTORYPOSITION entity)
        {
            entity.ZFGKCAR = this;
        }
        
        private void DetachZFGKCARHISTORYPOSITIONS(ZFGKCARHISTORYPOSITION entity)
        {
            entity.ZFGKCAR = null;
        }
        
        private bool FilterZFGKCARHISTORYPOSITIONS(ZFGKCARHISTORYPOSITION entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        private bool FilterZFGKCARLATESTPOSITION(ZFGKCARLATESTPOSITION entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._carid;
        }
    }
    
    /// <summary>
    /// “ZFGKCARHISTORYPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFGKCARHISTORYPOSITION : Entity
    {
        
        private decimal _carid;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private DateTime _positiontime;
        
        private EntityRef<ZFGKCAR> _zfgkcar;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARIDChanging(decimal value);
        partial void OnCARIDChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPOSITIONTIMEChanging(DateTime value);
        partial void OnPOSITIONTIMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFGKCARHISTORYPOSITION"/> 类的新实例。
        /// </summary>
        public ZFGKCARHISTORYPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.RaiseDataMemberChanging("CARID");
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaiseDataMemberChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONTIME”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime POSITIONTIME
        {
            get
            {
                return this._positiontime;
            }
            set
            {
                if ((this._positiontime != value))
                {
                    this.OnPOSITIONTIMEChanging(value);
                    this.RaiseDataMemberChanging("POSITIONTIME");
                    this.ValidateProperty("POSITIONTIME", value);
                    this._positiontime = value;
                    this.RaiseDataMemberChanged("POSITIONTIME");
                    this.OnPOSITIONTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFGKCAR"/> 实体。
        /// </summary>
        [Association("ZFGKCAR_ZFGKCARHISTORYPOSITION", "CARID", "CARID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFGKCAR ZFGKCAR
        {
            get
            {
                if ((this._zfgkcar == null))
                {
                    this._zfgkcar = new EntityRef<ZFGKCAR>(this, "ZFGKCAR", this.FilterZFGKCAR);
                }
                return this._zfgkcar.Entity;
            }
            set
            {
                ZFGKCAR previous = this.ZFGKCAR;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFGKCAR", value);
                    if ((previous != null))
                    {
                        this._zfgkcar.Entity = null;
                        previous.ZFGKCARHISTORYPOSITIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CARID = value.CARID;
                    }
                    else
                    {
                        this.CARID = default(decimal);
                    }
                    this._zfgkcar.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKCARHISTORYPOSITIONS.Add(this);
                    }
                    this.RaisePropertyChanged("ZFGKCAR");
                }
            }
        }
        
        private bool FilterZFGKCAR(ZFGKCAR entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._carid, this._positiontime);
        }
    }
    
    /// <summary>
    /// “ZFGKCARLATESTPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFGKCARLATESTPOSITION : Entity
    {
        
        private decimal _carid;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private Nullable<DateTime> _positiontime;
        
        private EntityRef<ZFGKCAR> _zfgkcar;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCARIDChanging(decimal value);
        partial void OnCARIDChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPOSITIONTIMEChanging(Nullable<DateTime> value);
        partial void OnPOSITIONTIMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFGKCARLATESTPOSITION"/> 类的新实例。
        /// </summary>
        public ZFGKCARLATESTPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CARID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal CARID
        {
            get
            {
                return this._carid;
            }
            set
            {
                if ((this._carid != value))
                {
                    this.OnCARIDChanging(value);
                    this.RaiseDataMemberChanging("CARID");
                    this.ValidateProperty("CARID", value);
                    this._carid = value;
                    this.RaiseDataMemberChanged("CARID");
                    this.OnCARIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> POSITIONTIME
        {
            get
            {
                return this._positiontime;
            }
            set
            {
                if ((this._positiontime != value))
                {
                    this.OnPOSITIONTIMEChanging(value);
                    this.RaiseDataMemberChanging("POSITIONTIME");
                    this.ValidateProperty("POSITIONTIME", value);
                    this._positiontime = value;
                    this.RaiseDataMemberChanged("POSITIONTIME");
                    this.OnPOSITIONTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFGKCAR"/> 实体。
        /// </summary>
        [Association("ZFGKCAR_ZFGKCARLATESTPOSITION", "CARID", "CARID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFGKCAR ZFGKCAR
        {
            get
            {
                if ((this._zfgkcar == null))
                {
                    this._zfgkcar = new EntityRef<ZFGKCAR>(this, "ZFGKCAR", this.FilterZFGKCAR);
                }
                return this._zfgkcar.Entity;
            }
            set
            {
                ZFGKCAR previous = this.ZFGKCAR;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFGKCAR", value);
                    if ((previous != null))
                    {
                        this._zfgkcar.Entity = null;
                        previous.ZFGKCARLATESTPOSITION = null;
                    }
                    if ((value != null))
                    {
                        this.CARID = value.CARID;
                    }
                    else
                    {
                        this.CARID = default(decimal);
                    }
                    this._zfgkcar.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKCARLATESTPOSITION = this;
                    }
                    this.RaisePropertyChanged("ZFGKCAR");
                }
            }
        }
        
        private bool FilterZFGKCAR(ZFGKCAR entity)
        {
            return (entity.CARID == this.CARID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._carid;
        }
    }
    
    /// <summary>
    /// “ZFGKUSERHISTORYPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFGKUSERHISTORYPOSITION : Entity
    {
        
        private string _imeicode;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private DateTime _positiontime;
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIMEICODEChanging(string value);
        partial void OnIMEICODEChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPOSITIONTIMEChanging(DateTime value);
        partial void OnPOSITIONTIMEChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFGKUSERHISTORYPOSITION"/> 类的新实例。
        /// </summary>
        public ZFGKUSERHISTORYPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“IMEICODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string IMEICODE
        {
            get
            {
                return this._imeicode;
            }
            set
            {
                if ((this._imeicode != value))
                {
                    this.OnIMEICODEChanging(value);
                    this.RaiseDataMemberChanging("IMEICODE");
                    this.ValidateProperty("IMEICODE", value);
                    this._imeicode = value;
                    this.RaiseDataMemberChanged("IMEICODE");
                    this.OnIMEICODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONTIME”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public DateTime POSITIONTIME
        {
            get
            {
                return this._positiontime;
            }
            set
            {
                if ((this._positiontime != value))
                {
                    this.OnPOSITIONTIMEChanging(value);
                    this.RaiseDataMemberChanging("POSITIONTIME");
                    this.ValidateProperty("POSITIONTIME", value);
                    this._positiontime = value;
                    this.RaiseDataMemberChanged("POSITIONTIME");
                    this.OnPOSITIONTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_ZFGKUSERHISTORYPOSITION", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.ZFGKUSERHISTORYPOSITIONS.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKUSERHISTORYPOSITIONS.Add(this);
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._positiontime, this._userid);
        }
    }
    
    /// <summary>
    /// “ZFGKUSERLATESTPOSITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFGKUSERLATESTPOSITION : Entity
    {
        
        private string _imeicode;
        
        private Nullable<decimal> _lat;
        
        private Nullable<decimal> _lon;
        
        private Nullable<DateTime> _positiontime;
        
        private EntityRef<USER> _user;
        
        private decimal _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIMEICODEChanging(string value);
        partial void OnIMEICODEChanged();
        partial void OnLATChanging(Nullable<decimal> value);
        partial void OnLATChanged();
        partial void OnLONChanging(Nullable<decimal> value);
        partial void OnLONChanged();
        partial void OnPOSITIONTIMEChanging(Nullable<DateTime> value);
        partial void OnPOSITIONTIMEChanged();
        partial void OnUSERIDChanging(decimal value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFGKUSERLATESTPOSITION"/> 类的新实例。
        /// </summary>
        public ZFGKUSERLATESTPOSITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“IMEICODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string IMEICODE
        {
            get
            {
                return this._imeicode;
            }
            set
            {
                if ((this._imeicode != value))
                {
                    this.OnIMEICODEChanging(value);
                    this.RaiseDataMemberChanging("IMEICODE");
                    this.ValidateProperty("IMEICODE", value);
                    this._imeicode = value;
                    this.RaiseDataMemberChanged("IMEICODE");
                    this.OnIMEICODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LAT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LAT
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLATChanging(value);
                    this.RaiseDataMemberChanging("LAT");
                    this.ValidateProperty("LAT", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("LAT");
                    this.OnLATChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LON”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LON
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLONChanging(value);
                    this.RaiseDataMemberChanging("LON");
                    this.ValidateProperty("LON", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("LON");
                    this.OnLONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“POSITIONTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> POSITIONTIME
        {
            get
            {
                return this._positiontime;
            }
            set
            {
                if ((this._positiontime != value))
                {
                    this.OnPOSITIONTIMEChanging(value);
                    this.RaiseDataMemberChanging("POSITIONTIME");
                    this.ValidateProperty("POSITIONTIME", value);
                    this._positiontime = value;
                    this.RaiseDataMemberChanged("POSITIONTIME");
                    this.OnPOSITIONTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="USER"/> 实体。
        /// </summary>
        [Association("USER_ZFGKUSERLATESTPOSITION", "USERID", "USERID", IsForeignKey=true)]
        [XmlIgnore()]
        public USER USER
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<USER>(this, "USER", this.FilterUSER);
                }
                return this._user.Entity;
            }
            set
            {
                USER previous = this.USER;
                if ((previous != value))
                {
                    this.ValidateProperty("USER", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.ZFGKUSERLATESTPOSITION = null;
                    }
                    if ((value != null))
                    {
                        this.USERID = value.USERID;
                    }
                    else
                    {
                        this.USERID = default(decimal);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.ZFGKUSERLATESTPOSITION = this;
                    }
                    this.RaisePropertyChanged("USER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public decimal USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterUSER(USER entity)
        {
            return (entity.USERID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userid;
        }
    }
    
    /// <summary>
    /// “ZFSJACTIVITYDEFINITION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJACTIVITYDEFINITION : Entity
    {
        
        private string _adcode;
        
        private string _addescription;
        
        private decimal _adid;
        
        private string _adname;
        
        private Nullable<decimal> _nextadid;
        
        private string _seqno;
        
        private Nullable<DateTime> _timelimit;
        
        private EntityCollection<ZFSJACTIVITYINSTANCE> _zfsjactivityinstances;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADCODEChanging(string value);
        partial void OnADCODEChanged();
        partial void OnADDESCRIPTIONChanging(string value);
        partial void OnADDESCRIPTIONChanged();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnADNAMEChanging(string value);
        partial void OnADNAMEChanged();
        partial void OnNEXTADIDChanging(Nullable<decimal> value);
        partial void OnNEXTADIDChanged();
        partial void OnSEQNOChanging(string value);
        partial void OnSEQNOChanged();
        partial void OnTIMELIMITChanging(Nullable<DateTime> value);
        partial void OnTIMELIMITChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJACTIVITYDEFINITION"/> 类的新实例。
        /// </summary>
        public ZFSJACTIVITYDEFINITION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADCODE
        {
            get
            {
                return this._adcode;
            }
            set
            {
                if ((this._adcode != value))
                {
                    this.OnADCODEChanging(value);
                    this.RaiseDataMemberChanging("ADCODE");
                    this.ValidateProperty("ADCODE", value);
                    this._adcode = value;
                    this.RaiseDataMemberChanged("ADCODE");
                    this.OnADCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ADDESCRIPTION
        {
            get
            {
                return this._addescription;
            }
            set
            {
                if ((this._addescription != value))
                {
                    this.OnADDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("ADDESCRIPTION");
                    this.ValidateProperty("ADDESCRIPTION", value);
                    this._addescription = value;
                    this.RaiseDataMemberChanged("ADDESCRIPTION");
                    this.OnADDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string ADNAME
        {
            get
            {
                return this._adname;
            }
            set
            {
                if ((this._adname != value))
                {
                    this.OnADNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADNAME");
                    this.ValidateProperty("ADNAME", value);
                    this._adname = value;
                    this.RaiseDataMemberChanged("ADNAME");
                    this.OnADNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NEXTADID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NEXTADID
        {
            get
            {
                return this._nextadid;
            }
            set
            {
                if ((this._nextadid != value))
                {
                    this.OnNEXTADIDChanging(value);
                    this.RaiseDataMemberChanging("NEXTADID");
                    this.ValidateProperty("NEXTADID", value);
                    this._nextadid = value;
                    this.RaiseDataMemberChanged("NEXTADID");
                    this.OnNEXTADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SEQNO”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SEQNO
        {
            get
            {
                return this._seqno;
            }
            set
            {
                if ((this._seqno != value))
                {
                    this.OnSEQNOChanging(value);
                    this.RaiseDataMemberChanging("SEQNO");
                    this.ValidateProperty("SEQNO", value);
                    this._seqno = value;
                    this.RaiseDataMemberChanged("SEQNO");
                    this.OnSEQNOChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFSJACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ZFSJACTIVITYDEFINITION_ZFSJACTIVITYINSTANCE", "ADID", "ADID")]
        [XmlIgnore()]
        public EntityCollection<ZFSJACTIVITYINSTANCE> ZFSJACTIVITYINSTANCES
        {
            get
            {
                if ((this._zfsjactivityinstances == null))
                {
                    this._zfsjactivityinstances = new EntityCollection<ZFSJACTIVITYINSTANCE>(this, "ZFSJACTIVITYINSTANCES", this.FilterZFSJACTIVITYINSTANCES, this.AttachZFSJACTIVITYINSTANCES, this.DetachZFSJACTIVITYINSTANCES);
                }
                return this._zfsjactivityinstances;
            }
        }
        
        private void AttachZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            entity.ZFSJACTIVITYDEFINITION = this;
        }
        
        private void DetachZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            entity.ZFSJACTIVITYDEFINITION = null;
        }
        
        private bool FilterZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “ZFSJACTIVITYINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJACTIVITYINSTANCE : Entity
    {
        
        private string _adata;
        
        private Nullable<decimal> _adid;
        
        private string _aiid;
        
        private Nullable<DateTime> _createtime;
        
        private string _imeicode;
        
        private string _previonsaiid;
        
        private Nullable<DateTime> _sjtimelimit;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _timelimit;
        
        private string _touserid;
        
        private string _wiid;
        
        private EntityRef<ZFSJACTIVITYDEFINITION> _zfsjactivitydefinition;
        
        private EntityRef<ZFSJWORKFLOWINSTANCE> _zfsjworkflowinstance;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADATAChanging(string value);
        partial void OnADATAChanged();
        partial void OnADIDChanging(Nullable<decimal> value);
        partial void OnADIDChanged();
        partial void OnAIIDChanging(string value);
        partial void OnAIIDChanged();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnIMEICODEChanging(string value);
        partial void OnIMEICODEChanged();
        partial void OnPREVIONSAIIDChanging(string value);
        partial void OnPREVIONSAIIDChanged();
        partial void OnSJTIMELIMITChanging(Nullable<DateTime> value);
        partial void OnSJTIMELIMITChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();
        partial void OnTOUSERIDChanging(string value);
        partial void OnTOUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJACTIVITYINSTANCE"/> 类的新实例。
        /// </summary>
        public ZFSJACTIVITYINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADATA”值。
        /// </summary>
        [DataMember()]
        public string ADATA
        {
            get
            {
                return this._adata;
            }
            set
            {
                if ((this._adata != value))
                {
                    this.OnADATAChanging(value);
                    this.RaiseDataMemberChanging("ADATA");
                    this.ValidateProperty("ADATA", value);
                    this._adata = value;
                    this.RaiseDataMemberChanged("ADATA");
                    this.OnADATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.RaiseDataMemberChanging("ADID");
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaiseDataMemberChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string AIID
        {
            get
            {
                return this._aiid;
            }
            set
            {
                if ((this._aiid != value))
                {
                    this.OnAIIDChanging(value);
                    this.ValidateProperty("AIID", value);
                    this._aiid = value;
                    this.RaisePropertyChanged("AIID");
                    this.OnAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IMEICODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string IMEICODE
        {
            get
            {
                return this._imeicode;
            }
            set
            {
                if ((this._imeicode != value))
                {
                    this.OnIMEICODEChanging(value);
                    this.RaiseDataMemberChanging("IMEICODE");
                    this.ValidateProperty("IMEICODE", value);
                    this._imeicode = value;
                    this.RaiseDataMemberChanged("IMEICODE");
                    this.OnIMEICODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PREVIONSAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PREVIONSAIID
        {
            get
            {
                return this._previonsaiid;
            }
            set
            {
                if ((this._previonsaiid != value))
                {
                    this.OnPREVIONSAIIDChanging(value);
                    this.RaiseDataMemberChanging("PREVIONSAIID");
                    this.ValidateProperty("PREVIONSAIID", value);
                    this._previonsaiid = value;
                    this.RaiseDataMemberChanged("PREVIONSAIID");
                    this.OnPREVIONSAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SJTIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> SJTIMELIMIT
        {
            get
            {
                return this._sjtimelimit;
            }
            set
            {
                if ((this._sjtimelimit != value))
                {
                    this.OnSJTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("SJTIMELIMIT");
                    this.ValidateProperty("SJTIMELIMIT", value);
                    this._sjtimelimit = value;
                    this.RaiseDataMemberChanged("SJTIMELIMIT");
                    this.OnSJTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TOUSERID”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TOUSERID
        {
            get
            {
                return this._touserid;
            }
            set
            {
                if ((this._touserid != value))
                {
                    this.OnTOUSERIDChanging(value);
                    this.RaiseDataMemberChanging("TOUSERID");
                    this.ValidateProperty("TOUSERID", value);
                    this._touserid = value;
                    this.RaiseDataMemberChanged("TOUSERID");
                    this.OnTOUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.RaiseDataMemberChanging("WIID");
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaiseDataMemberChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFSJACTIVITYDEFINITION"/> 实体。
        /// </summary>
        [Association("ZFSJACTIVITYDEFINITION_ZFSJACTIVITYINSTANCE", "ADID", "ADID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFSJACTIVITYDEFINITION ZFSJACTIVITYDEFINITION
        {
            get
            {
                if ((this._zfsjactivitydefinition == null))
                {
                    this._zfsjactivitydefinition = new EntityRef<ZFSJACTIVITYDEFINITION>(this, "ZFSJACTIVITYDEFINITION", this.FilterZFSJACTIVITYDEFINITION);
                }
                return this._zfsjactivitydefinition.Entity;
            }
            set
            {
                ZFSJACTIVITYDEFINITION previous = this.ZFSJACTIVITYDEFINITION;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFSJACTIVITYDEFINITION", value);
                    if ((previous != null))
                    {
                        this._zfsjactivitydefinition.Entity = null;
                        previous.ZFSJACTIVITYINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ADID = value.ADID;
                    }
                    else
                    {
                        this.ADID = default(Nullable<decimal>);
                    }
                    this._zfsjactivitydefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ZFSJACTIVITYINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("ZFSJACTIVITYDEFINITION");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFSJWORKFLOWINSTANCE"/> 实体。
        /// </summary>
        [Association("ZFSJWORKFLOWINSTANCE_ZFSJACTIVITYINSTANCE", "WIID", "WIID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFSJWORKFLOWINSTANCE ZFSJWORKFLOWINSTANCE
        {
            get
            {
                if ((this._zfsjworkflowinstance == null))
                {
                    this._zfsjworkflowinstance = new EntityRef<ZFSJWORKFLOWINSTANCE>(this, "ZFSJWORKFLOWINSTANCE", this.FilterZFSJWORKFLOWINSTANCE);
                }
                return this._zfsjworkflowinstance.Entity;
            }
            set
            {
                ZFSJWORKFLOWINSTANCE previous = this.ZFSJWORKFLOWINSTANCE;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFSJWORKFLOWINSTANCE", value);
                    if ((previous != null))
                    {
                        this._zfsjworkflowinstance.Entity = null;
                        previous.ZFSJACTIVITYINSTANCES.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.WIID = value.WIID;
                    }
                    else
                    {
                        this.WIID = default(string);
                    }
                    this._zfsjworkflowinstance.Entity = value;
                    if ((value != null))
                    {
                        value.ZFSJACTIVITYINSTANCES.Add(this);
                    }
                    this.RaisePropertyChanged("ZFSJWORKFLOWINSTANCE");
                }
            }
        }
        
        private bool FilterZFSJACTIVITYDEFINITION(ZFSJACTIVITYDEFINITION entity)
        {
            return (entity.ADID == this.ADID);
        }
        
        private bool FilterZFSJWORKFLOWINSTANCE(ZFSJWORKFLOWINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._aiid;
        }
    }
    
    /// <summary>
    /// “ZFSJCHARTBYQL”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJCHARTBYQL : Entity
    {
        
        private Nullable<decimal> _classid;
        
        private string _classname;
        
        private Nullable<DateTime> _dttime;
        
        private Nullable<decimal> _sj96310;
        
        private Nullable<decimal> _statusid;
        
        private decimal _zcid;
        
        private Nullable<decimal> _zfsjcounts;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCLASSIDChanging(Nullable<decimal> value);
        partial void OnCLASSIDChanged();
        partial void OnCLASSNAMEChanging(string value);
        partial void OnCLASSNAMEChanged();
        partial void OnDTTIMEChanging(Nullable<DateTime> value);
        partial void OnDTTIMEChanged();
        partial void OnSJ96310Changing(Nullable<decimal> value);
        partial void OnSJ96310Changed();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnZCIDChanging(decimal value);
        partial void OnZCIDChanged();
        partial void OnZFSJCOUNTSChanging(Nullable<decimal> value);
        partial void OnZFSJCOUNTSChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJCHARTBYQL"/> 类的新实例。
        /// </summary>
        public ZFSJCHARTBYQL()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CLASSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSID
        {
            get
            {
                return this._classid;
            }
            set
            {
                if ((this._classid != value))
                {
                    this.OnCLASSIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSID");
                    this.ValidateProperty("CLASSID", value);
                    this._classid = value;
                    this.RaiseDataMemberChanged("CLASSID");
                    this.OnCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CLASSNAME
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    this.OnCLASSNAMEChanging(value);
                    this.RaiseDataMemberChanging("CLASSNAME");
                    this.ValidateProperty("CLASSNAME", value);
                    this._classname = value;
                    this.RaiseDataMemberChanged("CLASSNAME");
                    this.OnCLASSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DTTIME
        {
            get
            {
                return this._dttime;
            }
            set
            {
                if ((this._dttime != value))
                {
                    this.OnDTTIMEChanging(value);
                    this.RaiseDataMemberChanging("DTTIME");
                    this.ValidateProperty("DTTIME", value);
                    this._dttime = value;
                    this.RaiseDataMemberChanged("DTTIME");
                    this.OnDTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SJ96310”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SJ96310
        {
            get
            {
                return this._sj96310;
            }
            set
            {
                if ((this._sj96310 != value))
                {
                    this.OnSJ96310Changing(value);
                    this.RaiseDataMemberChanging("SJ96310");
                    this.ValidateProperty("SJ96310", value);
                    this._sj96310 = value;
                    this.RaiseDataMemberChanged("SJ96310");
                    this.OnSJ96310Changed();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZCID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ZCID
        {
            get
            {
                return this._zcid;
            }
            set
            {
                if ((this._zcid != value))
                {
                    this.OnZCIDChanging(value);
                    this.ValidateProperty("ZCID", value);
                    this._zcid = value;
                    this.RaisePropertyChanged("ZCID");
                    this.OnZCIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ZFSJCOUNTS”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ZFSJCOUNTS
        {
            get
            {
                return this._zfsjcounts;
            }
            set
            {
                if ((this._zfsjcounts != value))
                {
                    this.OnZFSJCOUNTSChanging(value);
                    this.RaiseDataMemberChanging("ZFSJCOUNTS");
                    this.ValidateProperty("ZFSJCOUNTS", value);
                    this._zfsjcounts = value;
                    this.RaiseDataMemberChanged("ZFSJCOUNTS");
                    this.OnZFSJCOUNTSChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._zcid;
        }
    }
    
    /// <summary>
    /// “ZFSJCHECKWAY”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJCHECKWAY : Entity
    {
        
        private string _checkname;
        
        private string _description;
        
        private decimal _id;
        
        private Nullable<decimal> _processid;
        
        private EntityRef<ZFSJPROCESSWAY> _zfsjprocessway;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCHECKNAMEChanging(string value);
        partial void OnCHECKNAMEChanged();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnPROCESSIDChanging(Nullable<decimal> value);
        partial void OnPROCESSIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJCHECKWAY"/> 类的新实例。
        /// </summary>
        public ZFSJCHECKWAY()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CHECKNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string CHECKNAME
        {
            get
            {
                return this._checkname;
            }
            set
            {
                if ((this._checkname != value))
                {
                    this.OnCHECKNAMEChanging(value);
                    this.RaiseDataMemberChanging("CHECKNAME");
                    this.ValidateProperty("CHECKNAME", value);
                    this._checkname = value;
                    this.RaiseDataMemberChanged("CHECKNAME");
                    this.OnCHECKNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROCESSID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<decimal> PROCESSID
        {
            get
            {
                return this._processid;
            }
            set
            {
                if ((this._processid != value))
                {
                    this.OnPROCESSIDChanging(value);
                    this.RaiseDataMemberChanging("PROCESSID");
                    this.ValidateProperty("PROCESSID", value);
                    this._processid = value;
                    this.RaiseDataMemberChanged("PROCESSID");
                    this.OnPROCESSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="ZFSJPROCESSWAY"/> 实体。
        /// </summary>
        [Association("ZFSJPROCESSWAY_ZFSJCHECKWAY", "PROCESSID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public ZFSJPROCESSWAY ZFSJPROCESSWAY
        {
            get
            {
                if ((this._zfsjprocessway == null))
                {
                    this._zfsjprocessway = new EntityRef<ZFSJPROCESSWAY>(this, "ZFSJPROCESSWAY", this.FilterZFSJPROCESSWAY);
                }
                return this._zfsjprocessway.Entity;
            }
            set
            {
                ZFSJPROCESSWAY previous = this.ZFSJPROCESSWAY;
                if ((previous != value))
                {
                    this.ValidateProperty("ZFSJPROCESSWAY", value);
                    if ((previous != null))
                    {
                        this._zfsjprocessway.Entity = null;
                        previous.ZFSJCHECKWAYs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PROCESSID = value.ID;
                    }
                    else
                    {
                        this.PROCESSID = default(Nullable<decimal>);
                    }
                    this._zfsjprocessway.Entity = value;
                    if ((value != null))
                    {
                        value.ZFSJCHECKWAYs.Add(this);
                    }
                    this.RaisePropertyChanged("ZFSJPROCESSWAY");
                }
            }
        }
        
        private bool FilterZFSJPROCESSWAY(ZFSJPROCESSWAY entity)
        {
            return (entity.ID == this.PROCESSID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “ZFSJPROCESSWAY”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJPROCESSWAY : Entity
    {
        
        private string _description;
        
        private decimal _id;
        
        private string _processwayname;
        
        private EntityCollection<ZFSJCHECKWAY> _zfsjcheckwaYs;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnPROCESSWAYNAMEChanging(string value);
        partial void OnPROCESSWAYNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJPROCESSWAY"/> 类的新实例。
        /// </summary>
        public ZFSJPROCESSWAY()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PROCESSWAYNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PROCESSWAYNAME
        {
            get
            {
                return this._processwayname;
            }
            set
            {
                if ((this._processwayname != value))
                {
                    this.OnPROCESSWAYNAMEChanging(value);
                    this.RaiseDataMemberChanging("PROCESSWAYNAME");
                    this.ValidateProperty("PROCESSWAYNAME", value);
                    this._processwayname = value;
                    this.RaiseDataMemberChanged("PROCESSWAYNAME");
                    this.OnPROCESSWAYNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFSJCHECKWAY"/> 实体实例的集合。
        /// </summary>
        [Association("ZFSJPROCESSWAY_ZFSJCHECKWAY", "ID", "PROCESSID")]
        [XmlIgnore()]
        public EntityCollection<ZFSJCHECKWAY> ZFSJCHECKWAYs
        {
            get
            {
                if ((this._zfsjcheckwaYs == null))
                {
                    this._zfsjcheckwaYs = new EntityCollection<ZFSJCHECKWAY>(this, "ZFSJCHECKWAYs", this.FilterZFSJCHECKWAYs, this.AttachZFSJCHECKWAYs, this.DetachZFSJCHECKWAYs);
                }
                return this._zfsjcheckwaYs;
            }
        }
        
        private void AttachZFSJCHECKWAYs(ZFSJCHECKWAY entity)
        {
            entity.ZFSJPROCESSWAY = this;
        }
        
        private void DetachZFSJCHECKWAYs(ZFSJCHECKWAY entity)
        {
            entity.ZFSJPROCESSWAY = null;
        }
        
        private bool FilterZFSJCHECKWAYs(ZFSJCHECKWAY entity)
        {
            return (entity.PROCESSID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “ZFSJQUESTIONCLASS”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJQUESTIONCLASS : Entity
    {
        
        private Nullable<decimal> _classcode;
        
        private string _classid;
        
        private string _classname;
        
        private Nullable<decimal> _classtypeid;
        
        private Nullable<decimal> _grade;
        
        private Nullable<decimal> _parentid;
        
        private string _path;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCLASSCODEChanging(Nullable<decimal> value);
        partial void OnCLASSCODEChanged();
        partial void OnCLASSIDChanging(string value);
        partial void OnCLASSIDChanged();
        partial void OnCLASSNAMEChanging(string value);
        partial void OnCLASSNAMEChanged();
        partial void OnCLASSTYPEIDChanging(Nullable<decimal> value);
        partial void OnCLASSTYPEIDChanged();
        partial void OnGRADEChanging(Nullable<decimal> value);
        partial void OnGRADEChanged();
        partial void OnPARENTIDChanging(Nullable<decimal> value);
        partial void OnPARENTIDChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJQUESTIONCLASS"/> 类的新实例。
        /// </summary>
        public ZFSJQUESTIONCLASS()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CLASSCODE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSCODE
        {
            get
            {
                return this._classcode;
            }
            set
            {
                if ((this._classcode != value))
                {
                    this.OnCLASSCODEChanging(value);
                    this.RaiseDataMemberChanging("CLASSCODE");
                    this.ValidateProperty("CLASSCODE", value);
                    this._classcode = value;
                    this.RaiseDataMemberChanged("CLASSCODE");
                    this.OnCLASSCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CLASSID
        {
            get
            {
                return this._classid;
            }
            set
            {
                if ((this._classid != value))
                {
                    this.OnCLASSIDChanging(value);
                    this.ValidateProperty("CLASSID", value);
                    this._classid = value;
                    this.RaisePropertyChanged("CLASSID");
                    this.OnCLASSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string CLASSNAME
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    this.OnCLASSNAMEChanging(value);
                    this.RaiseDataMemberChanging("CLASSNAME");
                    this.ValidateProperty("CLASSNAME", value);
                    this._classname = value;
                    this.RaiseDataMemberChanged("CLASSNAME");
                    this.OnCLASSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CLASSTYPEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CLASSTYPEID
        {
            get
            {
                return this._classtypeid;
            }
            set
            {
                if ((this._classtypeid != value))
                {
                    this.OnCLASSTYPEIDChanging(value);
                    this.RaiseDataMemberChanging("CLASSTYPEID");
                    this.ValidateProperty("CLASSTYPEID", value);
                    this._classtypeid = value;
                    this.RaiseDataMemberChanged("CLASSTYPEID");
                    this.OnCLASSTYPEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GRADE”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> GRADE
        {
            get
            {
                return this._grade;
            }
            set
            {
                if ((this._grade != value))
                {
                    this.OnGRADEChanging(value);
                    this.RaiseDataMemberChanging("GRADE");
                    this.ValidateProperty("GRADE", value);
                    this._grade = value;
                    this.RaiseDataMemberChanged("GRADE");
                    this.OnGRADEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PATH”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string PATH
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPATHChanging(value);
                    this.RaiseDataMemberChanging("PATH");
                    this.ValidateProperty("PATH", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._classid;
        }
    }
    
    /// <summary>
    /// “ZFSJSOURCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJSOURCE : Entity
    {
        
        private string _description;
        
        private decimal _id;
        
        private string _sourcename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDESCRIPTIONChanging(string value);
        partial void OnDESCRIPTIONChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnSOURCENAMEChanging(string value);
        partial void OnSOURCENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJSOURCE"/> 类的新实例。
        /// </summary>
        public ZFSJSOURCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string DESCRIPTION
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("DESCRIPTION");
                    this.ValidateProperty("DESCRIPTION", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("DESCRIPTION");
                    this.OnDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SOURCENAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string SOURCENAME
        {
            get
            {
                return this._sourcename;
            }
            set
            {
                if ((this._sourcename != value))
                {
                    this.OnSOURCENAMEChanging(value);
                    this.RaiseDataMemberChanging("SOURCENAME");
                    this.ValidateProperty("SOURCENAME", value);
                    this._sourcename = value;
                    this.RaiseDataMemberChanged("SOURCENAME");
                    this.OnSOURCENAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “ZFSJSTATU”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJSTATU : Entity
    {
        
        private decimal _sid;
        
        private string _wscode;
        
        private string _wsdescription;
        
        private string _wsname;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnSIDChanging(decimal value);
        partial void OnSIDChanged();
        partial void OnWSCODEChanging(string value);
        partial void OnWSCODEChanged();
        partial void OnWSDESCRIPTIONChanging(string value);
        partial void OnWSDESCRIPTIONChanged();
        partial void OnWSNAMEChanging(string value);
        partial void OnWSNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJSTATU"/> 类的新实例。
        /// </summary>
        public ZFSJSTATU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“SID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal SID
        {
            get
            {
                return this._sid;
            }
            set
            {
                if ((this._sid != value))
                {
                    this.OnSIDChanging(value);
                    this.ValidateProperty("SID", value);
                    this._sid = value;
                    this.RaisePropertyChanged("SID");
                    this.OnSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSCODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSCODE
        {
            get
            {
                return this._wscode;
            }
            set
            {
                if ((this._wscode != value))
                {
                    this.OnWSCODEChanging(value);
                    this.RaiseDataMemberChanging("WSCODE");
                    this.ValidateProperty("WSCODE", value);
                    this._wscode = value;
                    this.RaiseDataMemberChanged("WSCODE");
                    this.OnWSCODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSDESCRIPTION”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSDESCRIPTION
        {
            get
            {
                return this._wsdescription;
            }
            set
            {
                if ((this._wsdescription != value))
                {
                    this.OnWSDESCRIPTIONChanging(value);
                    this.RaiseDataMemberChanging("WSDESCRIPTION");
                    this.ValidateProperty("WSDESCRIPTION", value);
                    this._wsdescription = value;
                    this.RaiseDataMemberChanged("WSDESCRIPTION");
                    this.OnWSDESCRIPTIONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WSNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WSNAME
        {
            get
            {
                return this._wsname;
            }
            set
            {
                if ((this._wsname != value))
                {
                    this.OnWSNAMEChanging(value);
                    this.RaiseDataMemberChanging("WSNAME");
                    this.ValidateProperty("WSNAME", value);
                    this._wsname = value;
                    this.RaiseDataMemberChanged("WSNAME");
                    this.OnWSNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._sid;
        }
    }
    
    /// <summary>
    /// “ZFSJSUMMARYINFORMATION”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJSUMMARYINFORMATION : Entity
    {
        
        private string _eventaddress;
        
        private string _eventsource;
        
        private string _eventtitle;
        
        private string _geometry;
        
        private string _imeicode;
        
        private string _reportperson;
        
        private Nullable<DateTime> _reporttime;
        
        private string _ssdd;
        
        private string _sszd;
        
        private Nullable<decimal> _unitid;
        
        private Nullable<decimal> _userid;
        
        private string _wiid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnEVENTADDRESSChanging(string value);
        partial void OnEVENTADDRESSChanged();
        partial void OnEVENTSOURCEChanging(string value);
        partial void OnEVENTSOURCEChanged();
        partial void OnEVENTTITLEChanging(string value);
        partial void OnEVENTTITLEChanged();
        partial void OnGEOMETRYChanging(string value);
        partial void OnGEOMETRYChanged();
        partial void OnIMEICODEChanging(string value);
        partial void OnIMEICODEChanged();
        partial void OnREPORTPERSONChanging(string value);
        partial void OnREPORTPERSONChanged();
        partial void OnREPORTTIMEChanging(Nullable<DateTime> value);
        partial void OnREPORTTIMEChanged();
        partial void OnSSDDChanging(string value);
        partial void OnSSDDChanged();
        partial void OnSSZDChanging(string value);
        partial void OnSSZDChanged();
        partial void OnUNITIDChanging(Nullable<decimal> value);
        partial void OnUNITIDChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJSUMMARYINFORMATION"/> 类的新实例。
        /// </summary>
        public ZFSJSUMMARYINFORMATION()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“EVENTADDRESS”值。
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string EVENTADDRESS
        {
            get
            {
                return this._eventaddress;
            }
            set
            {
                if ((this._eventaddress != value))
                {
                    this.OnEVENTADDRESSChanging(value);
                    this.RaiseDataMemberChanging("EVENTADDRESS");
                    this.ValidateProperty("EVENTADDRESS", value);
                    this._eventaddress = value;
                    this.RaiseDataMemberChanged("EVENTADDRESS");
                    this.OnEVENTADDRESSChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EVENTSOURCE
        {
            get
            {
                return this._eventsource;
            }
            set
            {
                if ((this._eventsource != value))
                {
                    this.OnEVENTSOURCEChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCE");
                    this.ValidateProperty("EVENTSOURCE", value);
                    this._eventsource = value;
                    this.RaiseDataMemberChanged("EVENTSOURCE");
                    this.OnEVENTSOURCEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTTITLE”值。
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string EVENTTITLE
        {
            get
            {
                return this._eventtitle;
            }
            set
            {
                if ((this._eventtitle != value))
                {
                    this.OnEVENTTITLEChanging(value);
                    this.RaiseDataMemberChanging("EVENTTITLE");
                    this.ValidateProperty("EVENTTITLE", value);
                    this._eventtitle = value;
                    this.RaiseDataMemberChanged("EVENTTITLE");
                    this.OnEVENTTITLEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“GEOMETRY”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string GEOMETRY
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGEOMETRYChanging(value);
                    this.RaiseDataMemberChanging("GEOMETRY");
                    this.ValidateProperty("GEOMETRY", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("GEOMETRY");
                    this.OnGEOMETRYChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IMEICODE”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string IMEICODE
        {
            get
            {
                return this._imeicode;
            }
            set
            {
                if ((this._imeicode != value))
                {
                    this.OnIMEICODEChanging(value);
                    this.RaiseDataMemberChanging("IMEICODE");
                    this.ValidateProperty("IMEICODE", value);
                    this._imeicode = value;
                    this.RaiseDataMemberChanged("IMEICODE");
                    this.OnIMEICODEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REPORTPERSON”值。
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string REPORTPERSON
        {
            get
            {
                return this._reportperson;
            }
            set
            {
                if ((this._reportperson != value))
                {
                    this.OnREPORTPERSONChanging(value);
                    this.RaiseDataMemberChanging("REPORTPERSON");
                    this.ValidateProperty("REPORTPERSON", value);
                    this._reportperson = value;
                    this.RaiseDataMemberChanged("REPORTPERSON");
                    this.OnREPORTPERSONChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“REPORTTIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> REPORTTIME
        {
            get
            {
                return this._reporttime;
            }
            set
            {
                if ((this._reporttime != value))
                {
                    this.OnREPORTTIMEChanging(value);
                    this.RaiseDataMemberChanging("REPORTTIME");
                    this.ValidateProperty("REPORTTIME", value);
                    this._reporttime = value;
                    this.RaiseDataMemberChanged("REPORTTIME");
                    this.OnREPORTTIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSDD”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string SSDD
        {
            get
            {
                return this._ssdd;
            }
            set
            {
                if ((this._ssdd != value))
                {
                    this.OnSSDDChanging(value);
                    this.RaiseDataMemberChanging("SSDD");
                    this.ValidateProperty("SSDD", value);
                    this._ssdd = value;
                    this.RaiseDataMemberChanged("SSDD");
                    this.OnSSDDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZD”值。
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string SSZD
        {
            get
            {
                return this._sszd;
            }
            set
            {
                if ((this._sszd != value))
                {
                    this.OnSSZDChanging(value);
                    this.RaiseDataMemberChanging("SSZD");
                    this.ValidateProperty("SSZD", value);
                    this._sszd = value;
                    this.RaiseDataMemberChanged("SSZD");
                    this.OnSSZDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNITID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNITID
        {
            get
            {
                return this._unitid;
            }
            set
            {
                if ((this._unitid != value))
                {
                    this.OnUNITIDChanging(value);
                    this.RaiseDataMemberChanging("UNITID");
                    this.ValidateProperty("UNITID", value);
                    this._unitid = value;
                    this.RaiseDataMemberChanged("UNITID");
                    this.OnUNITIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
    
    /// <summary>
    /// “ZFSJTIMELIMIT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJTIMELIMIT : Entity
    {
        
        private decimal _adid;
        
        private string _adname;
        
        private string _eventsourcetype;
        
        private string _id;
        
        private Nullable<decimal> _timelimit;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnADIDChanging(decimal value);
        partial void OnADIDChanged();
        partial void OnADNAMEChanging(string value);
        partial void OnADNAMEChanged();
        partial void OnEVENTSOURCETYPEChanging(string value);
        partial void OnEVENTSOURCETYPEChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnTIMELIMITChanging(Nullable<decimal> value);
        partial void OnTIMELIMITChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJTIMELIMIT"/> 类的新实例。
        /// </summary>
        public ZFSJTIMELIMIT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ADID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ADID
        {
            get
            {
                return this._adid;
            }
            set
            {
                if ((this._adid != value))
                {
                    this.OnADIDChanging(value);
                    this.ValidateProperty("ADID", value);
                    this._adid = value;
                    this.RaisePropertyChanged("ADID");
                    this.OnADIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ADNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ADNAME
        {
            get
            {
                return this._adname;
            }
            set
            {
                if ((this._adname != value))
                {
                    this.OnADNAMEChanging(value);
                    this.RaiseDataMemberChanging("ADNAME");
                    this.ValidateProperty("ADNAME", value);
                    this._adname = value;
                    this.RaiseDataMemberChanged("ADNAME");
                    this.OnADNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCETYPE”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EVENTSOURCETYPE
        {
            get
            {
                return this._eventsourcetype;
            }
            set
            {
                if ((this._eventsourcetype != value))
                {
                    this.OnEVENTSOURCETYPEChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCETYPE");
                    this.ValidateProperty("EVENTSOURCETYPE", value);
                    this._eventsourcetype = value;
                    this.RaiseDataMemberChanged("EVENTSOURCETYPE");
                    this.OnEVENTSOURCETYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TIMELIMIT”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TIMELIMIT
        {
            get
            {
                return this._timelimit;
            }
            set
            {
                if ((this._timelimit != value))
                {
                    this.OnTIMELIMITChanging(value);
                    this.RaiseDataMemberChanging("TIMELIMIT");
                    this.ValidateProperty("TIMELIMIT", value);
                    this._timelimit = value;
                    this.RaiseDataMemberChanged("TIMELIMIT");
                    this.OnTIMELIMITChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._adid;
        }
    }
    
    /// <summary>
    /// “ZFSJWORKFLOWINSTANCE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web")]
    public sealed partial class ZFSJWORKFLOWINSTANCE : Entity
    {
        
        private Nullable<DateTime> _createtime;
        
        private string _currentaiid;
        
        private Nullable<decimal> _eventsourceid;
        
        private string _eventsourcepkid;
        
        private EntityCollection<GGFWTOZFZD> _ggfwtozfzds;
        
        private string _phoneid;
        
        private Nullable<decimal> _statusid;
        
        private Nullable<decimal> _untiid;
        
        private Nullable<DateTime> _updatetime;
        
        private Nullable<decimal> _userid;
        
        private string _wdata;
        
        private string _wiid;
        
        private EntityCollection<ZFSJACTIVITYINSTANCE> _zfsjactivityinstances;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCREATETIMEChanging(Nullable<DateTime> value);
        partial void OnCREATETIMEChanged();
        partial void OnCURRENTAIIDChanging(string value);
        partial void OnCURRENTAIIDChanged();
        partial void OnEVENTSOURCEIDChanging(Nullable<decimal> value);
        partial void OnEVENTSOURCEIDChanged();
        partial void OnEVENTSOURCEPKIDChanging(string value);
        partial void OnEVENTSOURCEPKIDChanged();
        partial void OnPHONEIDChanging(string value);
        partial void OnPHONEIDChanged();
        partial void OnSTATUSIDChanging(Nullable<decimal> value);
        partial void OnSTATUSIDChanged();
        partial void OnUNTIIDChanging(Nullable<decimal> value);
        partial void OnUNTIIDChanged();
        partial void OnUPDATETIMEChanging(Nullable<DateTime> value);
        partial void OnUPDATETIMEChanged();
        partial void OnUSERIDChanging(Nullable<decimal> value);
        partial void OnUSERIDChanged();
        partial void OnWDATAChanging(string value);
        partial void OnWDATAChanged();
        partial void OnWIIDChanging(string value);
        partial void OnWIIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ZFSJWORKFLOWINSTANCE"/> 类的新实例。
        /// </summary>
        public ZFSJWORKFLOWINSTANCE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CREATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CREATETIME
        {
            get
            {
                return this._createtime;
            }
            set
            {
                if ((this._createtime != value))
                {
                    this.OnCREATETIMEChanging(value);
                    this.RaiseDataMemberChanging("CREATETIME");
                    this.ValidateProperty("CREATETIME", value);
                    this._createtime = value;
                    this.RaiseDataMemberChanged("CREATETIME");
                    this.OnCREATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CURRENTAIID”值。
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string CURRENTAIID
        {
            get
            {
                return this._currentaiid;
            }
            set
            {
                if ((this._currentaiid != value))
                {
                    this.OnCURRENTAIIDChanging(value);
                    this.RaiseDataMemberChanging("CURRENTAIID");
                    this.ValidateProperty("CURRENTAIID", value);
                    this._currentaiid = value;
                    this.RaiseDataMemberChanged("CURRENTAIID");
                    this.OnCURRENTAIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCEID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> EVENTSOURCEID
        {
            get
            {
                return this._eventsourceid;
            }
            set
            {
                if ((this._eventsourceid != value))
                {
                    this.OnEVENTSOURCEIDChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCEID");
                    this.ValidateProperty("EVENTSOURCEID", value);
                    this._eventsourceid = value;
                    this.RaiseDataMemberChanged("EVENTSOURCEID");
                    this.OnEVENTSOURCEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EVENTSOURCEPKID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EVENTSOURCEPKID
        {
            get
            {
                return this._eventsourcepkid;
            }
            set
            {
                if ((this._eventsourcepkid != value))
                {
                    this.OnEVENTSOURCEPKIDChanging(value);
                    this.RaiseDataMemberChanging("EVENTSOURCEPKID");
                    this.ValidateProperty("EVENTSOURCEPKID", value);
                    this._eventsourcepkid = value;
                    this.RaiseDataMemberChanged("EVENTSOURCEPKID");
                    this.OnEVENTSOURCEPKIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="GGFWTOZFZD"/> 实体实例的集合。
        /// </summary>
        [Association("ZFSJWORKFLOWINSTANCE_GGFWTOZFZD", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<GGFWTOZFZD> GGFWTOZFZDS
        {
            get
            {
                if ((this._ggfwtozfzds == null))
                {
                    this._ggfwtozfzds = new EntityCollection<GGFWTOZFZD>(this, "GGFWTOZFZDS", this.FilterGGFWTOZFZDS, this.AttachGGFWTOZFZDS, this.DetachGGFWTOZFZDS);
                }
                return this._ggfwtozfzds;
            }
        }
        
        /// <summary>
        /// 获取或设置“PHONEID”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PHONEID
        {
            get
            {
                return this._phoneid;
            }
            set
            {
                if ((this._phoneid != value))
                {
                    this.OnPHONEIDChanging(value);
                    this.RaiseDataMemberChanging("PHONEID");
                    this.ValidateProperty("PHONEID", value);
                    this._phoneid = value;
                    this.RaiseDataMemberChanged("PHONEID");
                    this.OnPHONEIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“STATUSID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> STATUSID
        {
            get
            {
                return this._statusid;
            }
            set
            {
                if ((this._statusid != value))
                {
                    this.OnSTATUSIDChanging(value);
                    this.RaiseDataMemberChanging("STATUSID");
                    this.ValidateProperty("STATUSID", value);
                    this._statusid = value;
                    this.RaiseDataMemberChanged("STATUSID");
                    this.OnSTATUSIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UNTIID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UNTIID
        {
            get
            {
                return this._untiid;
            }
            set
            {
                if ((this._untiid != value))
                {
                    this.OnUNTIIDChanging(value);
                    this.RaiseDataMemberChanging("UNTIID");
                    this.ValidateProperty("UNTIID", value);
                    this._untiid = value;
                    this.RaiseDataMemberChanged("UNTIID");
                    this.OnUNTIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UPDATETIME”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> UPDATETIME
        {
            get
            {
                return this._updatetime;
            }
            set
            {
                if ((this._updatetime != value))
                {
                    this.OnUPDATETIMEChanging(value);
                    this.RaiseDataMemberChanging("UPDATETIME");
                    this.ValidateProperty("UPDATETIME", value);
                    this._updatetime = value;
                    this.RaiseDataMemberChanged("UPDATETIME");
                    this.OnUPDATETIMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WDATA”值。
        /// </summary>
        [DataMember()]
        public string WDATA
        {
            get
            {
                return this._wdata;
            }
            set
            {
                if ((this._wdata != value))
                {
                    this.OnWDATAChanging(value);
                    this.RaiseDataMemberChanging("WDATA");
                    this.ValidateProperty("WDATA", value);
                    this._wdata = value;
                    this.RaiseDataMemberChanged("WDATA");
                    this.OnWDATAChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WIID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(32)]
        public string WIID
        {
            get
            {
                return this._wiid;
            }
            set
            {
                if ((this._wiid != value))
                {
                    this.OnWIIDChanging(value);
                    this.ValidateProperty("WIID", value);
                    this._wiid = value;
                    this.RaisePropertyChanged("WIID");
                    this.OnWIIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="ZFSJACTIVITYINSTANCE"/> 实体实例的集合。
        /// </summary>
        [Association("ZFSJWORKFLOWINSTANCE_ZFSJACTIVITYINSTANCE", "WIID", "WIID")]
        [XmlIgnore()]
        public EntityCollection<ZFSJACTIVITYINSTANCE> ZFSJACTIVITYINSTANCES
        {
            get
            {
                if ((this._zfsjactivityinstances == null))
                {
                    this._zfsjactivityinstances = new EntityCollection<ZFSJACTIVITYINSTANCE>(this, "ZFSJACTIVITYINSTANCES", this.FilterZFSJACTIVITYINSTANCES, this.AttachZFSJACTIVITYINSTANCES, this.DetachZFSJACTIVITYINSTANCES);
                }
                return this._zfsjactivityinstances;
            }
        }
        
        private void AttachGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            entity.ZFSJWORKFLOWINSTANCE = this;
        }
        
        private void DetachGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            entity.ZFSJWORKFLOWINSTANCE = null;
        }
        
        private bool FilterGGFWTOZFZDS(GGFWTOZFZD entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        private void AttachZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            entity.ZFSJWORKFLOWINSTANCE = this;
        }
        
        private void DetachZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            entity.ZFSJWORKFLOWINSTANCE = null;
        }
        
        private bool FilterZFSJACTIVITYINSTANCES(ZFSJACTIVITYINSTANCE entity)
        {
            return (entity.WIID == this.WIID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._wiid;
        }
    }
}
namespace Taizhou.PLE.LawCom.Web.Complex
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// “Car”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web.Complex")]
    public sealed partial class Car : Entity
    {
        
        private string _carNumber;
        
        private decimal _id;
        
        private Nullable<DateTime> _positionDateTime;
        
        private Nullable<decimal> _unitID;
        
        private string _unitName;
        
        private Nullable<double> _x;
        
        private Nullable<double> _y;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCarNumberChanging(string value);
        partial void OnCarNumberChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnPositionDateTimeChanging(Nullable<DateTime> value);
        partial void OnPositionDateTimeChanged();
        partial void OnUnitIDChanging(Nullable<decimal> value);
        partial void OnUnitIDChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnXChanging(Nullable<double> value);
        partial void OnXChanged();
        partial void OnYChanging(Nullable<double> value);
        partial void OnYChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Car"/> 类的新实例。
        /// </summary>
        public Car()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CarNumber”值。
        /// </summary>
        [DataMember()]
        public string CarNumber
        {
            get
            {
                return this._carNumber;
            }
            set
            {
                if ((this._carNumber != value))
                {
                    this.OnCarNumberChanging(value);
                    this.RaiseDataMemberChanging("CarNumber");
                    this.ValidateProperty("CarNumber", value);
                    this._carNumber = value;
                    this.RaiseDataMemberChanged("CarNumber");
                    this.OnCarNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PositionDateTime”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PositionDateTime
        {
            get
            {
                return this._positionDateTime;
            }
            set
            {
                if ((this._positionDateTime != value))
                {
                    this.OnPositionDateTimeChanging(value);
                    this.RaiseDataMemberChanging("PositionDateTime");
                    this.ValidateProperty("PositionDateTime", value);
                    this._positionDateTime = value;
                    this.RaiseDataMemberChanged("PositionDateTime");
                    this.OnPositionDateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitID
        {
            get
            {
                return this._unitID;
            }
            set
            {
                if ((this._unitID != value))
                {
                    this.OnUnitIDChanging(value);
                    this.RaiseDataMemberChanging("UnitID");
                    this.ValidateProperty("UnitID", value);
                    this._unitID = value;
                    this.RaiseDataMemberChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitName”值。
        /// </summary>
        [DataMember()]
        public string UnitName
        {
            get
            {
                return this._unitName;
            }
            set
            {
                if ((this._unitName != value))
                {
                    this.OnUnitNameChanging(value);
                    this.RaiseDataMemberChanging("UnitName");
                    this.ValidateProperty("UnitName", value);
                    this._unitName = value;
                    this.RaiseDataMemberChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“X”值。
        /// </summary>
        [DataMember()]
        public Nullable<double> X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    this.OnXChanging(value);
                    this.RaiseDataMemberChanging("X");
                    this.ValidateProperty("X", value);
                    this._x = value;
                    this.RaiseDataMemberChanged("X");
                    this.OnXChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Y”值。
        /// </summary>
        [DataMember()]
        public Nullable<double> Y
        {
            get
            {
                return this._y;
            }
            set
            {
                if ((this._y != value))
                {
                    this.OnYChanging(value);
                    this.RaiseDataMemberChanging("Y");
                    this.ValidateProperty("Y", value);
                    this._y = value;
                    this.RaiseDataMemberChanged("Y");
                    this.OnYChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “EventLaw”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web.Complex")]
    public sealed partial class EventLaw : Entity
    {
        
        private string _eventAddress;
        
        private string _eventID;
        
        private string _eventSource;
        
        private string _eventTitle;
        
        private string _geometry;
        
        private string _reportPerson;
        
        private Nullable<DateTime> _reportTime;
        
        private string _ssdd;
        
        private string _sszd;
        
        private Nullable<decimal> _unitID;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnEventAddressChanging(string value);
        partial void OnEventAddressChanged();
        partial void OnEventIDChanging(string value);
        partial void OnEventIDChanged();
        partial void OnEventSourceChanging(string value);
        partial void OnEventSourceChanged();
        partial void OnEventTitleChanging(string value);
        partial void OnEventTitleChanged();
        partial void OnGeometryChanging(string value);
        partial void OnGeometryChanged();
        partial void OnReportPersonChanging(string value);
        partial void OnReportPersonChanged();
        partial void OnReportTimeChanging(Nullable<DateTime> value);
        partial void OnReportTimeChanged();
        partial void OnSSDDChanging(string value);
        partial void OnSSDDChanged();
        partial void OnSSZDChanging(string value);
        partial void OnSSZDChanged();
        partial void OnUnitIDChanging(Nullable<decimal> value);
        partial void OnUnitIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="EventLaw"/> 类的新实例。
        /// </summary>
        public EventLaw()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“EventAddress”值。
        /// </summary>
        [DataMember()]
        public string EventAddress
        {
            get
            {
                return this._eventAddress;
            }
            set
            {
                if ((this._eventAddress != value))
                {
                    this.OnEventAddressChanging(value);
                    this.RaiseDataMemberChanging("EventAddress");
                    this.ValidateProperty("EventAddress", value);
                    this._eventAddress = value;
                    this.RaiseDataMemberChanged("EventAddress");
                    this.OnEventAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EventID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.ValidateProperty("EventID", value);
                    this._eventID = value;
                    this.RaisePropertyChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EventSource”值。
        /// </summary>
        [DataMember()]
        public string EventSource
        {
            get
            {
                return this._eventSource;
            }
            set
            {
                if ((this._eventSource != value))
                {
                    this.OnEventSourceChanging(value);
                    this.RaiseDataMemberChanging("EventSource");
                    this.ValidateProperty("EventSource", value);
                    this._eventSource = value;
                    this.RaiseDataMemberChanged("EventSource");
                    this.OnEventSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“EventTitle”值。
        /// </summary>
        [DataMember()]
        public string EventTitle
        {
            get
            {
                return this._eventTitle;
            }
            set
            {
                if ((this._eventTitle != value))
                {
                    this.OnEventTitleChanging(value);
                    this.RaiseDataMemberChanging("EventTitle");
                    this.ValidateProperty("EventTitle", value);
                    this._eventTitle = value;
                    this.RaiseDataMemberChanged("EventTitle");
                    this.OnEventTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Geometry”值。
        /// </summary>
        [DataMember()]
        public string Geometry
        {
            get
            {
                return this._geometry;
            }
            set
            {
                if ((this._geometry != value))
                {
                    this.OnGeometryChanging(value);
                    this.RaiseDataMemberChanging("Geometry");
                    this.ValidateProperty("Geometry", value);
                    this._geometry = value;
                    this.RaiseDataMemberChanged("Geometry");
                    this.OnGeometryChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReportPerson”值。
        /// </summary>
        [DataMember()]
        public string ReportPerson
        {
            get
            {
                return this._reportPerson;
            }
            set
            {
                if ((this._reportPerson != value))
                {
                    this.OnReportPersonChanging(value);
                    this.RaiseDataMemberChanging("ReportPerson");
                    this.ValidateProperty("ReportPerson", value);
                    this._reportPerson = value;
                    this.RaiseDataMemberChanged("ReportPerson");
                    this.OnReportPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReportTime”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ReportTime
        {
            get
            {
                return this._reportTime;
            }
            set
            {
                if ((this._reportTime != value))
                {
                    this.OnReportTimeChanging(value);
                    this.RaiseDataMemberChanging("ReportTime");
                    this.ValidateProperty("ReportTime", value);
                    this._reportTime = value;
                    this.RaiseDataMemberChanged("ReportTime");
                    this.OnReportTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSDD”值。
        /// </summary>
        [DataMember()]
        public string SSDD
        {
            get
            {
                return this._ssdd;
            }
            set
            {
                if ((this._ssdd != value))
                {
                    this.OnSSDDChanging(value);
                    this.RaiseDataMemberChanging("SSDD");
                    this.ValidateProperty("SSDD", value);
                    this._ssdd = value;
                    this.RaiseDataMemberChanged("SSDD");
                    this.OnSSDDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SSZD”值。
        /// </summary>
        [DataMember()]
        public string SSZD
        {
            get
            {
                return this._sszd;
            }
            set
            {
                if ((this._sszd != value))
                {
                    this.OnSSZDChanging(value);
                    this.RaiseDataMemberChanging("SSZD");
                    this.ValidateProperty("SSZD", value);
                    this._sszd = value;
                    this.RaiseDataMemberChanged("SSZD");
                    this.OnSSZDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitID
        {
            get
            {
                return this._unitID;
            }
            set
            {
                if ((this._unitID != value))
                {
                    this.OnUnitIDChanging(value);
                    this.RaiseDataMemberChanging("UnitID");
                    this.ValidateProperty("UnitID", value);
                    this._unitID = value;
                    this.RaiseDataMemberChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._eventID;
        }
    }
    
    /// <summary>
    /// “Person”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web.Complex")]
    public sealed partial class Person : Entity
    {
        
        private Nullable<double> _lat;
        
        private Nullable<double> _lon;
        
        private Nullable<DateTime> _positionTime;
        
        private string _smsNumber;
        
        private Nullable<decimal> _unitID;
        
        private string _unitName;
        
        private decimal _userID;
        
        private string _userName;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnLatChanging(Nullable<double> value);
        partial void OnLatChanged();
        partial void OnLonChanging(Nullable<double> value);
        partial void OnLonChanged();
        partial void OnPositionTimeChanging(Nullable<DateTime> value);
        partial void OnPositionTimeChanged();
        partial void OnSmsNumberChanging(string value);
        partial void OnSmsNumberChanged();
        partial void OnUnitIDChanging(Nullable<decimal> value);
        partial void OnUnitIDChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnUserIDChanging(decimal value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Person"/> 类的新实例。
        /// </summary>
        public Person()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Lat”值。
        /// </summary>
        [DataMember()]
        public Nullable<double> Lat
        {
            get
            {
                return this._lat;
            }
            set
            {
                if ((this._lat != value))
                {
                    this.OnLatChanging(value);
                    this.RaiseDataMemberChanging("Lat");
                    this.ValidateProperty("Lat", value);
                    this._lat = value;
                    this.RaiseDataMemberChanged("Lat");
                    this.OnLatChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Lon”值。
        /// </summary>
        [DataMember()]
        public Nullable<double> Lon
        {
            get
            {
                return this._lon;
            }
            set
            {
                if ((this._lon != value))
                {
                    this.OnLonChanging(value);
                    this.RaiseDataMemberChanging("Lon");
                    this.ValidateProperty("Lon", value);
                    this._lon = value;
                    this.RaiseDataMemberChanged("Lon");
                    this.OnLonChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PositionTime”值。
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PositionTime
        {
            get
            {
                return this._positionTime;
            }
            set
            {
                if ((this._positionTime != value))
                {
                    this.OnPositionTimeChanging(value);
                    this.RaiseDataMemberChanging("PositionTime");
                    this.ValidateProperty("PositionTime", value);
                    this._positionTime = value;
                    this.RaiseDataMemberChanged("PositionTime");
                    this.OnPositionTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SmsNumber”值。
        /// </summary>
        [DataMember()]
        public string SmsNumber
        {
            get
            {
                return this._smsNumber;
            }
            set
            {
                if ((this._smsNumber != value))
                {
                    this.OnSmsNumberChanging(value);
                    this.RaiseDataMemberChanging("SmsNumber");
                    this.ValidateProperty("SmsNumber", value);
                    this._smsNumber = value;
                    this.RaiseDataMemberChanged("SmsNumber");
                    this.OnSmsNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitID
        {
            get
            {
                return this._unitID;
            }
            set
            {
                if ((this._unitID != value))
                {
                    this.OnUnitIDChanging(value);
                    this.RaiseDataMemberChanging("UnitID");
                    this.ValidateProperty("UnitID", value);
                    this._unitID = value;
                    this.RaiseDataMemberChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitName”值。
        /// </summary>
        [DataMember()]
        public string UnitName
        {
            get
            {
                return this._unitName;
            }
            set
            {
                if ((this._unitName != value))
                {
                    this.OnUnitNameChanging(value);
                    this.RaiseDataMemberChanging("UnitName");
                    this.ValidateProperty("UnitName", value);
                    this._unitName = value;
                    this.RaiseDataMemberChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserName”值。
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
    }
    
    /// <summary>
    /// “Unit”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Taizhou.PLE.LawCom.Web.Complex")]
    public sealed partial class Unit : Entity
    {
        
        private string _abbrName;
        
        private decimal _id;
        
        private string _name;
        
        private Nullable<decimal> _parentID;
        
        private Nullable<decimal> _seqNo;
        
        private Nullable<decimal> _unitTypeId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAbbrNameChanging(string value);
        partial void OnAbbrNameChanged();
        partial void OnIDChanging(decimal value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentIDChanging(Nullable<decimal> value);
        partial void OnParentIDChanged();
        partial void OnSeqNoChanging(Nullable<decimal> value);
        partial void OnSeqNoChanged();
        partial void OnUnitTypeIdChanging(Nullable<decimal> value);
        partial void OnUnitTypeIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Unit"/> 类的新实例。
        /// </summary>
        public Unit()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AbbrName”值。
        /// </summary>
        [DataMember()]
        public string AbbrName
        {
            get
            {
                return this._abbrName;
            }
            set
            {
                if ((this._abbrName != value))
                {
                    this.OnAbbrNameChanging(value);
                    this.RaiseDataMemberChanging("AbbrName");
                    this.ValidateProperty("AbbrName", value);
                    this._abbrName = value;
                    this.RaiseDataMemberChanged("AbbrName");
                    this.OnAbbrNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public decimal ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Name”值。
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentID”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SeqNo”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SeqNo
        {
            get
            {
                return this._seqNo;
            }
            set
            {
                if ((this._seqNo != value))
                {
                    this.OnSeqNoChanging(value);
                    this.RaiseDataMemberChanging("SeqNo");
                    this.ValidateProperty("SeqNo", value);
                    this._seqNo = value;
                    this.RaiseDataMemberChanged("SeqNo");
                    this.OnSeqNoChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UnitTypeId”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitTypeId
        {
            get
            {
                return this._unitTypeId;
            }
            set
            {
                if ((this._unitTypeId != value))
                {
                    this.OnUnitTypeIdChanging(value);
                    this.RaiseDataMemberChanging("UnitTypeId");
                    this.ValidateProperty("UnitTypeId", value);
                    this._unitTypeId = value;
                    this.RaiseDataMemberChanged("UnitTypeId");
                    this.OnUnitTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
